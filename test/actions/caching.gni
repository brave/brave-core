# Copyright (c) 2018 The Brave Authors. All rights reserved.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at https://mozilla.org/MPL/2.0/.

# Finds all runtime data (eg. testdata) of an executable and depend on it
# Hashes all data and recompute a collective hash
# This rule and any rules that depend on this will re-run
# on file change.
# Runtime Data are dynamically loaded libraries and any data specified
# via the data attribute
# input:
# - binary: path to executable binary
# - dep: dependency to binary
# - testonly: must be set if dep is a test
# - files: extra files you want to track
# generates a json file of the shape:
# { hash: sha256string, files: string[] }
# in "$root_out_dir/$target_name"

import("//brave/build/config.gni")
import("//testing/test.gni")


template("hash_runtime") {
  action(target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "testonly",
                           ])
    script = "//brave/test/actions/hash_runtime.py"
    depfile = "$root_out_dir/" + target_name + ".d"
    inputs = [ invoker.binary ]
    outputs = [ "$root_out_dir/" + target_name ]
    args = [ rebase_path(invoker.binary) ]

    if (defined(invoker.files)) {
      foreach(file, invoker.files) {
        inputs += [ file ]
        args += [ rebase_path(file) ]
      }
    }
  }
}

template("cached_test") {
  name = target_name
  test(name + ".gtest") {
    testonly = true
    forward_variables_from(invoker, "*", TESTONLY_AND_VISIBILITY)

    if (!defined(invoker.public_deps)) {
      public_deps = [
        "//base/test:run_all_unittests",
        "//base/test:test_support",
        "//testing/gmock",
        "//testing/gtest",
      ]
    }
  }

  hash_runtime(target_name + ".gtest.hash.json") {
    testonly = true
    deps = [ ":" + name + ".gtest" ]
    binary = "$root_out_dir/" + name + ".gtest"
    forward_variables_from(invoker, [ "files" ])
  }

  action(target_name) {
    testonly = true
    script = "//brave/test/actions/test_runner.py"
    deps = [
      ":" + name + ".gtest.hash.json",
      ":" + name + ".gtest",
    ]

    inputs = [
      "$root_out_dir/" + name + ".gtest",
      "$root_out_dir/" + name + ".gtest.hash.json",
    ]

    if (defined(invoker.inputs)) {
      inputs += invoker.inputs
    }

    outputs = [
      "$target_gen_dir/" + name + "/result.json",
      "$target_gen_dir/" + name + "/stdout.txt",
    ]

    args = [
      rebase_path("$root_out_dir/" + name + ".gtest"),
      rebase_path("$target_gen_dir/" + name),
    ]
  }
}
