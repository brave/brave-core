import("//brave/build/config.gni")
import("//testing/test.gni")

# Finds all runtime data (eg. testdata) of an executable and depend on it
# Hashes all data and recompute a collective hash
# This rule and any rules that depend on this will re-run
# on file change.
# Runtime Data are dynamically loaded libraries and any data specified 
# via the data attribute 
# input: 
# - binary: path to executable binary
# - dep: dependency to binary
# - testonly: must be set if dep is a test
# - files: extra files you want to track
# generates a json file of the shape:
# { hash: sha256string, files: string[] }
# in "$root_out_dir/$target_name"

template("hashRuntime") {
  action(target_name) {
    forward_variables_from(invoker, ["deps", "testonly"])
    script = "//brave/test/actions/hashRuntime.py"
    depfile = "$root_out_dir/" + target_name + ".d"
    inputs = [invoker.binary]
    outputs = ["$root_out_dir/"+ target_name]
    args = [
      rebase_path(invoker.binary)
    ]

    if (defined(invoker.files)) {
      foreach(file, invoker.files) {
        inputs += [file]
        args += [rebase_path(file)]
      }
    }
  }
}

template("cacheTest") {
  name = target_name
  test(name + ".gtest") {
    testonly = true
    forward_variables_from(invoker, "*", ["configs"])

    # Apply configs if the invoker provided any
    if (defined(invoker.configs)) {
      configs = invoker.configs
    }

    if(!defined(invoker.public_deps)) {
      public_deps = [
        "//testing/gtest",
        "//third_party/googletest:gtest_main"
      ]
    }
  }

  hashRuntime(target_name + ".hash.json") {
    testonly = true
    deps = [":"+name+".gtest"]
    binary = "$root_out_dir/"+name+".gtest"
    forward_variables_from(invoker, ["files"])
  }

  action(target_name) {
    testonly = true
    script = "//brave/test/actions/testRunner.py"
    deps = [":"+name+".hash.json", ":"+name+".gtest"]

    inputs = [
      "$root_out_dir/"+ name + ".gtest",
      "$root_out_dir/"+ name + ".hash.json"
    ]

    if (defined(invoker.inputs)) {
      inputs += invoker.inputs
    }

    outputs = [
      "$target_gen_dir/"+name+"/result.json",
      "$target_gen_dir/"+name+"/stdout.txt"
    ]

    args = [
      rebase_path("$root_out_dir/"+name + ".gtest"), 
      rebase_path("$target_gen_dir/"+name)
    ]
  }
}