# Copyright (c) 2018 The Brave Authors. All rights reserved.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at https://mozilla.org/MPL/2.0/.

# Finds all runtime data (eg. testdata) of an executable and depend on it
# Hashes all data and recompute a collective hash
# This rule and any rules that depend on this will re-run
# on file change.
# Runtime Data are dynamically loaded libraries and any data specified
# via the data attribute
# input:
# - binary: path to executable binary
# - dep: dependency to binary
# - testonly: must be set if dep is a test
# - files: extra files you want to track
# generates a json file of the shape:
# { hash: sha256string, files: string[] }
# in "$root_out_dir/$target_name"

import("//brave/build/config.gni")
import("//testing/test.gni")


shard1 = [0]
shard10 = [0,1,2,3,4,5,6,7,8,9]
shard25 = [
    0,1,2,3,4,5,6,7,8,9,10,
    11,12,13,14,15,16,17,18,19,20,
    21,22,23,24
]
shard50 = [
    0,1,2,3,4,5,6,7,8,9,10,
    11,12,13,14,15,16,17,18,19,20,
    21,22,23,24,25,26,27,28,29,30,
    31,32,33,34,35,36,37,38,39,40,
    41,42,43,44,45,46,47,48,49
]
shard100 = [
    0,1,2,3,4,5,6,7,8,9,10,
    11,12,13,14,15,16,17,18,19,20,
    21,22,23,24,25,26,27,28,29,30,
    31,32,33,34,35,36,37,38,39,40,
    41,42,43,44,45,46,47,48,49,50,
    51,52,53,54,55,56,57,58,59,60,
    61,62,63,64,65,66,67,68,69,70,
    71,72,73,74,75,76,77,78,79,80,
    81,82,83,84,85,86,87,88,89,90,
    91,92,93,94,95,96,97,98,99
]

template("hash_runtime") {
  action(target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "testonly",
                           ])
    script = "//brave/test/actions/hash_runtime.py"
    depfile = "$root_out_dir/" + target_name + ".d"
    inputs = [ invoker.binary ]
    outputs = [ "$root_out_dir/" + target_name ]
    args = [ rebase_path(invoker.binary) ]

    if (defined(invoker.files)) {
      foreach(file, invoker.files) {
        inputs += [ file ]
        args += [ rebase_path(file) ]
      }
    }
  }
}

template("cached_test") {
  name = target_name

  if (defined(invoker.shards)) {
    shards = invoker.shards 
  } else {
    shards = 0
  }

  if (defined(invoker.filters)) {
    filters = invoker.filters
    filterArgs = ["--filters"] 
    foreach(filter, filters) {
        filterArgs += [rebase_path(filter)]
    }

  } else {
    filters = []
    filterArgs = []

  }



  test(name) {
    testonly = true
    forward_variables_from(invoker, "*", TESTONLY_AND_VISIBILITY)

    if (!defined(invoker.public_deps)) {
      public_deps = [
            "//base/test:run_all_unittests",
            "//base/test:test_support",
            "//testing/gmock",
            "//testing/gtest",
        ]
      }
    }

    hash_runtime(target_name + ".hash.json") {
      testonly = true
      deps = [ ":" + name]
      binary = "$root_out_dir/" + name
      files = filters
    }

    if (shards == 1) {
        range = shard1
    } else if (shards == 10) {
        range = shard10
    } else if (shards == 25) {
        range = shard25
    } else if (shards == 50) {
        range = shard50
    } else if (shards == 100) {
        range = shard100
    } else if (shards > 100) {
        range = shard100
        shard = 100
    } else {
         range = shard1
         shards = 1
    }

    foreach(i, range) {
        action(target_name + "-shard-"+i) {
            testonly = true
            script = "//brave/test/actions/test_runner.py"
            deps = [
                ":" + name + ".hash.json",
                ":" + name,
            ]

            inputs = [
                "$root_out_dir/" + name,
                "$root_out_dir/" + name + ".hash.json",
            ]

            if (defined(invoker.inputs)) {
                inputs += invoker.inputs
            }

            outputs = [
                "$target_gen_dir/" + name + "/"+i+"/result.xml",
                "$target_gen_dir/" + name + "/"+i+"/stdout.txt",
            ]

            args = [
                "--executable", rebase_path("$root_out_dir/" + name),
                "--outputDir", rebase_path("$target_gen_dir/" + name + "/"+i),
            ] + filterArgs


            if (shards > 0) {
                args += [
                    "--shards", "${shards}",
                    "--shardIndex", "${i}",
                ]
            }
        }
    }

    group(name + "-all-shards") {
        testonly=true
        deps = []
        foreach(i, range) {
            deps += [":"+name + "-shard-"+i]
        }
    }
}


# Test defaults.
set_defaults("cached_test") {
  if (is_android) {
    # Should be kept in sync with set_defaults("cronet_test") in
    # //components/cronet/android/cronet_test_templates.gni
    # LINT.IfChange
    configs = default_shared_library_configs
    configs -= [ "//build/config/android:hide_all_but_jni_onload" ]
    configs += [ "//build/config/android:hide_all_but_jni" ]

    # LINT.ThenChange(/components/cronet/android/cronet_test_templates.gni)
  } else {
    configs = default_executable_configs
  }
}
