// Copyright (c) 2019 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// You can obtain one at http://mozilla.org/MPL/2.0/.
module ads.mojom;

enum Environment {
  kStaging = 0,
  kProduction
};

struct SysInfo {
  bool is_uncertain_future;
};

struct BuildChannel {
  bool is_release;
  string name;
};

enum AdType {
  kUndefined = 0,
  kAdNotification,
  kNewTabPageAd,
  kPromotedContentAd,
  kInlineContentAd,
  kSearchResultAd
};

struct Conversion {
  string type;
  string url_pattern;
  string advertiser_public_key;
  int32 observation_window;
  double expire_at;
};

enum AdNotificationEventType {
  kServed = 0,
  kViewed,
  kClicked,
  kDismissed,
  kTimedOut
};

enum NewTabPageAdEventType {
  kServed = 0,
  kViewed,
  kClicked
};

enum PromotedContentAdEventType {
  kServed = 0,
  kViewed,
  kClicked
};

enum InlineContentAdEventType {
  kServed = 0,
  kViewed,
  kClicked
};

struct SearchResultAd {
  AdType type = kSearchResultAd;
  string placement_id;
  string creative_instance_id;
  string creative_set_id;
  string campaign_id;
  string advertiser_id;
  string target_url;
  string headline_text;
  string description;
  double value;
  Conversion conversion;
};

enum SearchResultAdEventType {
  kServed = 0,
  kViewed,
  kClicked
};

enum UrlRequestMethod {
  kGet = 0,
  kPut,
  kPost
};

enum P2AEventType {
  kListType = 0
};

struct UrlRequest {
  string url;
  array<string> headers;
  string content;
  string content_type;
  UrlRequestMethod method;
};

struct UrlResponse {
  string url;
  int32 status_code;
  string body;
  map<string, string> headers;
};

union DBValue {
  int32 int_value;
  int64 int64_value;
  double double_value;
  bool bool_value;
  string string_value;
  int8 null_value;
};

struct DBCommandBinding {
  int32 index;
  DBValue value;
};

struct DBCommand {
  enum Type {
    INITIALIZE,
    READ,
    RUN,
    EXECUTE,
    MIGRATE
  };

  enum RecordBindingType {
    STRING_TYPE,
    INT_TYPE,
    INT64_TYPE,
    DOUBLE_TYPE,
    BOOL_TYPE
  };

  Type type;
  string command;
  array<DBCommandBinding> bindings;
  array<RecordBindingType> record_bindings;
};

struct DBTransaction {
  int32 version;
  int32 compatible_version;
  array<DBCommand> commands;
};

struct DBRecord {
  array<DBValue> fields;
};

union DBCommandResult {
  array<DBRecord> records;
  DBValue value;
};

struct DBCommandResponse {
  enum Status {
    RESPONSE_OK,
    INITIALIZATION_ERROR,
    TRANSACTION_ERROR,
    COMMAND_ERROR,
    RESPONSE_ERROR
  };

  DBCommandResult? result;
  Status status;
};
