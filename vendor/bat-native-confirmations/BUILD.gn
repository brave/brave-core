# Copyright (c) 2019 The Brave Authors. All rights reserved.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

import("//brave/vendor/challenge_bypass_ristretto_ffi/config.gni")

if (is_android) {
  import("//build/config/android/rules.gni")
}

dep_base = rebase_path("../..", "//")

config("external_config") {
  visibility = [
    ":*",
  ]
  include_dirs = [ "include" ]
}

config("internal_config") {
  visibility = [
    ":*",
    "//brave/test:*",
  ]
  include_dirs = [ "src" ]
}

source_set("bat-native-confirmations") {
  public_configs = [ ":external_config" ]
  configs += [ ":internal_config" ]

  visibility = [
    ":*",
    rebase_path("bat-native-ledger", dep_base) + ":*",
    "//brave/test:*",
  ]

  sources = [
    "include/bat/confirmations/confirmations_client.h",
    "include/bat/confirmations/confirmations.h",
    "include/bat/confirmations/export.h",
    "include/bat/confirmations/issuer_info.h",
    "include/bat/confirmations/issuers_info.h",
    "include/bat/confirmations/notification_info.h",
    "include/bat/confirmations/wallet_info.h",
    "src/bat/confirmations/confirmations.cc",
    "src/bat/confirmations/issuer_info.cc",
    "src/bat/confirmations/issuers_info.cc",
    "src/bat/confirmations/notification_info.cc",
    "src/bat/confirmations/wallet_info.cc",
    "src/bat/confirmations/internal/ads_serve_helper.cc",
    "src/bat/confirmations/internal/ads_serve_helper.h",
    "src/bat/confirmations/internal/confirmations_impl.cc",
    "src/bat/confirmations/internal/confirmations_impl.h",
    "src/bat/confirmations/internal/create_confirmation_request.cc",
    "src/bat/confirmations/internal/create_confirmation_request.h",
    "src/bat/confirmations/internal/fetch_payment_token_request.cc",
    "src/bat/confirmations/internal/fetch_payment_token_request.h",
    "src/bat/confirmations/internal/get_signed_tokens_request.cc",
    "src/bat/confirmations/internal/get_signed_tokens_request.h",
    "src/bat/confirmations/internal/logging.h",
    "src/bat/confirmations/internal/payout_tokens.cc",
    "src/bat/confirmations/internal/payout_tokens.h",
    "src/bat/confirmations/internal/redeem_payment_tokens_request.cc",
    "src/bat/confirmations/internal/redeem_payment_tokens_request.h",
    "src/bat/confirmations/internal/redeem_token.cc",
    "src/bat/confirmations/internal/redeem_token.h",
    "src/bat/confirmations/internal/refill_tokens.cc",
    "src/bat/confirmations/internal/refill_tokens.h",
    "src/bat/confirmations/internal/request_signed_tokens_request.cc",
    "src/bat/confirmations/internal/request_signed_tokens_request.h",
    "src/bat/confirmations/internal/security_helper.cc",
    "src/bat/confirmations/internal/security_helper.h",
    "src/bat/confirmations/internal/string_helper.cc",
    "src/bat/confirmations/internal/string_helper.h",
    "src/bat/confirmations/internal/time.cc",
    "src/bat/confirmations/internal/time.h",
    "src/bat/confirmations/internal/token_info.cc",
    "src/bat/confirmations/internal/token_info.h",
    "src/bat/confirmations/internal/unblinded_tokens.cc",
    "src/bat/confirmations/internal/unblinded_tokens.h",
  ]

  public_deps = [
    ":challenge_bypass_libs",
  ]

  deps = [
    "//base",
    "//third_party/boringssl",
    "//third_party/re2",
    rebase_path("bat-native-ledger:headers", dep_base),
    rebase_path("bat-native-tweetnacl:tweetnacl", dep_base),
    rebase_path("challenge_bypass_ristretto_ffi", dep_base),
  ]
}

if (is_mac) {
  bundle_data("challenge_bypass_libs") {
    sources = [
      challenge_bypass_lib_path,
    ]
    outputs = [
      "{{bundle_contents_dir}}/Libraries/{{source_file_part}}",
    ]
    public_deps = [
      rebase_path("challenge_bypass_ristretto_ffi:challenge_bypass_ristretto", dep_base),
    ]
  }
} else {
  group("challenge_bypass_libs") {}
}
