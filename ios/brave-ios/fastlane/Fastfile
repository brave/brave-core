# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

fastlane_version "2.86.0"

default_platform :ios

platform :ios do
  before_all do |lane, options|
    sh("pushd .. && ./scripts/bootstrap.sh --ci && popd")
  end

  desc "Run Unit Tests"
  lane :test do |options|
    run_tests(
      project: "App/Client.xcodeproj",
      scheme: "Debug",
      devices: ["iPhone 15"],
      code_coverage: true,
      output_style: 'raw',
      ensure_devices_found: true,
      skip_testing: [
	"CertificateUtilitiesTests/CertificatePinningTest/testSelfSignedRootAllowed",
        "CertificateUtilitiesTests/CertificatePinningTest/testSelfSignedRootAllowed2",
        "ClientTests/TabManagerTests/testQueryAddedTabs",
        "ClientTests/TabManagerTests/testQueryAddedPrivateTabs",
        "ClientTests/TabManagerTests/testQueryAddedMixedTabs",
        "ClientTests/TestFavicons",
        "ClientTests/FingerprintProtectionTest/testFingerprintProtection",
        "ClientTests/TabSessionTests",
        "ClientTests/ContentBlockerTests",
        "ClientTests/HttpCookieExtensionTest/testSaveAndLoadCookie",
        "ClientTests/UserAgentTests",
        "ClientTests/CachedAdBlockEngineTests/testPerformance",
        "ClientTests/ScriptExecutionTests/testSiteStateListenerScript",
        "ClientTests/FarblingProtectionHelperTests/testGivenTheSameRandomManagerThenSameFakePluginData",
        "ClientTests/ContentBlockerManagerTests/testContentBlockerManager",
        "DataTests",
        "BraveWalletTests/ManageSiteConnectionsStoreTests/testRemoveAllPermissions",
        "BraveWalletTests/ManageSiteConnectionsStoreTests/testRemovePermissions",
        "BraveWalletTests/ManageSiteConnectionsStoreTests/testRemovePermissionsLastPermission",
        "BraveWalletTests/SendTokenStoreTests/testResolvedAddressUsedInSolTxIfAvailable",
        "BraveWalletTests/SendTokenStoreTests/testResolvedAddressUsedInEthTxIfAvailable",
        "BraveWalletTests/SendTokenStoreTests/testUDAddressResolutionEthNetwork",
        "BraveWalletTests/SendTokenStoreTests/testUDAddressResolutionSolNetwork",
        "BraveWalletTests/SendTokenStoreTests/testUDAddressResolutionFailure",
        "BraveWalletTests/SendTokenStoreTests/testUDAddressResolutionTokenChange",
        "BraveWalletTests/TransactionConfirmationStoreTests/testPrepareERC20Approve",
        "BraveWalletTests/TransactionConfirmationStoreTests/testPrepareTransactionNotOnSelectedNetwork",
        "BraveWalletTests/AccountActivityStoreTests/testUpdateEthereumAccount",
        "BraveSharedTests/NSURLExtensionsTests/testBugzillaURLDomain",
      ]
    )

    run_tests(
      project: "App/Client.xcodeproj",
      scheme: "Debug",
      devices: ["iPad (10th generation)"],
      code_coverage: true,
      output_style: 'raw',
      ensure_devices_found: true,
      skip_testing: [
        "ClientTests/UserAgentTests"
      ],
      xcargs: "-testPlan Brave_iPad"
    )
  end

  desc "Creates a Brave Beta build for TestFlight."
  lane :beta do |options|
    gymOverrides = {
      scheme: "Beta",
      export_method: "app-store",
      export_options: {
        manageAppVersionAndBuildNumber: false
      }
    }
    pilotOverrides = {
      groups: ["Public Beta"]
    }
    testflight_build({gymOverrides: gymOverrides, pilotOverrides: pilotOverrides, skip_upload: options[:skip_upload]})
  end

  desc "Creates a Brave Nightly build for TestFlight."
  lane :nightly do |options|
    gymOverrides = {
      scheme: "Nightly",
      export_method: "app-store",
      export_options: {
        manageAppVersionAndBuildNumber: false
      }
    }
    testflight_build({gymOverrides: gymOverrides, pilotOverrides: {}, skip_upload: options[:skip_upload]})
  end

  desc "Create an archive to be uploaded to the App Store"
  lane :release do |options|
    ENV["BRAVE_APPSTORE_BUILD"] = "1"
    gymOverrides = {
      scheme: "Release (AppStore)",
      export_options: {
        method: "app-store",
        provisioningProfiles: {
          "com.brave.ios.browser" => "Brave iOS",
          "com.brave.ios.browser.ShareExtension" => "Brave iOS Share Extension",
          "com.brave.ios.browser.BrowserIntents" => "Brave iOS Intents Extension",
          "com.brave.ios.browser.BraveWidgetsExtension" => "Brave iOS Widgets Extension",
          "com.brave.ios.browser.BraveWireGuard" => "Brave iOS WireGuard Extension",
        },
        manageAppVersionAndBuildNumber: false
      },
    }
    testflight_build({gymOverrides: gymOverrides, pilotOverrides: {}, skip_upload: options[:skip_upload]})
  end

  desc "All Testflight releases use this as the foundation. Pass in `gym` override params."
  private_lane :testflight_build do |options|
    defaultParams = gym_params()
    gym(defaultParams.merge!(options[:gymOverrides]))
    unless options[:skip_upload]
      api_key = app_store_connect_api_key()
      pilotParams = {
        api_key: api_key,
        changelog: "Bug fixes & improvements",
        distribute_external: true,
        skip_waiting_for_build_processing: false,
        groups: ["Brave Internal"],
      }
      pilot(pilotParams.merge!(options[:pilotOverrides]))
    end
  end

  # Private helper methods ---------------------------------------

  desc "Returns the parameters that should be used in any fastlane build"
  lane :gym_params do
    {
      project: "App/Client.xcodeproj",
      sdk: "iphoneos",
      clean: true,
      output_directory: "build",
      # xcpretty doesnt output script executions
      # https://github.com/xcpretty/xcpretty/issues/163
      xcodebuild_formatter: '',
      xcargs: "-allowProvisioningUpdates"
    }
  end

end
