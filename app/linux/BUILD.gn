import("//brave/build/config.gni")

if (should_generate_breakpad_symbols) {
  action("generate_breakpad_symbols") {
    # host_toolchain must be used for cross-compilation case.
    # See chrome/updater/mac:syms
    dump_syms = "//third_party/breakpad:dump_syms($host_toolchain)"
    symbols_dir = "$brave_dist_dir/$brave_product_name.breakpad.syms"
    outputs = [ symbols_dir ]

    start = [ brave_product_name ]

    script = "//brave/tools/posix/generate_breakpad_symbols.py"
    args = [
      "--symbols-dir=" + rebase_path(symbols_dir),
      "--jobs=16",
      "--build-dir=" + rebase_path(root_out_dir),
      "--binary=$start",
      "--libchromiumcontent-dir=" + rebase_path("//"),
      "--dump-syms-bin=" +
          rebase_path(get_label_info(dump_syms, "root_out_dir") + "/" +
                      get_label_info(dump_syms, "name")),
      "--clear",
    ]

    deps = [
      "//chrome",  # To be sure brave executable is ready now
      dump_syms,
    ]
  }
} else {
  group("generate_breakpad_symbols") {
  }
}

group("symbol_dist_resources") {
  public_deps = [
    ":generate_breakpad_symbols",
    ":strip_and_dump_symbols",
  ]
}

group("dist_resources") {
}

if (current_cpu == "arm64") {
  # Copy the binary for stripping Arm64 binaries as `strip` into a directory
  # that we can put on the PATH.
  copy("strip_arm64") {
    sources = [ "/usr/bin/aarch64-linux-gnu-strip" ]
    outputs = [ "$root_out_dir/strip" ]
  }
}

action("strip_and_dump_symbols") {
  script = "//build/linux/dump_app_syms.py"

  dump_syms_label = "//third_party/breakpad:dump_syms($host_toolchain)"
  dump_syms_binary =
      get_label_info(dump_syms_label, "root_out_dir") + "/" + "dump_syms"

  deps = [
    # TODO(bridiver) - resolve duplicate symbol generation
    ":generate_breakpad_symbols",
    "//brave:brave_dist_resources",
    dump_syms_label,
  ]
  brave_binary = "$brave_dist_dir/brave"
  if (current_cpu == "x86") {
    # Use "ia32" instead of "x86" for GYP compat.
    brave_symbol_file = "$root_out_dir/brave.breakpad.ia32"
  } else {
    brave_symbol_file = "$root_out_dir/brave.breakpad.$current_cpu"
  }

  inputs = [
    brave_binary,
    dump_syms_binary,
  ]
  outputs = [ brave_symbol_file ]

  # If we are on Arm64, rewrite the script and args so we have a `strip` binary
  # on the PATH that supports Arm64 binaries:
  if (current_cpu == "arm64") {
    strip_arm64 = "//brave/app/linux:strip_arm64"
    deps += [strip_arm64]

    strip_dir = get_label_info(strip_arm64, "root_out_dir")
    strip_path = rebase_path(strip_dir, root_build_dir)
    old_script_path = rebase_path(script, root_build_dir)

    script = "//brave/app/linux/prepend_to_path.py"
    args = [ strip_path , old_script_path ]
  } else {
    args = []
  }

  # Here come the usual args for dump_app_syms.py:
  args += [
    "./" + rebase_path(dump_syms_binary, root_build_dir),
    "1",  # strip_binary = true
    rebase_path(brave_binary, root_build_dir),
    rebase_path(brave_symbol_file, root_build_dir),
  ]
}
