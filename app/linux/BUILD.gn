import("//brave/build/config.gni")

action("generate_breakpad_symbols") {
  symbols_dir = "$brave_dist_dir/$brave_project_name.breakpad.syms"
  outputs = [
    symbols_dir
  ]

  start = [ brave_project_name ]

  script = "//brave/tools/posix/generate_breakpad_symbols.py"
  args = [
    "--symbols-dir=" + rebase_path(symbols_dir),
    "--jobs=16",
    "--build-dir=" + rebase_path(root_out_dir),
    "--binary=$start",
    "--libchromiumcontent-dir=" + rebase_path("//"),
    "--clear",
  ]

  deps = [
    "//chrome", # To be sure brave executable is ready now
    "//third_party/breakpad:dump_syms",
  ]
}

group("symbol_dist_resources") {
  public_deps = [
    ":generate_breakpad_symbols",
    ":strip_and_dump_symbols",
  ]
}

group("dist_resources") {}

action("strip_and_dump_symbols") {
  script = "//build/linux/dump_app_syms.py"

  dump_syms_label = "//third_party/breakpad:dump_syms($host_toolchain)"
  dump_syms_binary =
          get_label_info(dump_syms_label, "root_out_dir") + "/" + "dump_syms"

  deps = [
    "//brave:brave_dist_resources",
    # TODO(bridiver) - resolve duplicate symbol generation
    ":generate_breakpad_symbols",
    dump_syms_label,
  ]
  brave_binary = "$brave_dist_dir/brave"
  if (current_cpu == "x86") {
  # Use "ia32" instead of "x86" for GYP compat.
    brave_symbol_file = "$root_out_dir/brave.breakpad.ia32"
  } else {
    brave_symbol_file = "$root_out_dir/brave.breakpad.$current_cpu"
  }

  inputs = [ brave_binary, dump_syms_binary ]
  outputs = [ brave_symbol_file ]

  args = [
    "./" + rebase_path(dump_syms_binary, root_build_dir),
    "1",  # strip_binary = true
    rebase_path(brave_binary, root_build_dir),
    rebase_path(brave_symbol_file, root_build_dir),
  ]
}
