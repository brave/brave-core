import("//brave/build/cargo.gni")
import("//brave/build/config.gni")
import("//brave/components/brave_vpn/buildflags/buildflags.gni")
import("//build/config/locales.gni")
import("//build/config/zip.gni")
import("//build/util/process_version.gni")
import("//extensions/buildflags/buildflags.gni")
import("//media/cdm/library_cdm/cdm_paths.gni")
import("//third_party/icu/config.gni")
import("//tools/grit/repack.gni")
import("//tools/v8_context_snapshot/v8_context_snapshot.gni")
import("//ui/base/ui_features.gni")

if (!is_ios) {
  import("//brave/brave_paks.gni")
}

if (is_mac) {
  import("//brave/build/mac/tweak_info_plist.gni")
  import("//build/config/mac/rules.gni")
}

if (is_linux) {
  import("//brave/build/linux/channels.gni")
}

declare_args() {
  audit_dev_deps = true
}

if (!is_ios) {
  group("child_dependencies") {
    deps = [
      "common",
      "//brave/renderer",
      "//brave/utility",
    ]
  }

  group("browser_dependencies") {
    deps = [
      "browser",
      "chromium_src:browser",
      "chromium_src/chrome/app",
      "common",
      "//components/omnibox/common",
      "//services/device/public/cpp:device_features",
    ]

    data_deps = [ ":unpacked_resources" ]

    if (!is_ios) {
      deps += [ ":packed_resources" ]
    }
  }
}

if (is_win) {
  # create_installer_archive.py assumes that last_chrome_installer folder has
  # courgette.exe. The original courgette.exe runs out of memory on Brave's
  # binaries. As of January 2022, this seems to be a known issue and was
  # confirmed by Chromium developers. The recommended workaround is to use
  # another tool, Zucchini, as a drop-in replacement.
  if (build_delta_installer) {
    copy("copy_zucchini_binary_as_courgette") {
      zucchini_toolchain = ""
      if (target_cpu == "x86") {
        # 32 bit Zucchini runs into memory allocation errors when virtual memory
        # utilization is high. Using the 64 bit version fixes this.
        zucchini_toolchain = "(//build/toolchain/win:win_clang_x64)"
      }
      zucchini_dep = "//components/zucchini:zucchini" + zucchini_toolchain

      visibility = [ ":mini_installer_dependencies" ]
      deps = [ zucchini_dep ]
      sources =
          [ get_label_info(zucchini_dep, "root_out_dir") + "/zucchini.exe" ]
      outputs = [ "$root_out_dir/$last_chrome_installer/courgette.exe" ]
    }
  }

  group("mini_installer_dependencies") {
    deps = [ ":brave" ]

    if (build_delta_installer) {
      deps += [ ":copy_zucchini_binary_as_courgette" ]
    }
  }
}

group("brave") {
  deps = [ "build/$target_os:brave" ]
  if (!is_android && !is_ios) {
    deps += [
      ":generate_version",
      "//chrome",
    ]
  }
}

group("resources") {
  public_deps = [
    # TODO(bridiver)
    # "//brave/browser:resources",
    # "//brave/common:resources",
    # "//brave/renderer:resources",
    "//brave/components/resources",
  ]

  data_deps = [ "//brave/components/resources:about_credits" ]
}

if (is_android) {
  android_assets("brave_pak_assets") {
    sources = [
      "$root_build_dir/brave_100_percent.pak",
      "$root_build_dir/brave_resources.pak",
      "//brave/LICENSE.html",
      "//brave/android/java/org/chromium/chrome/browser/ntp/ntp_news_optin_icon_animation.json",
      "//brave/android/java/org/chromium/chrome/browser/onboarding/animations/onboarding_ads.json",
      "//brave/android/java/org/chromium/chrome/browser/onboarding/animations/onboarding_ads_notification.json",
      "//brave/android/java/org/chromium/chrome/browser/onboarding/animations/onboarding_rewards.json",
      "//brave/android/java/org/chromium/chrome/browser/onboarding/animations/privacy_protection.json",
      "//brave/android/java/org/chromium/chrome/browser/onboarding/animations/save_data_and_battery.json",
      "//brave/android/java/org/chromium/chrome/browser/onboarding/animations/website_loads_faster.json",
      "//brave/android/java/org/chromium/chrome/browser/shields/disconnect_entitylist.json",
      "//brave/android/java/org/chromium/chrome/browser/vpn/brave_vpn_confirm.json",
    ]
    deps = [ "//brave:browser_dependencies" ]
    disable_compression = true
  }
}

if (is_mac) {
  group("framework_bundle_data") {
    deps = [
      "components/brave_extension/extension/brave_extension:brave_extension_framework_bundle_data",
      "components/brave_rewards/resources/extension:framework_bundle_data",
    ]
  }
}

group("unpacked_resources") {
  if (!is_mac) {
    deps = []
    if (enable_extensions) {
      deps = [
        "//brave/components/brave_extension/extension/brave_extension:locales",
        "//brave/components/brave_rewards/resources/extension:locales",
      ]
    }
  }
}

#TODO(bridiver) - what to do
if (!is_ios) {
  group("brave_tests") {
    testonly = true

    deps = [ "test:brave_unit_tests" ]

    if (!is_android) {
      deps += [
        "test:brave_browser_tests",
        "test:brave_network_audit_tests",
      ]
    }
  }
}

if (!is_ios) {
  brave_paks("packed_resources") {
    if (is_mac) {
      output_dir = "$root_gen_dir/repack"
      copy_data_to_bundle = true
    } else {
      output_dir = root_out_dir
    }
  }
}

branding_dir = "//chrome/app/theme/$branding_path_component"
copy("theme_files") {
  visibility = [ ":*" ]
  if (is_linux) {
    sources = [
      "$branding_dir/linux/product_logo_128_beta.png",
      "$branding_dir/linux/product_logo_128_dev.png",
      "$branding_dir/linux/product_logo_128_development.png",
      "$branding_dir/linux/product_logo_128_nightly.png",
    ]
  } else {
    sources = [
      "$branding_dir/product_logo_128_beta.png",
      "$branding_dir/product_logo_128_dev.png",
      "$branding_dir/product_logo_128_development.png",
      "$branding_dir/product_logo_128_nightly.png",
    ]
  }
  outputs = [ "$root_out_dir/installer/theme/{{source_file_part}}" ]
}

group("create_dist") {
  deps = []
  if (is_android) {
    deps += [ "build/android:sign_app" ]
  } else {
    deps += [ ":create_symbols_dist" ]
  }

  # for linux zip will be created along with installer
  if (!is_linux) {
    deps += [ ":create_dist_zips" ]
  }

  if (is_win) {
    deps += [ "build/win:create_signed_installer" ]

    if (build_omaha) {
      deps += [ "//brave/vendor/omaha" ]
    }
  }
  if (is_mac) {
    if (skip_signing) {
      deps += [ "build/mac:create_dmg" ]
    } else {
      deps += [ "build/mac:finalize_dmg_pkg" ]
    }
  }
  if (is_linux) {
    deps += [
      ":theme_files",
      "//brave/app/linux:dist_resources",
      "//chrome/installer/linux:$linux_channel",
    ]
  }
}

if (!is_mac && !is_android && !is_ios) {
  copy("brave_locale_dist_resources") {
    deps = [ "//chrome:packed_resources" ]

    sources = []
    foreach(locale, platform_pak_locales) {
      sources += [ "$root_out_dir/locales/$locale.pak" ]
    }
    outputs = [ "$brave_dist_dir/locales/{{source_file_part}}" ]
  }

  if (enable_extensions) {
    group("brave_extensions_locale_dist_resources") {
      deps = [
        "//brave/components/brave_extension/extension/brave_extension:locales",
        "//brave/components/brave_rewards/resources/extension:locales",
      ]

      public_deps = []
      foreach(locale, platform_pak_locales) {
        # public_deps is used intentionaly because ":create_dist_zip" needs the all dependency
        # of all locale files.
        public_deps += [
          ":brave_rewards_locales_${locale}",
          ":brave_shields_locales_${locale}",
        ]
      }
    }

    foreach(locale, platform_pak_locales) {
      copy("brave_rewards_locales_${locale}") {
        deps = [ "//brave/components/brave_rewards/resources/extension:locales_$locale" ]

        locale = string_replace(locale, "-", "_")
        sources = [ "$root_out_dir/resources/brave_rewards/_locales/$locale/messages.json" ]
        outputs = [ "$brave_dist_dir/resources/brave_rewards/_locales/$locale/{{source_file_part}}" ]
      }
      copy("brave_shields_locales_${locale}") {
        deps = [ "//brave/components/brave_extension/extension/brave_extension:locales_$locale" ]

        locale = string_replace(locale, "-", "_")
        sources = [ "$root_out_dir/resources/brave_extension/_locales/$locale/messages.json" ]
        outputs = [ "$brave_dist_dir/resources/brave_extension/_locales/$locale/{{source_file_part}}" ]
      }
    }
  }
}

copy("brave_license_dist_resources") {
  sources = [ "//brave/LICENSE" ]

  outputs = [ "$brave_dist_dir/{{source_file_part}}" ]
}

process_version("generate_version") {
  template_file = "version.version"
  extra_args = [
    "-e",
    "BRAVE_BROWSER_VERSION=\"$brave_version\"",
  ]
  output = "$root_out_dir/version"
  process_only = true
}

if (!is_android && !is_ios) {
  copy("brave_dist_resources") {
    sources = [ "$root_out_dir/version" ]

    deps = [
      ":brave",
      ":brave_license_dist_resources",
      ":generate_version",
      ":packed_resources",
      "build/$target_os:brave",
      "//chrome:packed_resources",
      "//third_party/icu:icudata",
    ]

    if (!is_mac) {
      sources += [
        "$root_out_dir/$brave_exe",
        "$root_out_dir/brave_100_percent.pak",
        "$root_out_dir/brave_200_percent.pak",
        "$root_out_dir/brave_resources.pak",
        "$root_out_dir/chrome_100_percent.pak",
        "$root_out_dir/chrome_200_percent.pak",
        "$root_out_dir/icudtl.dat",
        "$root_out_dir/resources.pak",
      ]

      if (v8_use_external_startup_data) {
        deps += [ "//v8" ]

        if (use_v8_context_snapshot) {
          sources += [ "$root_out_dir/v8_context_snapshot.bin" ]
          deps += [ "//tools/v8_context_snapshot" ]
        } else {
          sources += [ "$root_out_dir/snapshot_blob.bin" ]
        }
      }
    }

    outputs = [ "$brave_dist_dir/{{source_file_part}}" ]
  }
}

if (target_cpu == "x86") {
  target_arch = "ia32"
} else {
  target_arch = target_cpu
}

template("create_dist_template") {
  action(target_name) {
    inputs = get_target_outputs(":brave_license_dist_resources")

    file_inputs = []
    foreach(input, inputs) {
      file_inputs += [ rebase_path(input, brave_dist_dir) ]
    }

    rebase_base_dir = rebase_path(brave_dist_dir)

    outputs = [ invoker.output ]
    rebase_output = rebase_path(invoker.output)

    dir_inputs = invoker.dir_inputs

    script = "//brave/script/create-dist.py"

    deps = [ ":brave_license_dist_resources" ]
    if (defined(invoker.deps)) {
      deps += invoker.deps
    }

    args = [
      "--base-dir=$rebase_base_dir",
      "--inputs=$file_inputs",
      "--dir-inputs=$dir_inputs",
      "--output=$rebase_output",
    ]
  }
}

create_dist_template("create_native_symbols_dist") {
  output = "$brave_dist_dir/$brave_product_name-v$brave_version-$brave_platform-$target_arch-native-symbols.zip"
  dir_inputs = [ "$brave_product_name.pdb.syms" ]
  deps = [ "app/$current_os:symbol_dist_resources" ]
}

create_dist_template("create_symbols_dist") {
  if (is_android) {
    output = "$brave_dist_dir/$brave_product_name-v$brave_version-$brave_platform-$target_android_base-$target_cpu-symbols-$target_android_output_format.zip"
  } else {
    output = "$brave_dist_dir/$brave_product_name-v$brave_version-$brave_platform-$target_arch-symbols.zip"
  }

  deps = [ "app/$current_os:symbol_dist_resources" ]
  if (brave_debug_symbol_level == 2 && is_win) {
    deps += [ ":create_native_symbols_dist" ]
  }

  dir_inputs = [ "$brave_product_name.breakpad.syms" ]
}

action("create_dist_zips") {
  output = "$brave_dist_dir/$brave_product_name-v$brave_version-$brave_platform-$target_arch.zip"
  outputs = [ output ]

  if (is_win) {
    # Repack a Chrome release archive to the Brave format.
    # Besides changing from 7z to zip, the directory structure is a bit different.
    # TODO(atuchin): support other platforms.

    script = "//brave/script/repack-archive.py"
    deps = [ "//chrome/installer/mini_installer:mini_installer_archive" ]

    input = "$root_out_dir/chrome.7z"
    inputs = [ input ]

    args = [
      "--input=" + rebase_path(input),
      "--output=" + rebase_path(output),
      "--target_dir=Chrome-bin",
    ]
  } else {  # !is_win
    script = "//brave/script/create-dist.py"

    inputs = get_target_outputs(":brave_license_dist_resources")

    if (!is_mac && !is_android && !is_ios) {
      inputs += get_target_outputs(":brave_dist_resources")
      inputs += get_target_outputs(":brave_locale_dist_resources")
      if (enable_extensions) {
        foreach(locale, platform_pak_locales) {
          inputs += get_target_outputs(":brave_shields_locales_${locale}")
          inputs += get_target_outputs(":brave_rewards_locales_${locale}")
        }
      }
    }

    file_inputs = []
    foreach(input, inputs) {
      file_inputs += [ rebase_path(input, brave_dist_dir) ]
    }

    dir_inputs = []
    if (is_mac) {
      dir_inputs += [ "$brave_exe" ]
    }

    deps = [
      ":brave_license_dist_resources",
      "app/$current_os:dist_resources",
    ]

    if (!is_mac && !is_android && !is_ios) {
      deps += [
        ":brave_dist_resources",
        ":brave_locale_dist_resources",
      ]

      if (enable_extensions) {
        deps += [ ":brave_extensions_locale_dist_resources" ]
      }
    }

    rebase_output = rebase_path(output)
    if (is_mac) {
      rebase_base_dir = rebase_path(root_out_dir)
    } else {
      rebase_base_dir = rebase_path(brave_dist_dir, root_out_dir)
    }
    args = [
      "--base-dir=$rebase_base_dir",
      "--inputs=$file_inputs",
      "--dir-inputs=$dir_inputs",
      "--output=$rebase_output",
    ]
  }  # !is_win
}

if (is_mac) {
  group("brave_app") {
    deps = [ ":brave_app_plist" ]
  }

  brave_tweak_info_plist("brave_app_plist") {
    info_plist = "$root_gen_dir/chrome/chrome_app_plist_tweaked.plist"

    args = [
      "--brave_channel=" + brave_channel,
      "--brave_product_dir_name=" + brave_product_dir_name,
      "--brave_version=" + brave_version,
      "--brave_eddsa_key=" + sparkle_eddsa_public_key,
    ]

    if (skip_signing) {
      args += [ "--skip_signing" ]
    }

    deps = [ "//chrome:chrome_app_plist" ]
  }

  brave_tweak_info_plist("brave_helper_plist") {
    info_plist = "$root_gen_dir/chrome/chrome_helper_plist_tweaked.plist"

    args = [
      "--brave_channel=" + brave_channel,
      "--brave_product_dir_name=" + brave_product_dir_name,
      "--brave_version=" + brave_version,
    ]

    deps = [ "//chrome:chrome_helper_plist" ]
  }
}

action("audit_deps") {
  script = "//brave/script/audit_deps.py"

  outputs = [ "$root_gen_dir/non-existent-audit_deps" ]

  args = [
    "--source_root=" + rebase_path("//brave"),
    "--rustup_path=" + rustup_path,
    "--cargo_path=" + rustup_path,
  ]

  if (defined(rustc_toolchain)) {
    args += [ "--toolchain=$rustc_toolchain" ]
  }
  if (audit_dev_deps) {
    args += [ "--audit_dev_deps" ]
  }
}

group("tools") {
  if (enable_brave_vpn) {
    deps = [ "//brave/components/brave_vpn:vpntool" ]
  }
}

group("storybook") {
  deps = [ "//brave/.storybook:storybook" ]
}

if (is_redirect_cc_build) {
  group("redirect_cc") {
    deps = [ "//brave/tools/redirect_cc" ]
  }
}
