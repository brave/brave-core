diff --git a/ios/web/webui/mojo_facade.h b/ios/web/webui/mojo_facade.h
index d563599628d61c32474407a0a58664f96b5f4d87..e2fb5cf157ceb7f4419b8d04c56d2471db7d1858 100644
--- a/ios/web/webui/mojo_facade.h
+++ b/ios/web/webui/mojo_facade.h
@@ -12,6 +12,7 @@
 
 #include "base/functional/callback.h"
 #import "base/memory/raw_ptr.h"
+#include "base/memory/weak_ptr.h"
 #include "base/values.h"
 #include "mojo/public/cpp/system/message_pipe.h"
 #include "mojo/public/cpp/system/simple_watcher.h"
@@ -114,6 +115,16 @@ class MojoFacade {
   // returns that ID. The ID can be used by JS to reference this pipe.
   int AllocatePipeId(mojo::ScopedMessagePipeHandle pipe);
 
+  // SimpleWatcher callback which notifies us when a handle's watched signals
+  // are raised. `callback_id` identifies the JS-side callback registered for
+  // this watcher, and `watch_id` identifies the JS-side MojoWatcher responsible
+  // for the event. This ultimately invokes the JS-side callback and then
+  // re-arms the watcher once the JS has run.
+  void OnWatcherCallback(int callback_id, int watch_id, MojoResult result);
+
+  // Calls ArmOrNotify() for matching watcher.
+  void ArmOnNotifyWatcher(int watch_id);
+
   // Returns the pipe handle associated with `id` in JS, or an invalid handle if
   // no such association exists.
   mojo::MessagePipeHandle GetPipeFromId(int id);
@@ -138,6 +149,8 @@ class MojoFacade {
 
   // Currently active watches created through this facade.
   std::map<int, std::unique_ptr<mojo::SimpleWatcher>> watchers_;
+
+  base::WeakPtrFactory<MojoFacade> weak_ptr_factory_{this};
 };
 
 }  // web
