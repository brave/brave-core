diff --git a/build/rust/std/rules/BUILD.gn b/build/rust/std/rules/BUILD.gn
index e26b92dea07f2ee5f2c7db7743534f1f29d05320..7e094ba68587b64d71137a503d87b096048df4b7 100644
--- a/build/rust/std/rules/BUILD.gn
+++ b/build/rust/std/rules/BUILD.gn
@@ -6,12 +6,12 @@ import("//build/rust/cargo_crate.gni")
 
 cargo_crate("addr2line") {
   crate_type = "rlib"
-  crate_root = "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/addr2line-0.19.0/src/lib.rs"
+  crate_root = "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/addr2line-0.19.0/src/lib.rs"
   no_std = true
 
   # Unit tests skipped. Generate with --with-tests to include them.
   build_native_rust_unit_tests = false
-  sources = [ "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/addr2line-0.19.0/src/lib.rs" ]
+  sources = [ "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/addr2line-0.19.0/src/lib.rs" ]
   edition = "2015"
   cargo_pkg_version = "0.19.0"
   cargo_pkg_name = "addr2line"
@@ -45,12 +45,12 @@ cargo_crate("addr2line") {
 }
 cargo_crate("adler") {
   crate_type = "rlib"
-  crate_root = "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/adler-1.0.2/src/lib.rs"
+  crate_root = "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/adler-1.0.2/src/lib.rs"
   no_std = true
 
   # Unit tests skipped. Generate with --with-tests to include them.
   build_native_rust_unit_tests = false
-  sources = [ "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/adler-1.0.2/src/lib.rs" ]
+  sources = [ "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/adler-1.0.2/src/lib.rs" ]
   edition = "2015"
   cargo_pkg_version = "1.0.2"
   cargo_pkg_authors = "Jonas Schievink <jonasschievink@gmail.com>"
@@ -107,12 +107,12 @@ cargo_crate("alloc") {
 }
 cargo_crate("cfg_if") {
   crate_type = "rlib"
-  crate_root = "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/cfg-if-1.0.0/src/lib.rs"
+  crate_root = "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/cfg-if-1.0.0/src/lib.rs"
   no_std = true
 
   # Unit tests skipped. Generate with --with-tests to include them.
   build_native_rust_unit_tests = false
-  sources = [ "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/cfg-if-1.0.0/src/lib.rs" ]
+  sources = [ "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/cfg-if-1.0.0/src/lib.rs" ]
   edition = "2018"
   cargo_pkg_version = "1.0.0"
   cargo_pkg_authors = "Alex Crichton <alex@alexcrichton.com>"
@@ -142,14 +142,14 @@ cargo_crate("cfg_if") {
 }
 cargo_crate("compiler_builtins") {
   crate_type = "rlib"
-  crate_root = "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/compiler_builtins-0.1.91/src/lib.rs"
+  crate_root = "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/compiler_builtins-0.1.92/src/lib.rs"
   no_std = true
 
   # Unit tests skipped. Generate with --with-tests to include them.
   build_native_rust_unit_tests = false
-  sources = [ "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/compiler_builtins-0.1.91/src/lib.rs" ]
+  sources = [ "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/compiler_builtins-0.1.92/src/lib.rs" ]
   edition = "2015"
-  cargo_pkg_version = "0.1.91"
+  cargo_pkg_version = "0.1.92"
   cargo_pkg_authors = "Jorge Aparicio <japaricious@gmail.com>"
   cargo_pkg_name = "compiler_builtins"
   cargo_pkg_description = "Compiler intrinsics used by the Rust compiler. Also available for other targets if necessary!"
@@ -171,7 +171,10 @@ cargo_crate("compiler_builtins") {
     "compiler-builtins",
     "core",
     "rustc-dep-of-std",
+    "weak-intrinsics",
   ]
+  build_root = "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/compiler_builtins-0.1.92/build.rs"
+  build_sources = [ "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/compiler_builtins-0.1.92/build.rs" ]
   rustflags = [ "-Zforce-unstable-if-unmarked" ]
   output_dir =
       "$root_out_dir/local_rustc_sysroot/lib/rustlib/$rust_abi_target/lib/"
@@ -207,12 +210,12 @@ cargo_crate("core") {
 }
 cargo_crate("getopts") {
   crate_type = "rlib"
-  crate_root = "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/getopts-0.2.21/src/lib.rs"
+  crate_root = "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/getopts-0.2.21/src/lib.rs"
   no_std = true
 
   # Unit tests skipped. Generate with --with-tests to include them.
   build_native_rust_unit_tests = false
-  sources = [ "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/getopts-0.2.21/src/lib.rs" ]
+  sources = [ "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/getopts-0.2.21/src/lib.rs" ]
   edition = "2015"
   cargo_pkg_version = "0.2.21"
   cargo_pkg_authors = "The Rust Project Developers"
@@ -244,12 +247,12 @@ cargo_crate("getopts") {
 }
 cargo_crate("gimli") {
   crate_type = "rlib"
-  crate_root = "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/gimli-0.27.2/src/lib.rs"
+  crate_root = "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/gimli-0.27.2/src/lib.rs"
   no_std = true
 
   # Unit tests skipped. Generate with --with-tests to include them.
   build_native_rust_unit_tests = false
-  sources = [ "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/gimli-0.27.2/src/lib.rs" ]
+  sources = [ "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/gimli-0.27.2/src/lib.rs" ]
   edition = "2018"
   cargo_pkg_version = "0.27.2"
   cargo_pkg_name = "gimli"
@@ -284,12 +287,12 @@ cargo_crate("gimli") {
 }
 cargo_crate("hashbrown") {
   crate_type = "rlib"
-  crate_root = "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/hashbrown-0.13.2/src/lib.rs"
+  crate_root = "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/hashbrown-0.13.2/src/lib.rs"
   no_std = true
 
   # Unit tests skipped. Generate with --with-tests to include them.
   build_native_rust_unit_tests = false
-  sources = [ "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/hashbrown-0.13.2/src/lib.rs" ]
+  sources = [ "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/hashbrown-0.13.2/src/lib.rs" ]
   edition = "2021"
   cargo_pkg_version = "0.13.2"
   cargo_pkg_authors = "Amanieu d'Antras <amanieu@gmail.com>"
@@ -324,14 +327,14 @@ cargo_crate("hashbrown") {
 }
 cargo_crate("libc") {
   crate_type = "rlib"
-  crate_root = "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/libc-0.2.143/src/lib.rs"
+  crate_root = "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/libc-0.2.144/src/lib.rs"
   no_std = true
 
   # Unit tests skipped. Generate with --with-tests to include them.
   build_native_rust_unit_tests = false
-  sources = [ "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/libc-0.2.143/src/lib.rs" ]
+  sources = [ "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/libc-0.2.144/src/lib.rs" ]
   edition = "2015"
-  cargo_pkg_version = "0.2.143"
+  cargo_pkg_version = "0.2.144"
   cargo_pkg_authors = "The Rust Project Developers"
   cargo_pkg_name = "libc"
   cargo_pkg_description = "Raw FFI bindings to platform libraries like libc."
@@ -351,20 +354,9 @@ cargo_crate("libc") {
     "rustc-dep-of-std",
     "rustc-std-workspace-core",
   ]
+  build_root = "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/libc-0.2.144/build.rs"
+  build_sources = [ "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/libc-0.2.144/build.rs" ]
   rustflags = [
-    "--cfg=libc_priv_mod_use",
-    "--cfg=libc_union",
-    "--cfg=libc_const_size_of",
-    "--cfg=libc_align",
-    "--cfg=libc_int128",
-    "--cfg=libc_core_cvoid",
-    "--cfg=libc_packedN",
-    "--cfg=libc_cfg_target_vendor",
-    "--cfg=libc_non_exhaustive",
-    "--cfg=libc_long_array",
-    "--cfg=libc_ptr_addr_of",
-    "--cfg=libc_underscore_const_names",
-    "--cfg=libc_const_extern_fn",
     "-Zlink-directives=false",
     "-Zforce-unstable-if-unmarked",
   ]
@@ -373,12 +365,12 @@ cargo_crate("libc") {
 }
 cargo_crate("memchr") {
   crate_type = "rlib"
-  crate_root = "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/memchr-2.5.0/src/lib.rs"
+  crate_root = "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/memchr-2.5.0/src/lib.rs"
   no_std = true
 
   # Unit tests skipped. Generate with --with-tests to include them.
   build_native_rust_unit_tests = false
-  sources = [ "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/memchr-2.5.0/src/lib.rs" ]
+  sources = [ "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/memchr-2.5.0/src/lib.rs" ]
   edition = "2018"
   cargo_pkg_version = "2.5.0"
   cargo_pkg_authors = "Andrew Gallant <jamslam@gmail.com>, bluss"
@@ -402,18 +394,20 @@ cargo_crate("memchr") {
     "core",
     "rustc-dep-of-std",
   ]
+  build_root = "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/memchr-2.5.0/build.rs"
+  build_sources = [ "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/memchr-2.5.0/build.rs" ]
   rustflags = [ "-Zforce-unstable-if-unmarked" ]
   output_dir =
       "$root_out_dir/local_rustc_sysroot/lib/rustlib/$rust_abi_target/lib/"
 }
 cargo_crate("miniz_oxide") {
   crate_type = "rlib"
-  crate_root = "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/miniz_oxide-0.6.2/src/lib.rs"
+  crate_root = "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/miniz_oxide-0.6.2/src/lib.rs"
   no_std = true
 
   # Unit tests skipped. Generate with --with-tests to include them.
   build_native_rust_unit_tests = false
-  sources = [ "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/miniz_oxide-0.6.2/src/lib.rs" ]
+  sources = [ "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/miniz_oxide-0.6.2/src/lib.rs" ]
   edition = "2018"
   cargo_pkg_version = "0.6.2"
   cargo_pkg_authors = "Frommi <daniil.liferenko@gmail.com>, oyvindln <oyvindln@users.noreply.github.com>"
@@ -447,12 +441,12 @@ cargo_crate("miniz_oxide") {
 }
 cargo_crate("object") {
   crate_type = "rlib"
-  crate_root = "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/object-0.30.3/src/lib.rs"
+  crate_root = "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/object-0.30.3/src/lib.rs"
   no_std = true
 
   # Unit tests skipped. Generate with --with-tests to include them.
   build_native_rust_unit_tests = false
-  sources = [ "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/object-0.30.3/src/lib.rs" ]
+  sources = [ "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/object-0.30.3/src/lib.rs" ]
   edition = "2018"
   cargo_pkg_version = "0.30.3"
   cargo_pkg_name = "object"
@@ -604,12 +598,12 @@ cargo_crate("profiler_builtins") {
 }
 cargo_crate("rustc_demangle") {
   crate_type = "rlib"
-  crate_root = "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/rustc-demangle-0.1.21/src/lib.rs"
+  crate_root = "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/rustc-demangle-0.1.21/src/lib.rs"
   no_std = true
 
   # Unit tests skipped. Generate with --with-tests to include them.
   build_native_rust_unit_tests = false
-  sources = [ "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/rustc-demangle-0.1.21/src/lib.rs" ]
+  sources = [ "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/rustc-demangle-0.1.21/src/lib.rs" ]
   edition = "2015"
   cargo_pkg_version = "0.1.21"
   cargo_pkg_authors = "Alex Crichton <alex@alexcrichton.com>"
@@ -768,6 +762,11 @@ cargo_crate("std") {
     "std_detect_dlsym_getauxval",
     "std_detect_file_io",
   ]
+  build_root =
+      "//third_party/rust-toolchain/lib/rustlib/src/rust/library/std/build.rs"
+  build_sources = [
+    "//third_party/rust-toolchain/lib/rustlib/src/rust/library/std/build.rs",
+  ]
   rustenv = [ "STD_ENV_ARCH=$rust_target_arch" ]
   rustflags = [
     "--cfg=backtrace_in_libstd",
@@ -853,12 +852,12 @@ cargo_crate("test") {
 }
 cargo_crate("unicode_width") {
   crate_type = "rlib"
-  crate_root = "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/unicode-width-0.1.10/src/lib.rs"
+  crate_root = "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/unicode-width-0.1.10/src/lib.rs"
   no_std = true
 
   # Unit tests skipped. Generate with --with-tests to include them.
   build_native_rust_unit_tests = false
-  sources = [ "//build/rust/std/fake_root/../../../../third_party/rust-toolchain/lib/rustlib/src/rust/vendor/unicode-width-0.1.10/src/lib.rs" ]
+  sources = [ "//third_party/rust-toolchain/lib/rustlib/src/rust/vendor/unicode-width-0.1.10/src/lib.rs" ]
   edition = "2015"
   cargo_pkg_version = "0.1.10"
   cargo_pkg_authors =
