diff --git a/chrome/BUILD.gn b/chrome/BUILD.gn
index 3bd3fb2b18fb6309b22d2ffff5b3372afd6e486d..f00997794e6104ac3bfbc2546f333cbc487f8962 100644
--- a/chrome/BUILD.gn
+++ b/chrome/BUILD.gn
@@ -191,6 +191,10 @@ if (!is_android && !is_mac) {
           "common/crash_keys.cc",
           "common/crash_keys.h",
         ]
+        if (brave_chromium_build) {
+          sources -= [ "app/chrome_exe.rc", ]
+          sources += [ "//brave/app/brave_exe.rc", ]
+        }
 
         deps += [
           ":chrome_dll",
@@ -275,6 +279,7 @@ if (!is_android && !is_mac) {
           "//headless:headless_shell_lib",
           "//services/service_manager/embedder",
         ]
+        deps += [ "//components/unified_consent" ]
 
         public_deps = [
           ":xdg_mime",  # Needs to be public for installer to consume files.
@@ -423,6 +428,7 @@ if (is_win) {
       "//third_party/wtl",
       "//ui/views",
     ]
+    deps += [ "//components/unified_consent" ]
 
     ldflags = [
       "/DELAYLOAD:comdlg32.dll",
@@ -522,6 +528,7 @@ if (is_win) {
         "//headless:headless_shell_child_lib",
         "//services/service_manager/embedder",
       ]
+      deps += [ "//components/unified_consent" ]
 
       ldflags = [
         "/DELAYLOAD:d3d11.dll",
@@ -620,6 +627,11 @@ if (is_win) {
     ]
   }
 
+if (brave_chromium_build) {
+  group("chrome_app") {
+    public_deps = [ "//brave:chrome_app", ]
+  }
+} else {
   mac_app_bundle("chrome_app") {
     output_name = chrome_product_full_name
 
@@ -652,6 +664,7 @@ if (is_win) {
                   rebase_path("app/app.exports", root_build_dir) ]
     }
   }
+}
 
   compiled_action("chrome_app_strings") {
     tool = "//chrome/tools/build/mac:infoplist_strings_tool"
@@ -681,7 +694,7 @@ if (is_win) {
     args =
         [
           "-b",
-          "${branding_path_component}_strings",
+          _strings_file,
           "-v",
           rebase_path(chrome_version_file, root_build_dir),
           "-g",
@@ -1199,6 +1212,7 @@ if (is_win) {
       "//services/service_manager/embedder",
       "//third_party/cld_3/src/src:cld_3",
     ]
+    deps += [ "//components/unified_consent" ]
 
     if (is_component_build) {
       libs = [ "Carbon.framework" ]
@@ -1263,6 +1277,10 @@ if (is_win) {
     if (is_chrome_branded) {
       deps += [ ":default_apps" ]
     }
+    if (brave_chromium_build) {
+      deps += [ "//brave:framework_bundle_data", ]
+      if (defined(chrome_framework_version)) { framework_contents += [ "Frameworks", ] }
+    }
 
     ldflags = [
       "-Wl,-install_name,@executable_path/../Versions/$chrome_version_full/$chrome_framework_name.framework/$chrome_framework_name",
@@ -1422,6 +1440,7 @@ if (is_win) {
 
 group("browser_dependencies") {
   public_deps = [
+    "//brave:browser_dependencies",
     "//chrome/browser",
     "//chrome/common",
     "//components/gwp_asan/buildflags",
@@ -1464,6 +1483,7 @@ group("browser_dependencies") {
 
 group("child_dependencies") {
   public_deps = [
+    "//brave:child_dependencies",
     "//chrome/browser/devtools",
     "//chrome/child",
     "//chrome/common",
@@ -1491,7 +1511,7 @@ group("child_dependencies") {
 if (is_win) {
   process_version_rc_template("chrome_exe_version") {
     sources = [
-      "app/chrome_exe.ver",
+      "//brave/app/brave_exe.ver",
     ]
     output = "$target_gen_dir/chrome_exe_version.rc"
   }
@@ -1564,6 +1584,7 @@ group("resources") {
     "//chrome/browser:resources",
     "//chrome/common:resources",
     "//chrome/renderer:resources",
+    "//brave:resources",
   ]
 }
 
@@ -1813,6 +1834,7 @@ if (is_android) {
       "//content/public/common:service_names",
       "//services/service_manager/embedder",
     ]
+    deps += [ "//components/unified_consent" ]
 
     # Explicit dependency required for JNI registration to be able to
     # find the native side functions.
