diff --git a/third_party/blink/renderer/modules/peerconnection/rtc_peer_connection.cc b/third_party/blink/renderer/modules/peerconnection/rtc_peer_connection.cc
index 1503444ac2931a4205afe990f2e2dac11206de48..e28037f870ed9164f12eea45f7ddcf152d2e09d2 100644
--- a/third_party/blink/renderer/modules/peerconnection/rtc_peer_connection.cc
+++ b/third_party/blink/renderer/modules/peerconnection/rtc_peer_connection.cc
@@ -844,6 +844,7 @@ void RTCPeerConnection::Dispose() {
 ScriptPromise RTCPeerConnection::createOffer(ScriptState* script_state,
                                              const RTCOfferOptions* options,
                                              ExceptionState& exception_state) {
+  BRAVE_RTC_PEER_CONNECTION
   if (signaling_state_ ==
       webrtc::PeerConnectionInterface::SignalingState::kClosed) {
     exception_state.ThrowDOMException(DOMExceptionCode::kInvalidStateError,
@@ -907,6 +908,7 @@ ScriptPromise RTCPeerConnection::CreateOffer(
   ExecutionContext* context = ExecutionContext::From(script_state);
   UseCounter::Count(
       context, WebFeature::kRTCPeerConnectionCreateOfferLegacyFailureCallback);
+  BRAVE_RTC_PEER_CONNECTION
   if (CallErrorCallbackIfSignalingStateClosed(signaling_state_, error_callback))
     return ScriptPromise::CastUndefined(script_state);
 
@@ -968,6 +970,7 @@ ScriptPromise RTCPeerConnection::CreateOffer(
 ScriptPromise RTCPeerConnection::createAnswer(ScriptState* script_state,
                                               const RTCAnswerOptions* options,
                                               ExceptionState& exception_state) {
+  BRAVE_RTC_PEER_CONNECTION
   if (signaling_state_ ==
       webrtc::PeerConnectionInterface::SignalingState::kClosed) {
     exception_state.ThrowDOMException(DOMExceptionCode::kInvalidStateError,
@@ -1030,6 +1033,7 @@ ScriptPromise RTCPeerConnection::CreateAnswer(
         context, WebFeature::kRTCPeerConnectionCreateAnswerLegacyCompliant);
   }
 
+  BRAVE_RTC_PEER_CONNECTION
   if (CallErrorCallbackIfSignalingStateClosed(signaling_state_, error_callback))
     return ScriptPromise::CastUndefined(script_state);
 
@@ -1351,6 +1355,7 @@ ScriptPromise RTCPeerConnection::setLocalDescription(
   }
 
   DCHECK(script_state->ContextIsValid());
+  BRAVE_RTC_PEER_CONNECTION
   if (!session_description_init->hasType()) {
     return setLocalDescription(script_state);
   }
@@ -1416,6 +1421,7 @@ ScriptPromise RTCPeerConnection::setLocalDescription(
           WebFeature::
               kRTCPeerConnectionSetLocalDescriptionLegacyNoFailureCallback);
   }
+  BRAVE_RTC_PEER_CONNECTION
   String sdp;
   if (session_description_init->type() != "rollback") {
     DOMException* exception =
@@ -1475,6 +1481,7 @@ ScriptPromise RTCPeerConnection::setRemoteDescription(
   }
 
   DCHECK(script_state->ContextIsValid());
+  BRAVE_RTC_PEER_CONNECTION
   if (session_description_init->type() != "rollback") {
     MaybeWarnAboutUnsafeSdp(session_description_init);
     ReportSetSdpUsage(SetSdpOperationType::kSetRemoteDescription,
@@ -1536,6 +1543,7 @@ ScriptPromise RTCPeerConnection::setRemoteDescription(
           WebFeature::
               kRTCPeerConnectionSetRemoteDescriptionLegacyNoFailureCallback);
   }
+  BRAVE_RTC_PEER_CONNECTION
 
   if (CallErrorCallbackIfSignalingStateClosed(signaling_state_, error_callback))
     return ScriptPromise::CastUndefined(script_state);
