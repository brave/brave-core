diff --git a/components/sync_device_info/device_info_sync_bridge.cc b/components/sync_device_info/device_info_sync_bridge.cc
index 05c7c94ab9a51b20f53ed4c1d6a7047123eab1a6..ba9e6d2e315846d8cc47b0af17d19f8a975e6837 100644
--- a/components/sync_device_info/device_info_sync_bridge.cc
+++ b/components/sync_device_info/device_info_sync_bridge.cc
@@ -289,6 +289,7 @@ std::unique_ptr<DeviceInfoSpecifics> MakeLocalDeviceSpecifics(
         GetSpecificsFieldNumberFromDataType(data_type));
   }
 
+  BRAVE_MAKE_LOCAL_DEVICE_SPECIFICS
   return specifics;
 }
 
@@ -452,6 +453,7 @@ std::optional<ModelError> DeviceInfoSyncBridge::ApplyIncrementalSyncChanges(
   for (const std::unique_ptr<EntityChange>& change : entity_changes) {
     const std::string guid = change->storage_key();
 
+    BRAVE_DEVICE_INFO_SYNC_BRIDGE_APPLY_SYNC_CHANGES_SKIP_NEXT_IF
     // Reupload local device if it was deleted from the server.
     if (local_cache_guid_ == guid &&
         change->type() == EntityChange::ACTION_DELETE) {
@@ -462,7 +464,7 @@ std::optional<ModelError> DeviceInfoSyncBridge::ApplyIncrementalSyncChanges(
     // Ignore any remote changes that have a cache guid that is or was this
     // local device.
     if (device_info_prefs_->IsRecentLocalCacheGuid(guid)) {
-      continue;
+      if (change->type() != EntityChange::ACTION_DELETE) continue;
     }
 
     if (change->type() == EntityChange::ACTION_DELETE) {
@@ -765,6 +767,7 @@ void DeviceInfoSyncBridge::OnReadAllMetadata(
     return;
   }
 
+  BRAVE_ON_READ_ALL_METADATA_CLEAR_PROGRESS_TOKEN
   // In the regular case for sync being disabled, wait for MergeFullSyncData()
   // before initializing the LocalDeviceInfoProvider.
   if (!syncer::IsInitialSyncDone(
@@ -999,6 +1002,7 @@ DeviceInfoSyncBridge::CountActiveDevicesByType() const {
 void DeviceInfoSyncBridge::ExpireOldEntries() {
   CHECK(store_);
   TRACE_EVENT0("sync", "DeviceInfoSyncBridge::ExpireOldEntries");
+  BRAVE_SKIP_EXPIRE_OLD_ENTRIES
   const base::Time expiration_threshold =
       base::Time::Now() - kExpirationThreshold;
   std::unordered_set<std::string> cache_guids_to_expire;
