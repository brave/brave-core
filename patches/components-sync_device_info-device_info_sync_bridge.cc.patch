diff --git a/components/sync_device_info/device_info_sync_bridge.cc b/components/sync_device_info/device_info_sync_bridge.cc
index 0703858aa43dccc7268e90b3f6b1a79c60bf3e5b..a1e8ab0d04c6576b0dbd28e964191f6a89be3e5d 100644
--- a/components/sync_device_info/device_info_sync_bridge.cc
+++ b/components/sync_device_info/device_info_sync_bridge.cc
@@ -261,6 +261,7 @@ std::unique_ptr<DeviceInfoSpecifics> MakeLocalDeviceSpecifics(
         GetSpecificsFieldNumberFromModelType(data_type));
   }
 
+  BRAVE_MAKE_LOCAL_DEVICE_SPECIFICS
   return specifics;
 }
 
@@ -430,6 +431,7 @@ absl::optional<ModelError> DeviceInfoSyncBridge::ApplySyncChanges(
   for (const std::unique_ptr<EntityChange>& change : entity_changes) {
     const std::string guid = change->storage_key();
 
+    BRAVE_DEVICE_INFO_SYNC_BRIDGE_APPLY_SYNC_CHANGES_SKIP_NEXT_IF
     // Reupload local device if it was deleted from the server.
     if (local_cache_guid_ == guid &&
         change->type() == EntityChange::ACTION_DELETE) {
@@ -440,7 +442,7 @@ absl::optional<ModelError> DeviceInfoSyncBridge::ApplySyncChanges(
     // Ignore any remote changes that have a cache guid that is or was this
     // local device.
     if (device_info_prefs_->IsRecentLocalCacheGuid(guid)) {
-      continue;
+      if (change->type() != EntityChange::ACTION_DELETE) continue;
     }
 
     if (change->type() == EntityChange::ACTION_DELETE) {
@@ -707,6 +709,7 @@ void DeviceInfoSyncBridge::OnReadAllMetadata(
     return;
   }
 
+  BRAVE_ON_READ_ALL_METADATA_CLEAR_PROGRESS_TOKEN
   // In the regular case for sync being disabled, wait for MergeSyncData()
   // before initializing the LocalDeviceInfoProvider.
   if (!metadata_batch->GetModelTypeState().initial_sync_done() &&
@@ -915,6 +918,7 @@ DeviceInfoSyncBridge::CountActiveDevicesByType() const {
 }
 
 void DeviceInfoSyncBridge::ExpireOldEntries() {
+  BRAVE_SKIP_EXPIRE_OLD_ENTRIES
   const base::Time expiration_threshold =
       base::Time::Now() - kExpirationThreshold;
   std::unordered_set<std::string> cache_guids_to_expire;
