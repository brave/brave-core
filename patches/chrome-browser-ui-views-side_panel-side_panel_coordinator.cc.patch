diff --git a/chrome/browser/ui/views/side_panel/side_panel_coordinator.cc b/chrome/browser/ui/views/side_panel/side_panel_coordinator.cc
index f14d9cf905c2cd255c36171a10b1b54055450fc6..7bc1346484b0de99067363f529c9b0a777d954d7 100644
--- a/chrome/browser/ui/views/side_panel/side_panel_coordinator.cc
+++ b/chrome/browser/ui/views/side_panel/side_panel_coordinator.cc
@@ -336,36 +336,6 @@ void SidePanelCoordinator::OpenMoreInfoMenu() {
                           ui::mojom::MenuSourceType::kNone);
 }
 
-std::optional<SidePanelEntry::Id> SidePanelCoordinator::GetCurrentEntryId()
-    const {
-  // We intentionally override with a trivial pass-through to the intermediate
-  // class's implementation to make this a local definition and prevent a linker
-  // error in component builds.
-  return SidePanelUIBase::GetCurrentEntryId();
-}
-
-int SidePanelCoordinator::GetCurrentEntryDefaultContentWidth() const {
-  // We intentionally override with a trivial pass-through to the intermediate
-  // class's implementation to make this a local definition and prevent a linker
-  // error in component builds.
-  return SidePanelUIBase::GetCurrentEntryDefaultContentWidth();
-}
-
-bool SidePanelCoordinator::IsSidePanelShowing() const {
-  // We intentionally override with a trivial pass-through to the intermediate
-  // class's implementation to make this a local definition and prevent a linker
-  // error in component builds.
-  return SidePanelUIBase::IsSidePanelShowing();
-}
-
-bool SidePanelCoordinator::IsSidePanelEntryShowing(
-    const SidePanelEntry::Key& entry_key) const {
-  // We intentionally override with a trivial pass-through to the intermediate
-  // class's implementation to make this a local definition and prevent a linker
-  // error in component builds.
-  return SidePanelUIBase::IsSidePanelEntryShowing(entry_key);
-}
-
 content::WebContents* SidePanelCoordinator::GetWebContentsForTest(
     SidePanelEntryId id) {
   if (auto* entry = GetEntryForKey(SidePanelEntryKey(id))) {
