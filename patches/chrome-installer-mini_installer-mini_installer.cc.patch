diff --git a/chrome/installer/mini_installer/mini_installer.cc b/chrome/installer/mini_installer/mini_installer.cc
index 73e6240800f3c72bd96c91971c53a19516e1b0f1..e0049fab53dcb2bb8fe237523bf6eb9825c66c6e 100644
--- a/chrome/installer/mini_installer/mini_installer.cc
+++ b/chrome/installer/mini_installer/mini_installer.cc
@@ -63,7 +63,7 @@ struct Context {
 // TODO(grt): Frame this in terms of whether or not the brand supports
 // integation with Omaha, where Google Update is the Google-specific fork of
 // the open-source Omaha project.
-#if BUILDFLAG(GOOGLE_CHROME_BRANDING)
+#if BUILDFLAG(GOOGLE_CHROME_BRANDING) || (defined(BRAVE_CHROMIUM_BUILD) && defined(OFFICIAL_BUILD))
 // Opens the Google Update ClientState key. If |binaries| is false, opens the
 // key for Google Chrome or Chrome SxS (canary). If |binaries| is true and an
 // existing multi-install Chrome is being updated, opens the key for the
@@ -144,6 +144,138 @@ void SetInstallerFlags(const Configuration& configuration) {
 }
 #endif  // BUILDFLAG(GOOGLE_CHROME_BRANDING)
 
+#if defined(BRAVE_CHROMIUM_BUILD)
+bool ParseStandardReferralCode(const wchar_t* filename, ReferralCodeString& referral_code) {
+  // Scan backwards for last dash in filename.
+  const wchar_t* scan = filename + lstrlen(filename) - 1;
+  while (scan != filename && *scan != L'-')
+    --scan;
+
+  if (*scan++ != L'-')
+    return false;
+
+  // Standard referral code is 6 characters.
+  const wchar_t* ref_code = scan;
+  if (lstrlen(ref_code) != 6)
+    return false;
+
+  // Ensure that first half of referral code is alphabetic.
+  for (int i = 0; i < 3; ++i) {
+    if ((ref_code[i] < L'a' || ref_code[i] > L'z') &&
+        (ref_code[i] < L'A' || ref_code[i] > L'Z'))
+      return false;
+  }
+
+  // Ensure that second half of referral code is numeric.
+  for (int i = 3; i < 6; ++i) {
+    if (ref_code[i] < L'0' || ref_code[i] > L'9')
+      return false;
+  }
+
+  if (!referral_code.assign(ref_code))
+    return false;
+
+  return true;
+}
+
+bool ParseExtendedReferralCode(const wchar_t* filename, ReferralCodeString& referral_code) {
+  // Scan backwards for second-to-last dash in filename, since this
+  // type of referral code has an embedded dash.
+  const wchar_t* scan = filename + lstrlen(filename) - 1;
+  while (scan != filename && *scan != L'-')
+    --scan;
+
+  if (*scan-- != L'-')
+    return false;
+
+  while (scan != filename && *scan != L'-')
+    --scan;
+
+  if (*scan++ != L'-')
+    return false;
+
+  // Ensure that referral code is alphabetic.
+  const wchar_t* ref_code = scan;
+  int dashes = 0;
+  for (int i = 0; i < lstrlen(ref_code); ++i) {
+    if ((ref_code[i] < L'a' || ref_code[i] > L'z') &&
+        (ref_code[i] < L'A' || ref_code[i] > L'Z') && (ref_code[i] != L'-'))
+      return NULL;
+    if (ref_code[i] == L'-')
+      ++dashes;
+  }
+
+  // Ensure that referral code contains exactly one dash.
+  if (dashes != 1)
+    return false;
+
+  if (!referral_code.assign(ref_code))
+    return false;
+
+  return true;
+}
+
+bool ParseReferralCode(const wchar_t* installer_filename,
+                       ReferralCodeString& referral_code) {
+  PathString filename;
+  if (!filename.assign(
+          GetNameFromPathExt(installer_filename, lstrlen(installer_filename))))
+    return false;
+
+  // Strip extension from filename.
+  const wchar_t* scan = filename.get() + filename.length() - 1;
+  while (scan != filename.get() && *scan != L'.')
+    --scan;
+
+  if (*scan == L'.')
+    filename.truncate_at(scan - filename.get());
+
+  // Strip any de-duplicating suffix from filename, e.g. "(1)".
+  scan = filename.get() + filename.length() - 1;
+  if (*scan == L')') {
+    --scan;
+    while (scan != filename.get() && *scan >= '0' && *scan <= '9')
+      --scan;
+    if (*scan == L'(')
+      filename.truncate_at(scan - filename.get());
+  }
+
+  // Strip trailing spaces from filename.
+  scan = filename.get() + filename.length() - 1;
+  while (scan != filename.get() && *scan == L' ')
+    --scan;
+
+  if (scan != filename.get() && (scan != filename.get() + filename.length()))
+    filename.truncate_at(scan - filename.get() + 1);
+
+  // First check for 6-character standard referral code XXXDDD, where
+  // X is an alphabetic character and D is a numeric character. If not
+  // found, check for an alphabetic referral code of any length in the
+  // form XXX-XXX.
+  if (!ParseStandardReferralCode(filename.get(), referral_code) &&
+      !ParseExtendedReferralCode(filename.get(), referral_code)) {
+    return false;
+  }
+
+  return true;
+}
+
+bool GetStubInstallerFilename(PathString& installer_filename) {
+  wchar_t value[MAX_PATH] = {0,};
+  const bool result =
+      RegKey::ReadSZValue(HKEY_CURRENT_USER, L"Software\\BraveSoftware\\Promo",
+                          L"StubInstallerPath", value, _countof(value)) ;
+
+  if (!result)
+    return false;
+
+  if (!installer_filename.assign(value) || installer_filename.length() == 0)
+    return false;
+
+  return true;
+}
+#endif  // BRAVE_CHROMIUM_BUILD
+
 // Gets the setup.exe path from Registry by looking at the value of Uninstall
 // string.  |size| is measured in wchar_t units.
 ProcessExitResult GetSetupExePathForAppGuid(bool system_level,
@@ -528,6 +660,21 @@ ProcessExitResult RunSetup(const Configuration& configuration,
   // on to setup.exe
   AppendCommandLineFlags(configuration.command_line(), &cmd_line);
 
+#if defined(BRAVE_CHROMIUM_BUILD)
+  PathString installer_filename;
+  if (GetStubInstallerFilename(installer_filename)) {
+    ReferralCodeString referral_code;
+    if (ParseReferralCode(installer_filename.get(), referral_code)) {
+      if (!cmd_line.append(L" --") ||
+          !cmd_line.append(L"brave-referral-code") ||
+          !cmd_line.append(L"=\"") || !cmd_line.append(referral_code.get()) ||
+          !cmd_line.append(L"\"")) {
+        return ProcessExitResult(COMMAND_STRING_OVERFLOW);
+      }
+    }
+  }
+#endif
+
   return RunProcessAndWait(setup_exe.get(), cmd_line.get(),
                            RUN_SETUP_FAILED_FILE_NOT_FOUND,
                            RUN_SETUP_FAILED_PATH_NOT_FOUND,
@@ -875,7 +1022,7 @@ ProcessExitResult WMain(HMODULE module) {
   if (!GetWorkDir(module, &base_path, &exit_code))
     return exit_code;
 
-#if BUILDFLAG(GOOGLE_CHROME_BRANDING)
+#if BUILDFLAG(GOOGLE_CHROME_BRANDING) || (defined(BRAVE_CHROMIUM_BUILD) && defined(OFFICIAL_BUILD))
   // Set the magic suffix in registry to try full installer next time. We ignore
   // any errors here and we try to set the suffix for user level unless
   // GoogleUpdateIsMachine=1 is present in the environment or --system-level is
@@ -900,7 +1047,7 @@ ProcessExitResult WMain(HMODULE module) {
   if (ShouldDeleteExtractedFiles())
     DeleteExtractedFiles(base_path.get(), archive_path.get(), setup_path.get());
 
-#if BUILDFLAG(GOOGLE_CHROME_BRANDING)
+#if BUILDFLAG(GOOGLE_CHROME_BRANDING) || (defined(BRAVE_CHROMIUM_BUILD) && defined(OFFICIAL_BUILD))
   WriteInstallResults(configuration, exit_code);
 #endif
 
