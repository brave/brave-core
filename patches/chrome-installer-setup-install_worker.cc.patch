diff --git a/chrome/installer/setup/install_worker.cc b/chrome/installer/setup/install_worker.cc
index 3393a297bb7120d8082cecc25df15f4e60324425..e92470fe15e08447a091cca58538274845c147c5 100644
--- a/chrome/installer/setup/install_worker.cc
+++ b/chrome/installer/setup/install_worker.cc
@@ -85,6 +85,7 @@ void AddInstallerCopyTasks(const InstallParams& install_params,
 
   const InstallerState& installer_state = *install_params.installer_state;
   const base::FilePath& setup_path = *install_params.setup_path;
+  const base::FilePath& archive_path = *install_params.archive_path;
   const base::FilePath& temp_path = *install_params.temp_path;
   const base::Version& new_version = *install_params.new_version;
 
@@ -106,6 +107,25 @@ void AddInstallerCopyTasks(const InstallParams& install_params,
     install_list->AddCopyTreeWorkItem(setup_path, active_setup_exe, temp_path,
                                       WorkItem::ALWAYS);
   }
+
+  base::FilePath archive_dst(installer_dir.Append(archive_path.BaseName()));
+  if (archive_path != archive_dst) {
+    // In the past, we copied rather than moved for system level installs so
+    // that the permissions of %ProgramFiles% would be picked up.  Now that
+    // |temp_path| is in %ProgramFiles% for system level installs (and in
+    // %LOCALAPPDATA% otherwise), there is no need to do this for the archive.
+    // Setup.exe, on the other hand, is created elsewhere so it must always be
+    // copied.
+    if (temp_path.IsParent(archive_path)) {
+      install_list->AddMoveTreeWorkItem(archive_path, archive_dst, temp_path,
+                                        WorkItem::ALWAYS_MOVE);
+    } else {
+      // This may occur when setup is run out of an existing installation
+      // directory. We cannot remove the system-level archive.
+      install_list->AddCopyTreeWorkItem(archive_path, archive_dst, temp_path,
+                                        WorkItem::ALWAYS);
+    }
+  }
 }
 
 // A callback invoked by |work_item| that adds firewall rules for Chrome. Rules
@@ -202,6 +222,7 @@ void AddDeleteUninstallEntryForMSIWorkItems(
 void AddChromeWorkItems(const InstallParams& install_params,
                         WorkItemList* install_list) {
   const InstallerState& installer_state = *install_params.installer_state;
+  const base::FilePath& archive_path = *install_params.archive_path;
   const base::FilePath& src_path = *install_params.src_path;
   const base::FilePath& temp_path = *install_params.temp_path;
   const base::Version& current_version = *install_params.current_version;
@@ -210,17 +231,21 @@ void AddChromeWorkItems(const InstallParams& install_params,
   const base::FilePath& target_path = installer_state.target_path();
 
   if (current_version.IsValid()) {
-    // TODO(crbug.com/441478433): Delete this cleanup some time in 2027.
     // Delete the archive from an existing install to save some disk space.
     base::FilePath old_installer_dir(
         installer_state.GetInstallerDirectory(current_version));
     base::FilePath old_archive(
         old_installer_dir.Append(installer::kChromeArchive));
-    auto* delete_old_archive_work_item =
-        install_list->AddDeleteTreeWorkItem(old_archive, temp_path);
-    // Don't cause failure of |install_list| if this WorkItem fails.
-    delete_old_archive_work_item->set_best_effort(true);
-    delete_old_archive_work_item->set_rollback_enabled(false);
+    // Don't delete the archive that we are actually installing from.
+    if (archive_path != old_archive) {
+      auto* delete_old_archive_work_item =
+          install_list->AddDeleteTreeWorkItem(old_archive, temp_path);
+      // Don't cause failure of |install_list| if this WorkItem fails.
+      delete_old_archive_work_item->set_best_effort(true);
+      // No need to roll this back; if installation fails we'll be moved to the
+      // "-full" channel anyway.
+      delete_old_archive_work_item->set_rollback_enabled(false);
+    }
   }
 
   // Delete any new_chrome.exe if present (we will end up creating a new one
