diff --git a/chrome/browser/profiles/profile_manager.h b/chrome/browser/profiles/profile_manager.h
index 7d02af7f8f60dc68ff41ac9c5a2d3ace9ab60646..d71a7325fe58c9d29d205a3c4feed0967791874d 100644
--- a/chrome/browser/profiles/profile_manager.h
+++ b/chrome/browser/profiles/profile_manager.h
@@ -146,7 +146,7 @@ class ProfileManager : public content::NotificationObserver,
 
   // Get the name of the last used profile, or if that's undefined, the default
   // profile.
-  std::string GetLastUsedProfileName();
+  virtual std::string GetLastUsedProfileName();
 
   // Get the Profiles which are currently open, i.e. have open browsers or were
   // open the last time Chrome was running. Profiles that fail to initialize are
@@ -227,7 +227,7 @@ class ProfileManager : public content::NotificationObserver,
 
   // Initializes user prefs of |profile|. This includes profile name and
   // avatar values.
-  void InitProfileUserPrefs(Profile* profile);
+  virtual void InitProfileUserPrefs(Profile* profile);
 
   // Register and add testing profile to the ProfileManager. Use ONLY in tests.
   // This allows the creation of Profiles outside of the standard creation path
@@ -269,6 +269,7 @@ class ProfileManager : public content::NotificationObserver,
   }
 
  private:
+  friend class BraveProfileManager;
   friend class TestingProfileManager;
   FRIEND_TEST_ALL_PREFIXES(ProfileManagerBrowserTest, DeleteAllProfiles);
   FRIEND_TEST_ALL_PREFIXES(ProfileManagerBrowserTest, SwitchToProfile);
@@ -293,6 +294,7 @@ class ProfileManager : public content::NotificationObserver,
 
   // Does final initial actions.
   void DoFinalInit(ProfileInfo* profile_info, bool go_off_the_record);
+  virtual
   void DoFinalInitForServices(Profile* profile, bool go_off_the_record);
   void DoFinalInitLogging(Profile* profile);
 
@@ -356,7 +358,7 @@ class ProfileManager : public content::NotificationObserver,
 
   // Apply settings for profiles created by the system rather than users: The
   // (desktop) Guest User profile and (desktop) System Profile.
-  void SetNonPersonalProfilePrefs(Profile* profile);
+  virtual void SetNonPersonalProfilePrefs(Profile* profile);
 
   // Determines if profile should be OTR.
   bool ShouldGoOffTheRecord(Profile* profile);
