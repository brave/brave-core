diff --git a/chrome/browser/ui/extensions/extension_action_view_controller.h b/chrome/browser/ui/extensions/extension_action_view_controller.h
index 8bb54948a6d3939bc6440552a4e2c8b7d7e4b764..e0022a6dfbd3a454bc804829af9910734c0c96ef 100644
--- a/chrome/browser/ui/extensions/extension_action_view_controller.h
+++ b/chrome/browser/ui/extensions/extension_action_view_controller.h
@@ -19,6 +19,7 @@
 #include "extensions/common/extension_id.h"
 #include "ui/gfx/image/image.h"
 
+class BraveActionViewController;
 class Browser;
 class ExtensionActionPlatformDelegate;
 class IconWithBadgeImageSource;
@@ -45,6 +46,7 @@ class ExtensionActionViewController
       public extensions::ExtensionContextMenuModel::PopupDelegate,
       public extensions::ExtensionHostObserver {
  public:
+  friend class BraveActionViewController;
   static std::unique_ptr<ExtensionActionViewController> Create(
       const extensions::ExtensionId& extension_id,
       Browser* browser,
@@ -144,6 +146,7 @@ class ExtensionActionViewController
   // In some cases (such as when an action is shown in a menu), a substitute
   // ToolbarActionViewController should be used for showing popups. This
   // returns the preferred controller.
+  virtual
   ExtensionActionViewController* GetPreferredPopupViewController();
 
   // Begins the process of showing the popup for the extension action on the
@@ -151,6 +154,7 @@ class ExtensionActionViewController
   // user action.
   // The popup may not be shown synchronously if the extension is hidden and
   // first needs to slide itself out.
+  virtual
   void TriggerPopup(PopupShowAction show_action,
                     bool by_user,
                     ShowPopupCallback callback);
@@ -162,6 +166,7 @@ class ExtensionActionViewController
                  ShowPopupCallback callback);
 
   // Handles cleanup after the popup closes.
+  virtual
   void OnPopupClosed();
 
   // Returns the image source for the icon.
