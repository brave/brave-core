diff --git a/tools/rust/update_rust.py b/tools/rust/update_rust.py
index db9735a50cc06d24d9f120bc9063b724ca1a212f..71435c097c81156ea39c2b7554d36ebe945ef03f 100755
--- a/tools/rust/update_rust.py
+++ b/tools/rust/update_rust.py
@@ -32,8 +32,17 @@ sys.path.append(
 
 # These fields are written by //tools/clang/scripts/upload_revision.py, and
 # should not be changed manually.
-RUST_REVISION = '2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd'
-RUST_SUB_REVISION = 1
+#
+# In the case that a Rust roll fails and you want to roll Clang alone, reset
+# this back to its previous value _AND_ set `OVERRIDE_CLANG_REVISION` below
+# to the `CLANG_REVISION` that was in place before the roll.
+RUST_REVISION = 'a2b1646c597329d0a25efa3889b66650f65de1de'
+RUST_SUB_REVISION = 5
+
+# If not None, this overrides the `CLANG_REVISION` in
+# //tools/clang/scripts/update.py in order to download a Rust toolchain that
+# was built against a different LLVM than the latest Clang package.
+OVERRIDE_CLANG_REVISION = None
 
 # Trunk on 2022-10-15.
 #
@@ -46,27 +55,6 @@ RUST_SUB_REVISION = 1
 CRUBIT_REVISION = 'f5cbdf4b54b0e6b9f63a4464a2c901c82e0f0209'
 CRUBIT_SUB_REVISION = 1
 
-# TODO(crbug.com/1401042): Set this back to None once Clang rolls block on Rust
-# building. Until Clang rolls block on Rust, they frequently roll without a Rust
-# compiler, which causes developer machines/bots to 404 in gclient sync.
-#
-# If not None, use a Rust package built with an older LLVM version than
-# specified in tools/clang/scripts/update.py. This is a fallback for when an
-# LLVM update breaks the Rust build.
-#
-# This should almost always be None. When a breakage happens the fallback should
-# be temporary. Once fixed, the applicable revision(s) above should be updated
-# and FALLBACK_REVISION should be reset to None.
-#
-# Rust builds (for Linux) that worked are found at:
-# https://commondatastorage.googleapis.com/chromium-browser-clang/index.html?path=Linux_x64/rust-toolchain-
-# The latest builds are prefixed with a date, such as `20230101-1`.
-#
-# TODO(lukasza): Include CRUBIT_REVISION and CRUBIT_SUB_REVISION once we
-# include Crubit binaries in the generated package.  See also a TODO comment
-# in BuildCrubit in package_rust.py.
-FALLBACK_REVISION = '2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd-1-llvmorg-17-init-10134-g3da83fba-1'
-
 # Hash of src/stage0.json, which itself contains the stage0 toolchain hashes.
 # We trust the Rust build system checks, but to ensure it is not tampered with
 # itself check the hash.
@@ -79,23 +67,10 @@ RUST_TOOLCHAIN_OUT_DIR = os.path.join(THIRD_PARTY_DIR, 'rust-toolchain')
 VERSION_STAMP_PATH = os.path.join(RUST_TOOLCHAIN_OUT_DIR, 'VERSION')
 
 
-# Package version built in build_rust.py, which is always built against the
-# current Clang. Typically Clang and Rust revisions are both updated together
-# and this picks the Clang that has just been built.
-def GetLatestRevision():
-    from update import (CLANG_REVISION, CLANG_SUB_REVISION)
-    return (f'{RUST_REVISION}-{RUST_SUB_REVISION}'
-            f'-{CLANG_REVISION}-{CLANG_SUB_REVISION}')
-
-
-# Package version for download. Ideally this is the latest Clang+Rust roll,
-# which was built successfully and is returned from GetLatestRevision().
-# However at this time Clang rolls even if Rust fails to build, so we have Rust
-# pinned to the last known successful build with FALLBACK_REVISION. This should
-# go away once we block Clang rolls on Rust also being built.
-def GetDownloadPackageVersion():
-    return FALLBACK_REVISION \
-        if FALLBACK_REVISION else GetLatestRevision()
+def GetRustClangRevision():
+    from update import CLANG_REVISION
+    c = OVERRIDE_CLANG_REVISION if OVERRIDE_CLANG_REVISION else CLANG_REVISION
+    return (f'{RUST_REVISION}-{RUST_SUB_REVISION}' f'-{c}')
 
 
 # Get the version of the toolchain package we already have.
@@ -112,28 +87,6 @@ def GetStampVersion():
     return None
 
 
-def CheckUrl(url) -> bool:
-    """Check if a url exists."""
-    num_retries = 3
-    retry_wait_s = 5  # Doubled at each retry.
-
-    while True:
-        try:
-            urllib.request.urlopen(urllib.request.Request(url))
-            return True
-        except urllib.error.URLError as e:
-            if e.code != 404:
-                print(e)
-            if num_retries == 0 or isinstance(
-                    e, urllib.error.HTTPError) and e.code == 404:
-                return False
-            num_retries -= 1
-            print(f'Retrying in {retry_wait_s} s ...')
-            sys.stdout.flush()
-            time.sleep(retry_wait_s)
-            retry_wait_s *= 2
-
-
 def main():
     parser = argparse.ArgumentParser(description='Update Rust package')
     parser.add_argument(
@@ -153,12 +106,9 @@ def main():
 
     if args.print_package_version:
         stamp_version = GetStampVersion()
-        if (stamp_version != GetLatestRevision()
-                and stamp_version != FALLBACK_REVISION):
-            print(
-                f'The expected Rust version is {GetLatestRevision()} '
-                f'(or fallback {FALLBACK_REVISION} but the actual version is '
-                f'{stamp_version}')
+        if stamp_version != GetRustClangRevision():
+            print(f'The expected Rust version is {GetRustClangRevision()} '
+                  f'but the actual version is {stamp_version}')
             print('Did you run "gclient sync"?')
             return 1
         print(stamp_version)
@@ -169,15 +119,7 @@ def main():
 
     platform_prefix = GetPlatformUrlPrefix(GetDefaultHostOs())
 
-    version = GetLatestRevision()
-    url = f'{platform_prefix}rust-toolchain-{version}.tar.xz'
-    if not CheckUrl(url):
-        print("Latest Rust toolchain not found. Using fallback revision.")
-        version = FALLBACK_REVISION
-        url = f'{platform_prefix}rust-toolchain-{version}.tar.xz'
-        if not CheckUrl(url):
-            print('error: Could not find Rust toolchain package')
-            return 1
+    version = GetRustClangRevision()
 
     # Exit early if the existing package is up-to-date. Note that we cannot
     # simply call DownloadAndUnpack() every time: aside from unnecessarily
@@ -192,6 +134,7 @@ def main():
         shutil.rmtree(RUST_TOOLCHAIN_OUT_DIR)
 
     try:
+        url = f'{platform_prefix}rust-toolchain-{version}.tar.xz'
         DownloadAndUnpack(url, THIRD_PARTY_DIR)
     except urllib.error.HTTPError as e:
         print(f'error: Failed to download Rust package')
