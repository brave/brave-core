diff --git a/components/content_settings/core/browser/cookie_settings.cc b/components/content_settings/core/browser/cookie_settings.cc
index 44b4fc031d81e6c4fb05ffaf2d103abe347edd29..5de7efb4e8b7695381fc05163c9908544d94fd1c 100644
--- a/components/content_settings/core/browser/cookie_settings.cc
+++ b/components/content_settings/core/browser/cookie_settings.cc
@@ -17,8 +17,6 @@
 #include "components/pref_registry/pref_registry_syncable.h"
 #include "components/prefs/pref_service.h"
 #include "extensions/buildflags/buildflags.h"
-#include "net/base/net_errors.h"
-#include "net/base/static_cookie_policy.h"
 #include "url/gurl.h"
 
 namespace content_settings {
@@ -123,10 +121,12 @@ void CookieSettings::ShutdownOnUIThread() {
   pref_change_registrar_.RemoveAll();
 }
 
-void CookieSettings::GetCookieSetting(const GURL& url,
-                                      const GURL& first_party_url,
-                                      content_settings::SettingSource* source,
-                                      ContentSetting* cookie_setting) const {
+void CookieSettings::GetCookieSettingInternal(
+    const GURL& url,
+    const GURL& first_party_url,
+    bool is_third_party_request,
+    content_settings::SettingSource* source,
+    ContentSetting* cookie_setting) const {
   DCHECK(cookie_setting);
   // Auto-allow in extensions or for WebUI embedded in a secure origin.
   if (first_party_url.SchemeIs(kChromeUIScheme) &&
@@ -158,14 +158,11 @@ void CookieSettings::GetCookieSetting(const GURL& url,
                      info.secondary_pattern.MatchesAllHosts() &&
                      ShouldBlockThirdPartyCookies() &&
                      !first_party_url.SchemeIs(extension_scheme_);
-  net::StaticCookiePolicy policy(
-      net::StaticCookiePolicy::BLOCK_ALL_THIRD_PARTY_COOKIES);
 
   // We should always have a value, at least from the default provider.
   DCHECK(value);
   ContentSetting setting = ValueToContentSetting(value.get());
-  bool block =
-      block_third && policy.CanAccessCookies(url, first_party_url) != net::OK;
+  bool block = block_third && is_third_party_request;
   *cookie_setting = block ? CONTENT_SETTING_BLOCK : setting;
 }
 
