diff --git a/components/sync_bookmarks/bookmark_change_processor.cc b/components/sync_bookmarks/bookmark_change_processor.cc
index acb064faac3ee975ec07be4977fc0970309dfb15..06d371a7136f7f287db0bdae8fd18ae7de4656c1 100644
--- a/components/sync_bookmarks/bookmark_change_processor.cc
+++ b/components/sync_bookmarks/bookmark_change_processor.cc
@@ -87,6 +87,7 @@ void BookmarkChangeProcessor::UpdateSyncNodeProperties(
   bookmark_specifics.set_creation_time_us(src->date_added().ToInternalValue());
   dst->SetBookmarkSpecifics(bookmark_specifics);
   SetSyncNodeFavicon(src, model, dst);
+  brave_sync::AddBraveMetaInfo(src, model, false);
   SetSyncNodeMetaInfo(src, dst);
 }
 
@@ -244,6 +245,7 @@ void BookmarkChangeProcessor::CreateOrUpdateSyncNode(const BookmarkNode* node) {
     // Acquire a scoped write lock via a transaction.
     syncer::WriteTransaction trans(FROM_HERE, share_handle(), &new_version);
     sync_id = model_associator_->GetSyncIdFromChromeId(node->id());
+    ScopedPauseObserver pause(bookmark_model_, this);
     if (sync_id != syncer::kInvalidId) {
       UpdateSyncNode(
           node, bookmark_model_, &trans, model_associator_, error_handler());
@@ -383,7 +385,8 @@ int64_t BookmarkChangeProcessor::UpdateSyncNode(
 
 void BookmarkChangeProcessor::BookmarkMetaInfoChanged(
     BookmarkModel* model, const BookmarkNode* node) {
-  BookmarkNodeChanged(model, node);
+  // TODO(darkdh): make sure the meta info changed is what we want to sync
+  // BookmarkNodeChanged(model, node);
 }
 
 void BookmarkChangeProcessor::BookmarkNodeMoved(BookmarkModel* model,
@@ -416,6 +419,10 @@ void BookmarkChangeProcessor::BookmarkNodeMoved(BookmarkModel* model,
       return;
     }
 
+    ScopedPauseObserver pause(bookmark_model_, this);
+    brave_sync::AddBraveMetaInfo(child, model, old_parent != new_parent);
+    SetSyncNodeMetaInfo(child, &sync_node);
+
     if (!PlaceSyncNode(MOVE, new_parent, new_index, &trans, &sync_node,
                        model_associator_)) {
       syncer::SyncError error(FROM_HERE,
@@ -429,6 +436,11 @@ void BookmarkChangeProcessor::BookmarkNodeMoved(BookmarkModel* model,
 
   UpdateTransactionVersion(new_version, model,
                            std::vector<const BookmarkNode*>(1, child));
+
+  BookmarkNodeChildrenReordered(model, new_parent);
+  if (old_parent != new_parent) {
+    BookmarkNodeChildrenReordered(model, old_parent);
+  }
 }
 
 void BookmarkChangeProcessor::BookmarkNodeFaviconChanged(
@@ -458,6 +470,8 @@ void BookmarkChangeProcessor::BookmarkNodeFaviconChanged(
     return;
   }
 
+  if (IsFirstLoadedFavicon(node)) return;
+
   CreateOrUpdateSyncNode(node);
 }
 
@@ -490,6 +504,10 @@ void BookmarkChangeProcessor::BookmarkNodeChildrenReordered(
       DCHECK_EQ(sync_child.GetParentId(),
                 model_associator_->GetSyncIdFromChromeId(node->id()));
 
+      ScopedPauseObserver pause(bookmark_model_, this);
+      brave_sync::AddBraveMetaInfo(child, model, false);
+      SetSyncNodeMetaInfo(child, &sync_child);
+
       if (!PlaceSyncNode(MOVE, node, i, &trans, &sync_child,
                          model_associator_)) {
         syncer::SyncError error(FROM_HERE,
@@ -718,10 +736,12 @@ void BookmarkChangeProcessor::ApplyChangesFromSyncModel(
                    << src.GetBookmarkSpecifics().url();
         continue;
       }
+      bookmark_model_->SetNodeMetaInfo(dst, "FirstLoadedFavicon", "true");
       model_associator_->Associate(dst, src);
     }
 
-    to_reposition.insert(std::make_pair(src.GetPositionIndex(), dst));
+    uint64_t index = brave_sync::GetIndex(dst->parent(), dst);
+    to_reposition.insert(std::make_pair(index, dst));
     bookmark_model_->SetNodeSyncTransactionVersion(dst, model_version);
   }
 
