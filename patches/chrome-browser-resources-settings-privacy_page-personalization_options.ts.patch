diff --git a/chrome/browser/resources/settings/privacy_page/personalization_options.ts b/chrome/browser/resources/settings/privacy_page/personalization_options.ts
index 172c29b9032fcf2f60aea7d001df42b1e0c27860..763292d736126c0c656c4510e5bbd7ead0264c80 100644
--- a/chrome/browser/resources/settings/privacy_page/personalization_options.ts
+++ b/chrome/browser/resources/settings/privacy_page/personalization_options.ts
@@ -69,7 +69,7 @@ export class SettingsPersonalizationOptionsElement extends
 
       syncStatus: Object,
 
-      // <if expr="_google_chrome and not chromeos">
+      // <if expr="_chromium and not chromeos">
       // TODO(dbeam): make a virtual.* pref namespace and set/get this normally
       // (but handled differently in C++).
       metricsReportingPref_: {
@@ -104,7 +104,7 @@ export class SettingsPersonalizationOptionsElement extends
 
   syncStatus: SyncStatus;
 
-  // <if expr="_google_chrome and not chromeos">
+  // <if expr="_chromium and not chromeos">
   private metricsReportingPref_: chrome.settingsPrivate.PrefObject;
   private showRestart_: boolean;
   // </if>
@@ -126,7 +126,7 @@ export class SettingsPersonalizationOptionsElement extends
   ready() {
     super.ready();
 
-    // <if expr="_google_chrome and not chromeos">
+    // <if expr="_chromium and not chromeos">
     const setMetricsReportingPref = (metricsReporting: MetricsReporting) =>
         this.setMetricsReportingPref_(metricsReporting);
     this.addWebUIListener('metrics-reporting-change', setMetricsReportingPref);
@@ -158,7 +158,7 @@ export class SettingsPersonalizationOptionsElement extends
         '#driveSuggestControl');
   }
 
-  // <if expr="_google_chrome and not chromeos">
+  // <if expr="_chromium and not chromeos">
   private onMetricsReportingChange_() {
     const enabled = this.$.metricsReportingControl.checked;
     this.browserProxy_.setMetricsReportingEnabled(enabled);
