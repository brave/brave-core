diff --git a/chrome/browser/resources/settings/privacy_page/personalization_options.js b/chrome/browser/resources/settings/privacy_page/personalization_options.js
index 44b414d358d17eecfbc035966c8bad6b39bc8958..6401aad7a552da2392fcfb2e68c50742dfb6f2d0 100644
--- a/chrome/browser/resources/settings/privacy_page/personalization_options.js
+++ b/chrome/browser/resources/settings/privacy_page/personalization_options.js
@@ -40,7 +40,7 @@ Polymer({
       },
     },
 
-    // <if expr="_google_chrome and not chromeos">
+    // <if expr="_chromium and not chromeos">
     // TODO(dbeam): make a virtual.* pref namespace and set/get this normally
     // (but handled differently in C++).
     /** @private {chrome.settingsPrivate.PrefObject} */
@@ -91,7 +91,7 @@ Polymer({
   ready: function() {
     this.browserProxy_ = settings.PrivacyPageBrowserProxyImpl.getInstance();
 
-    // <if expr="_google_chrome and not chromeos">
+    // <if expr="_chromium and not chromeos">
     const setMetricsReportingPref = this.setMetricsReportingPref_.bind(this);
     this.addWebUIListener('metrics-reporting-change', setMetricsReportingPref);
     this.browserProxy_.getMetricsReporting().then(setMetricsReportingPref);
@@ -115,7 +115,7 @@ Polymer({
     return !this.getPref('safebrowsing.enabled').value;
   },
 
-  // <if expr="_google_chrome and not chromeos">
+  // <if expr="_chromium and not chromeos">
   /** @private */
   onMetricsReportingChange_: function() {
     const enabled = this.$.metricsReportingControl.checked;
