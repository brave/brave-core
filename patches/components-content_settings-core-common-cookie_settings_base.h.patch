diff --git a/components/content_settings/core/common/cookie_settings_base.h b/components/content_settings/core/common/cookie_settings_base.h
index e23181772fe8d3278c3c08ab2b3bc9178847162c..e9b045ca6a3507db9fc32fd581a94c1ec9916abc 100644
--- a/components/content_settings/core/common/cookie_settings_base.h
+++ b/components/content_settings/core/common/cookie_settings_base.h
@@ -7,10 +7,53 @@
 
 #include <string>
 
+#include "base/optional.h"
 #include "components/content_settings/core/common/content_settings.h"
 
+namespace url {
+class Origin;
+}
+
 namespace content_settings {
 
+// Many CookieSettings methods handle the parameters |url|, |site_for_cookies|
+// |top_frame_origin| and |first_party_url|.
+//
+// |url| is the URL of the requested resource.
+// |site_for_cookies| is usually the URL shown in the omnibox but can also be
+// empty, e.g. for subresource loads initiated from cross-site iframes, and is
+// used to determine if a request is done in a third-party context.
+// |top_frame_origin| is the origin shown in the omnibox.
+//
+// Example:
+// https://a.com/index.html
+// <html>
+// <body>
+//   <iframe href="https://b.com/frame.html">
+//     <img href="https://a.com/img.jpg>
+//     <img href="https://b.com/img.jpg>
+//     <img href="https://c.com/img.jpg>
+//   </iframe>
+// </body>
+// </html>
+//
+// When each of these resources get fetched, |top_frame_origin| will always be
+// "https://a.com" and |site_for_cookies| is set the following:
+// https://a.com/index.html -> https://a.com/ (1p request)
+// https://b.com/frame.html -> https://a.com/ (3p request)
+// https://a.com/img.jpg -> <empty-url> (treated as 3p request)
+// https://b.com/img.jpg -> <empty-url> (3p because from cross site iframe)
+// https://c.com/img.jpg -> <empty-url> (3p request in cross site iframe)
+//
+// Content settings can be used to allow or block access to cookies.
+// When third-party cookies are blocked, an ALLOW setting will give access to
+// cookies in third-party contexts.
+// The primary pattern of each setting is matched against |url|.
+// The secondary pattern is matched against |top_frame_origin|.
+//
+// Some methods only take |url| and |first_party_url|. For |first_party_url|,
+// clients either pass a value that is like |site_for_cookies| or
+// |top_frame_origin|. This is done inconsistently and needs to be fixed.
 class CookieSettingsBase {
  public:
   CookieSettingsBase() = default;
@@ -31,12 +74,25 @@ class CookieSettingsBase {
       bool is_https) const;
 
   // Returns true if the page identified by (|url|, |first_party_url|) is
-  // allowed to access (i.e., read or write) cookies.
+  // allowed to access (i.e., read or write) cookies. |first_party_url|
+  // is used to determine third-party-ness of |url|.
   //
   // This may be called on any thread.
+  // DEPRECATED: Replace with IsCookieAccessAllowed(GURL, GURL, Origin).
   bool IsCookieAccessAllowed(const GURL& url,
                              const GURL& first_party_url) const;
 
+  // Similar to IsCookieAccessAllowed(GURL, GURL) but provides a mechanism
+  // to specify a separate |site_for_cookies|, which is used to determine
+  // whether a request is in a third_party context and |top_frame_origin|, which
+  // is used to check if there are any content_settings exceptions.
+  // |top_frame_origin| should at least be specified when |site_for_cookies| is
+  // non-empty.
+  bool IsCookieAccessAllowed(
+      const GURL& url,
+      const GURL& site_for_cookies,
+      const base::Optional<url::Origin>& top_frame_origin) const;
+
   // Returns true if the cookie set by a page identified by |url| should be
   // session only. Querying this only makes sense if |IsCookieAccessAllowed|
   // has returned true.
@@ -45,10 +101,10 @@ class CookieSettingsBase {
   bool IsCookieSessionOnly(const GURL& url) const;
 
   // A helper for applying third party cookie blocking rules.
-  virtual void GetCookieSetting(const GURL& url,
-                                const GURL& first_party_url,
-                                content_settings::SettingSource* source,
-                                ContentSetting* cookie_setting) const = 0;
+  void GetCookieSetting(const GURL& url,
+                        const GURL& first_party_url,
+                        content_settings::SettingSource* source,
+                        ContentSetting* cookie_setting) const;
 
   // Determines whether |setting| is a valid content setting for cookies.
   static bool IsValidSetting(ContentSetting setting);
@@ -56,6 +112,13 @@ class CookieSettingsBase {
   static bool IsAllowed(ContentSetting setting);
 
  private:
+  virtual void GetCookieSettingInternal(
+      const GURL& url,
+      const GURL& first_party_url,
+      bool is_third_party_request,
+      content_settings::SettingSource* source,
+      ContentSetting* cookie_setting) const = 0;
+
   DISALLOW_COPY_AND_ASSIGN(CookieSettingsBase);
 };
 
