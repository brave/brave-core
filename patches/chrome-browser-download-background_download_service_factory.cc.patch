diff --git a/chrome/browser/download/background_download_service_factory.cc b/chrome/browser/download/background_download_service_factory.cc
index 54fbadcbc0d2779bf2317ac4d4dd7dae3835a10d..c4f2ae62b0679cdf8ed072076f33f49c5a068f25 100644
--- a/chrome/browser/download/background_download_service_factory.cc
+++ b/chrome/browser/download/background_download_service_factory.cc
@@ -20,7 +20,6 @@
 #include "chrome/browser/download/deferred_client_wrapper.h"
 #include "chrome/browser/download/download_manager_utils.h"
 #include "chrome/browser/download/simple_download_manager_coordinator_factory.h"
-#include "chrome/browser/net/system_network_context_manager.h"
 #include "chrome/browser/optimization_guide/prediction/prediction_model_download_client.h"
 #include "chrome/browser/profiles/incognito_helpers.h"
 #include "chrome/browser/profiles/profile.h"
@@ -35,6 +34,7 @@
 #include "components/download/public/background_service/blob_context_getter_factory.h"
 #include "components/download/public/background_service/clients.h"
 #include "components/download/public/background_service/features.h"
+#include "components/download/public/background_service/url_loader_factory_getter.h"
 #include "components/download/public/common/simple_download_manager_coordinator.h"
 #include "components/keyed_service/core/simple_dependency_manager.h"
 #include "components/leveldb_proto/public/proto_database_provider.h"
@@ -108,6 +108,33 @@ class DownloadBlobContextGetterFactory
   raw_ptr<SimpleFactoryKey> key_;
 };
 
+void OnProfileCreated(download::URLLoaderFactoryGetterCallback callback,
+                      Profile* profile) {
+  DCHECK(callback);
+  std::move(callback).Run(profile->GetURLLoaderFactory());
+}
+
+class URLLoaderFactoryGetter : public download::URLLoaderFactoryGetter {
+ public:
+  explicit URLLoaderFactoryGetter(SimpleFactoryKey* key) : key_(key) {
+    DCHECK(key_);
+  }
+
+  URLLoaderFactoryGetter(const URLLoaderFactoryGetter&) = delete;
+  URLLoaderFactoryGetter& operator=(const URLLoaderFactoryGetter&) = delete;
+
+  ~URLLoaderFactoryGetter() override = default;
+
+ private:
+  void RetrieveURLLoaderFactory(
+      download::URLLoaderFactoryGetterCallback callback) override {
+    FullBrowserTransitionManager::Get()->RegisterCallbackOnProfileCreation(
+        key_, base::BindOnce(&OnProfileCreated, std::move(callback)));
+  }
+
+  raw_ptr<SimpleFactoryKey> key_;
+};
+
 }  // namespace
 
 // static
@@ -169,13 +196,11 @@ BackgroundDownloadServiceFactory::BuildServiceInstanceFor(
         std::make_unique<DownloadBlobContextGetterFactory>(key);
     scoped_refptr<base::SingleThreadTaskRunner> io_task_runner =
         content::GetIOThreadTaskRunner({});
-    scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory =
-        SystemNetworkContextManager::GetInstance()->GetSharedURLLoaderFactory();
 
     return download::BuildInMemoryDownloadService(
         key, std::move(clients), content::GetNetworkConnectionTracker(),
         base::FilePath(), std::move(blob_context_getter_factory),
-        io_task_runner, url_loader_factory);
+        io_task_runner, std::make_unique<::URLLoaderFactoryGetter>(key));
   } else {
     // Build download service for normal profile.
     base::FilePath storage_dir;
