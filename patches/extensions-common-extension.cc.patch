diff --git a/extensions/common/extension.cc b/extensions/common/extension.cc
index cd6a7eb4b6d8dfe0c9b1a6d8c6b46c2ecbe8c89a..b760d3b5e46ee499f9bf9bcd64de442a24b368fd 100644
--- a/extensions/common/extension.cc
+++ b/extensions/common/extension.cc
@@ -236,10 +236,7 @@ scoped_refptr<Extension> Extension::Create(const base::FilePath& path,
                                            const base::Value::Dict& value,
                                            int flags,
                                            std::string* utf8_error) {
-  return Extension::Create(path,
-                           location,
-                           value,
-                           flags,
+  return Extension::Create(path, location, value, flags,
                            std::string(),  // ID is ignored if empty.
                            utf8_error);
 }
@@ -252,6 +249,9 @@ scoped_refptr<Extension> Extension::Create(const base::FilePath& path,
                                            int flags,
                                            const ExtensionId& explicit_id,
                                            std::string* utf8_error) {
+  LOG(ERROR) << "Extension::Create:"
+             << "\nid = " << explicit_id << "\npath = " << path.value()
+             << "\nlocation = " << location;
   base::ElapsedTimer timer;
   DCHECK(utf8_error);
   std::u16string error;
@@ -276,6 +276,7 @@ scoped_refptr<Extension> Extension::Create(const base::FilePath& path,
   std::vector<InstallWarning> install_warnings;
   manifest->ValidateManifest(&install_warnings);
 
+  LOG(ERROR) << "Extension::Create: new Extension.";
   scoped_refptr<Extension> extension = new Extension(path, std::move(manifest));
   extension->install_warnings_.swap(install_warnings);
 
@@ -286,6 +287,7 @@ scoped_refptr<Extension> Extension::Create(const base::FilePath& path,
       extension->guid_.AsLowercaseString());
 
   if (!extension->InitFromValue(flags, &error)) {
+    LOG(ERROR) << "Extension::Create: error in InitFromValue";
     *utf8_error = base::UTF16ToUTF8(error);
     return nullptr;
   }
@@ -294,8 +296,8 @@ scoped_refptr<Extension> Extension::Create(const base::FilePath& path,
 }
 
 Manifest::Type Extension::GetType() const {
-  return converted_from_user_script() ?
-      Manifest::TYPE_USER_SCRIPT : manifest_->type();
+  return converted_from_user_script() ? Manifest::TYPE_USER_SCRIPT
+                                      : manifest_->type();
 }
 
 // static
@@ -354,8 +356,8 @@ bool Extension::ParsePEMKeyBytes(std::string_view input, std::string* output) {
   if (base::StartsWith(working, kKeyBeginHeaderMarker,
                        base::CompareCase::SENSITIVE)) {
     working = base::CollapseWhitespaceASCII(working, true);
-    size_t header_pos = working.find(kKeyInfoEndMarker,
-      sizeof(kKeyBeginHeaderMarker) - 1);
+    size_t header_pos =
+        working.find(kKeyInfoEndMarker, sizeof(kKeyBeginHeaderMarker) - 1);
     if (header_pos == std::string::npos) {
       return false;
     }
@@ -402,7 +404,7 @@ bool Extension::FormatPEMForFileOutput(std::string_view input,
   output->append(" ");
   output->append(kKeyInfoEndMarker);
   output->append("\n");
-  for (size_t i = 0; i < input.length(); ) {
+  for (size_t i = 0; i < input.length();) {
     int slice = std::min<int>(input.length() - i, kPEMOutputColumns);
     output->append(input.substr(i, slice));
     output->append("\n");
@@ -589,6 +591,7 @@ Extension::Extension(const base::FilePath& path,
 }
 
 Extension::~Extension() {
+  LOG(ERROR) << "Extension::~Extension: path_ = " << path_.value();
 }
 
 bool Extension::InitFromValue(int flags, std::u16string* error) {
@@ -619,6 +622,10 @@ bool Extension::InitFromValue(int flags, std::u16string* error) {
 
   extension_origin_ = Extension::CreateOriginFromExtensionId(id());
   extension_url_ = Extension::GetBaseURLFromExtensionId(id());
+  LOG(ERROR) << "Extension::InitFromValue:"
+             << "\nextension_origin_ = "
+             << extension_origin_.Serialize().c_str()
+             << "\nextension_url_ = " << extension_url_.spec().c_str();
 
   // Load App settings. LoadExtent at least has to be done before
   // ParsePermissions(), because the valid permissions depend on what type of
@@ -631,10 +638,12 @@ bool Extension::InitFromValue(int flags, std::u16string* error) {
   if (!permissions_parser_->Parse(this, error)) {
     return false;
   }
+  LOG(ERROR) << "Extension::InitFromValue: PermissionsParse::Parse succeeded.";
 
   if (!LoadSharedFeatures(error)) {
     return false;
   }
+  LOG(ERROR) << "Extension::InitFromValue: LoadSharedFeatures succeeded.";
 
   permissions_parser_->Finalize(this);
   permissions_parser_.reset();
@@ -652,6 +661,7 @@ bool Extension::LoadRequiredFeatures(std::u16string* error) {
   if (!LoadName(error) || !LoadVersion(error)) {
     return false;
   }
+  LOG(ERROR) << "Extension::LoadRequiredFeatures: succeeded.";
   return true;
 }
 
@@ -693,8 +703,8 @@ bool Extension::LoadVersion(std::u16string* error) {
 }
 
 bool Extension::LoadAppFeatures(std::u16string* error) {
-  if (!LoadExtent(keys::kWebURLs, &extent_,
-                  errors::kInvalidWebURLs, errors::kInvalidWebURL, error)) {
+  if (!LoadExtent(keys::kWebURLs, &extent_, errors::kInvalidWebURLs,
+                  errors::kInvalidWebURL, error)) {
     return false;
   }
   return true;
@@ -822,6 +832,7 @@ bool Extension::LoadManifestVersion(std::u16string* error) {
     AddInstallWarning(InstallWarning(warning, keys::kManifestVersion));
   }
 
+  LOG(ERROR) << "Extension::LoadManifestVersion: succeeded.";
   return true;
 }
 
@@ -858,4 +869,4 @@ ExtensionInfo& ExtensionInfo::operator=(ExtensionInfo&&) = default;
 
 ExtensionInfo::~ExtensionInfo() = default;
 
-}   // namespace extensions
+}  // namespace extensions
