diff --git a/third_party/blink/renderer/modules/cookie_store/cookie_store.cc b/third_party/blink/renderer/modules/cookie_store/cookie_store.cc
index a3a5963bbd7b0cfeb5005dc0b8c9ac22dde9e2c0..5effb725450b944b12ff28b4abd381797e678c94 100644
--- a/third_party/blink/renderer/modules/cookie_store/cookie_store.cc
+++ b/third_party/blink/renderer/modules/cookie_store/cookie_store.cc
@@ -228,6 +228,20 @@ KURL DefaultSiteForCookies(ExecutionContext* execution_context) {
   return scope->Url();
 }
 
+scoped_refptr<SecurityOrigin> DefaultTopFrameOrigin(
+    ExecutionContext* execution_context) {
+  DCHECK(execution_context);
+
+  if (auto* document = DynamicTo<Document>(execution_context)) {
+    // Can we avoid the copy? TopFrameOrigin is returned as const& but we need
+    // a scoped_refptr.
+    return document->TopFrameOrigin()->IsolatedCopy();
+  }
+
+  auto* scope = To<ServiceWorkerGlobalScope>(execution_context);
+  return scope->GetSecurityOrigin()->IsolatedCopy();
+}
+
 }  // namespace
 
 CookieStore::~CookieStore() = default;
@@ -450,7 +464,8 @@ CookieStore::CookieStore(
       subscription_backend_(std::move(subscription_backend)),
       change_listener_binding_(this),
       default_cookie_url_(DefaultCookieURL(execution_context)),
-      default_site_for_cookies_(DefaultSiteForCookies(execution_context)) {
+      default_site_for_cookies_(DefaultSiteForCookies(execution_context)),
+      default_top_frame_origin_(DefaultTopFrameOrigin(execution_context)) {
   DCHECK(backend_);
 }
 
@@ -474,7 +489,7 @@ ScriptPromise CookieStore::DoRead(
 
   auto* resolver = MakeGarbageCollected<ScriptPromiseResolver>(script_state);
   backend_->GetAllForUrl(
-      default_cookie_url_, default_site_for_cookies_,
+      default_cookie_url_, default_site_for_cookies_, default_top_frame_origin_,
       std::move(backend_options),
       WTF::Bind(backend_result_converter, WrapPersistent(resolver)));
   return resolver->Promise();
@@ -536,7 +551,7 @@ ScriptPromise CookieStore::DoWrite(ScriptState* script_state,
   auto* resolver = MakeGarbageCollected<ScriptPromiseResolver>(script_state);
   backend_->SetCanonicalCookie(
       std::move(canonical_cookie.value()), default_cookie_url_,
-      default_site_for_cookies_,
+      default_site_for_cookies_, default_top_frame_origin_,
       WTF::Bind(&CookieStore::OnSetCanonicalCookieResult,
                 WrapPersistent(resolver)));
   return resolver->Promise();
@@ -613,6 +628,7 @@ void CookieStore::StartObserving() {
   change_listener_binding_.Bind(
       mojo::MakeRequest(&change_listener, task_runner), task_runner);
   backend_->AddChangeListener(default_cookie_url_, default_site_for_cookies_,
+                              default_top_frame_origin_,
                               std::move(change_listener), {});
 }
 
