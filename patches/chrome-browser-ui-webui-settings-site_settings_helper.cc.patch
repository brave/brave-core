diff --git a/chrome/browser/ui/webui/settings/site_settings_helper.cc b/chrome/browser/ui/webui/settings/site_settings_helper.cc
index bc848c390ce648fe2729adb4bb0050ff7dd49375..a091796957cae020bbb847ff6ed7e33ce178cff6 100644
--- a/chrome/browser/ui/webui/settings/site_settings_helper.cc
+++ b/chrome/browser/ui/webui/settings/site_settings_helper.cc
@@ -262,6 +262,7 @@ constexpr auto kContentSettingsTypeGroupNames = std::to_array<
     // TODO(crbug.com/430494524): Implement the WebUI
     {ContentSettingsType::GEOLOCATION_WITH_OPTIONS, nullptr},
     {ContentSettingsType::DEVICE_ATTRIBUTES, nullptr},
+    BRAVE_CONTENT_SETTINGS_TYPE_GROUP_NAMES_LIST
 });
 
 static_assert(
@@ -536,6 +537,7 @@ bool HasRegisteredGroupName(ContentSettingsType type) {
 }
 
 ContentSettingsType ContentSettingsTypeFromGroupName(std::string_view name) {
+  BRAVE_SITE_SETTINGS_HELPER_CONTENT_SETTINGS_TYPE_FROM_GROUP_NAME
   for (const auto& entry : kContentSettingsTypeGroupNames) {
     // Content setting types that aren't represented in the settings UI
     // will have `nullptr` as their `name`. However, converting `nullptr`
@@ -550,6 +552,7 @@ ContentSettingsType ContentSettingsTypeFromGroupName(std::string_view name) {
 }
 
 std::string_view ContentSettingsTypeToGroupName(ContentSettingsType type) {
+  BRAVE_SITE_SETTINGS_HELPER_CONTENT_SETTINGS_TYPE_TO_GROUP_NAME
   for (const auto& entry : kContentSettingsTypeGroupNames) {
     if (type == entry.type) {
       // Content setting types that aren't represented in the settings UI
@@ -729,6 +732,7 @@ std::string SiteSettingSourceToString(const SiteSettingSource source) {
 SiteSettingSource ProviderTypeToSiteSettingsSource(
     const ProviderType provider_type) {
   switch (provider_type) {
+    BRAVE_PROVIDER_TYPE_TO_SITE_SETTINGS_SOURCE
     case ProviderType::kWebuiAllowlistProvider:
     case ProviderType::kComponentExtensionProvider:
       return SiteSettingSource::kAllowlist;
@@ -756,6 +760,7 @@ SiteSettingSource ProviderTypeToSiteSettingsSource(
 
 std::string ProviderToDefaultSettingSourceString(const ProviderType provider) {
   switch (provider) {
+    BRAVE_PROVIDER_TO_DEFAULT_SETTINGS_STRING
     case ProviderType::kPolicyProvider:
       return "policy";
     case ProviderType::kSupervisedProvider:
@@ -882,6 +887,7 @@ base::Value::Dict GetExceptionForPage(
   exception.Set(kSource, SiteSettingSourceToString(source));
   exception.Set(kIncognito, incognito);
   exception.Set(kIsEmbargoed, is_embargoed);
+  BRAVE_GET_EXCEPTION_FOR_PAGE
   return exception;
 }
 
