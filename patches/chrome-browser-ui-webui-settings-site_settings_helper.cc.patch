diff --git a/chrome/browser/ui/webui/settings/site_settings_helper.cc b/chrome/browser/ui/webui/settings/site_settings_helper.cc
index d34354c29d963cded0b9ac480847b00a31391df7..91896187382590c4ae3a69acdf98ffa5d57bd4e3 100644
--- a/chrome/browser/ui/webui/settings/site_settings_helper.cc
+++ b/chrome/browser/ui/webui/settings/site_settings_helper.cc
@@ -244,6 +244,7 @@ const ContentSettingsTypeNameEntry kContentSettingsTypeGroupNames[] = {
     {ContentSettingsType::TOP_LEVEL_TPCD_ORIGIN_TRIAL, nullptr},
     {ContentSettingsType::DISPLAY_MEDIA_SYSTEM_AUDIO, nullptr},
     {ContentSettingsType::STORAGE_ACCESS_HEADER_ORIGIN_TRIAL, nullptr},
+    BRAVE_CONTENT_SETTINGS_TYPE_GROUP_NAMES_LIST
 };
 
 static_assert(
@@ -486,6 +487,7 @@ bool HasRegisteredGroupName(ContentSettingsType type) {
 }
 
 ContentSettingsType ContentSettingsTypeFromGroupName(std::string_view name) {
+  BRAVE_SITE_SETTINGS_HELPER_CONTENT_SETTINGS_TYPE_FROM_GROUP_NAME
   for (const auto& entry : kContentSettingsTypeGroupNames) {
     // Content setting types that aren't represented in the settings UI
     // will have `nullptr` as their `name`. However, converting `nullptr`
@@ -500,6 +502,7 @@ ContentSettingsType ContentSettingsTypeFromGroupName(std::string_view name) {
 }
 
 std::string_view ContentSettingsTypeToGroupName(ContentSettingsType type) {
+  BRAVE_SITE_SETTINGS_HELPER_CONTENT_SETTINGS_TYPE_TO_GROUP_NAME
   for (const auto& entry : kContentSettingsTypeGroupNames) {
     if (type == entry.type) {
       // Content setting types that aren't represented in the settings UI
@@ -679,6 +682,7 @@ std::string SiteSettingSourceToString(const SiteSettingSource source) {
 SiteSettingSource ProviderTypeToSiteSettingsSource(
     const ProviderType provider_type) {
   switch (provider_type) {
+    BRAVE_PROVIDER_TYPE_TO_SITE_SETTINGS_SOURCE
     case ProviderType::kWebuiAllowlistProvider:
       return SiteSettingSource::kAllowlist;
     case ProviderType::kPolicyProvider:
@@ -705,6 +709,7 @@ SiteSettingSource ProviderTypeToSiteSettingsSource(
 
 std::string ProviderToDefaultSettingSourceString(const ProviderType provider) {
   switch (provider) {
+    BRAVE_PROVIDER_TO_DEFAULT_SETTINGS_STRING
     case ProviderType::kPolicyProvider:
       return "policy";
     case ProviderType::kSupervisedProvider:
