diff --git a/chrome/browser/ui/webui/settings/site_settings_helper.cc b/chrome/browser/ui/webui/settings/site_settings_helper.cc
index 2b48ad9442834e20b25f9afaabf40264dd01677d..24bc1cd367c6efce914821a895d2c4d8ac82da20 100644
--- a/chrome/browser/ui/webui/settings/site_settings_helper.cc
+++ b/chrome/browser/ui/webui/settings/site_settings_helper.cc
@@ -256,6 +256,7 @@ constexpr auto kContentSettingsTypeGroupNames = std::to_array<
     // POINTER_LOCK has been deprecated.
     {ContentSettingsType::POINTER_LOCK, nullptr},
     {ContentSettingsType::REVOKED_DISRUPTIVE_NOTIFICATION_PERMISSIONS, nullptr},
+    BRAVE_CONTENT_SETTINGS_TYPE_GROUP_NAMES_LIST
 });
 
 static_assert(
@@ -530,6 +531,7 @@ bool HasRegisteredGroupName(ContentSettingsType type) {
 }
 
 ContentSettingsType ContentSettingsTypeFromGroupName(std::string_view name) {
+  BRAVE_SITE_SETTINGS_HELPER_CONTENT_SETTINGS_TYPE_FROM_GROUP_NAME
   for (const auto& entry : kContentSettingsTypeGroupNames) {
     // Content setting types that aren't represented in the settings UI
     // will have `nullptr` as their `name`. However, converting `nullptr`
@@ -544,6 +546,7 @@ ContentSettingsType ContentSettingsTypeFromGroupName(std::string_view name) {
 }
 
 std::string_view ContentSettingsTypeToGroupName(ContentSettingsType type) {
+  BRAVE_SITE_SETTINGS_HELPER_CONTENT_SETTINGS_TYPE_TO_GROUP_NAME
   for (const auto& entry : kContentSettingsTypeGroupNames) {
     if (type == entry.type) {
       // Content setting types that aren't represented in the settings UI
@@ -723,6 +726,7 @@ std::string SiteSettingSourceToString(const SiteSettingSource source) {
 SiteSettingSource ProviderTypeToSiteSettingsSource(
     const ProviderType provider_type) {
   switch (provider_type) {
+    BRAVE_PROVIDER_TYPE_TO_SITE_SETTINGS_SOURCE
     case ProviderType::kWebuiAllowlistProvider:
     case ProviderType::kComponentExtensionProvider:
       return SiteSettingSource::kAllowlist;
@@ -750,6 +754,7 @@ SiteSettingSource ProviderTypeToSiteSettingsSource(
 
 std::string ProviderToDefaultSettingSourceString(const ProviderType provider) {
   switch (provider) {
+    BRAVE_PROVIDER_TO_DEFAULT_SETTINGS_STRING
     case ProviderType::kPolicyProvider:
       return "policy";
     case ProviderType::kSupervisedProvider:
@@ -876,6 +881,7 @@ base::Value::Dict GetExceptionForPage(
   exception.Set(kSource, SiteSettingSourceToString(source));
   exception.Set(kIncognito, incognito);
   exception.Set(kIsEmbargoed, is_embargoed);
+  BRAVE_GET_EXCEPTION_FOR_PAGE
   return exception;
 }
 
