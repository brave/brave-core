diff --git a/build/rust/run_build_script.py b/build/rust/run_build_script.py
index 0db5cb56fa2c5e8af275cfd31418068fa550a3b0..9955d4ca8f4d450dc1def4f9bf7073c2455affab 100755
--- a/build/rust/run_build_script.py
+++ b/build/rust/run_build_script.py
@@ -1,9 +1,8 @@
-#!/usr/bin/env vpython3
 
+#!/usr/bin/env vpython3
 # Copyright 2021 The Chromium Authors
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
-
 # This is a wrapper script which runs a Cargo build.rs build script
 # executable in a Cargo-like environment. Build scripts can do arbitrary
 # things and we can't support everything. Moreover, we do not WANT
@@ -23,7 +22,6 @@
 #
 # That's it. We don't even support the other standard cargo:rustc-
 # output messages.
-
 import argparse
 import io
 import os
@@ -32,24 +30,17 @@ import re
 import subprocess
 import sys
 import tempfile
-
 # Set up path to be able to import action_helpers
 sys.path.append(
     os.path.join(os.path.dirname(os.path.abspath(__file__)), os.pardir,
                  os.pardir, 'build'))
 import action_helpers
-
-
 RUSTC_VERSION_LINE = re.compile(r"(\w+): (.*)")
-
-
 def rustc_name():
   if platform.system() == 'Windows':
     return "rustc.exe"
   else:
     return "rustc"
-
-
 def host_triple(rustc_path):
   """ Works out the host rustc target. """
   args = [rustc_path, "-vV"]
@@ -60,11 +51,7 @@ def host_triple(rustc_path):
     if m:
       known_vars[m.group(1)] = m.group(2)
   return known_vars["host"]
-
-
 RUSTC_CFG_LINE = re.compile("cargo:rustc-cfg=(.*)")
-
-
 def main():
   parser = argparse.ArgumentParser(description='Run Rust build script.')
   parser.add_argument('--build-script',
@@ -80,11 +67,8 @@ def main():
   parser.add_argument('--generated-files', nargs='+', help='any generated file')
   parser.add_argument('--out-dir', required=True, help='target out dir')
   parser.add_argument('--src-dir', required=True, help='target source dir')
-
   args = parser.parse_args()
-
   rustc_path = os.path.join(args.rust_prefix, rustc_name())
-
   # We give the build script an OUT_DIR of a temporary directory,
   # and copy out only any files which gn directives say that it
   # should generate. Mostly this is to ensure we can atomically
@@ -101,12 +85,30 @@ def main():
     env["OUT_DIR"] = tempdir
     env["CARGO_MANIFEST_DIR"] = os.path.abspath(args.src_dir)
     env["HOST"] = host_triple(rustc_path)
+    env["TARGET"] = env["HOST"]
     if args.target is None:
-      env["TARGET"] = env["HOST"]
+      target = env["TARGET"]
     else:
-      env["TARGET"] = args.target
-    target_components = env["TARGET"].split("-")
-    env["CARGO_CFG_TARGET_ARCH"] = target_components[0]
+      target = args.target
+    target_components = target.split("-")
+    if len(target_components) == 2:
+      env["CARGO_CFG_TARGET_ARCH"] = target_components[0]
+      env["CARGO_CFG_TARGET_VENDOR"] = ''
+      env["CARGO_CFG_TARGET_OS"] = target_components[1]
+      env["CARGO_CFG_TARGET_ENV"] = ''
+    elif len(target_components) == 3:
+      env["CARGO_CFG_TARGET_ARCH"] = target_components[0]
+      env["CARGO_CFG_TARGET_VENDOR"] = target_components[1]
+      env["CARGO_CFG_TARGET_OS"] = target_components[2]
+      env["CARGO_CFG_TARGET_ENV"] = ''
+    elif len(target_components) == 4:
+      env["CARGO_CFG_TARGET_ARCH"] = target_components[0]
+      env["CARGO_CFG_TARGET_VENDOR"] = target_components[1]
+      env["CARGO_CFG_TARGET_OS"] = target_components[2]
+      env["CARGO_CFG_TARGET_ENV"] = target_components[3]
+    else:
+      print(f'Invalid TARGET {target}')
+      sys.exit(1)
     if args.features:
       for f in args.features:
         feature_name = f.upper().replace("-", "_")
@@ -120,31 +122,25 @@ def main():
       env["RUST_BACKTRACE"] = os.environ.get("RUST_BACKTRACE")
     if os.environ.get("RUST_LOG"):
       env["RUST_LOG"] = os.environ.get("RUST_LOG")
-
     # In the future we should, set all the variables listed here:
     # https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts
-
     proc = subprocess.run([os.path.abspath(args.build_script)],
                           env=env,
                           cwd=args.src_dir,
                           encoding='utf8',
                           capture_output=True)
-
     if proc.stderr.rstrip():
       print(proc.stderr.rstrip(), file=sys.stderr)
     proc.check_returncode()
-
     flags = ""
     for line in proc.stdout.split("\n"):
       m = RUSTC_CFG_LINE.match(line.rstrip())
       if m:
         flags = "%s--cfg\n%s\n" % (flags, m.group(1))
-
     # AtomicOutput will ensure we only write to the file on disk if what we
     # give to write() is different than what's currently on disk.
     with action_helpers.atomic_output(args.output) as output:
       output.write(flags.encode("utf-8"))
-
     # Copy any generated code out of the temporary directory,
     # atomically.
     if args.generated_files:
@@ -158,7 +154,5 @@ def main():
           with action_helpers.atomic_output(out_path) as output:
             content = input.read()
             output.write(content)
-
-
 if __name__ == '__main__':
   sys.exit(main())
