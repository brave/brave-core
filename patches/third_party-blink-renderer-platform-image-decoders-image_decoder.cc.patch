diff --git a/third_party/blink/renderer/platform/image-decoders/image_decoder.cc b/third_party/blink/renderer/platform/image-decoders/image_decoder.cc
index f208b6599164c..3bf5503d95820 100644
--- a/third_party/blink/renderer/platform/image-decoders/image_decoder.cc
+++ b/third_party/blink/renderer/platform/image-decoders/image_decoder.cc
@@ -55,6 +55,10 @@
 #include "third_party/blink/renderer/platform/image-decoders/avif/crabbyavif_image_decoder.h"
 #endif
 
+#if BUILDFLAG(ENABLE_JXL_DECODER)
+#include "third_party/blink/renderer/platform/image-decoders/jxl/jxl_image_decoder.h"
+#endif
+
 namespace blink {
 
 namespace {
@@ -82,6 +86,11 @@ cc::ImageType FileExtensionToImageType(String image_extension) {
   if (image_extension == "avif") {
     return cc::ImageType::kAVIF;
   }
+#endif
+#if BUILDFLAG(ENABLE_JXL_DECODER)
+  if (image_extension == "jxl") {
+    return cc::ImageType::kJXL;
+  }
 #endif
   return cc::ImageType::kInvalid;
 }
@@ -203,6 +212,12 @@ String SniffMimeTypeInternal(scoped_refptr<SegmentReader> reader) {
     return "image/avif";
   }
 #endif
+#if BUILDFLAG(ENABLE_JXL_DECODER)
+  if (base::FeatureList::IsEnabled(features::kJXL) &&
+      JXLImageDecoder::MatchesJXLSignature(fast_reader)) {
+    return "image/jxl";
+  }
+#endif
 
   return String();
 }
@@ -318,6 +333,13 @@ std::unique_ptr<ImageDecoder> ImageDecoder::CreateByMimeType(
           alpha_option, high_bit_depth_decoding_option, color_behavior,
           max_decoded_bytes, animation_option);
     }
+#endif
+#if BUILDFLAG(ENABLE_JXL_DECODER)
+  } else if (base::FeatureList::IsEnabled(features::kJXL) &&
+             mime_type == "image/jxl") {
+    decoder = std::make_unique<JXLImageDecoder>(
+        alpha_option, high_bit_depth_decoding_option, color_behavior,
+        max_decoded_bytes);
 #endif
   }
