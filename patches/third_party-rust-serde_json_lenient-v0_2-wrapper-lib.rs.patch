diff --git a/third_party/rust/serde_json_lenient/v0_2/wrapper/lib.rs b/third_party/rust/serde_json_lenient/v0_2/wrapper/lib.rs
index c5e39138b1d25c8a534e97b9f79eeee5b8fba33b..bd61d4f60f5abff19b84dbe350f9110bdcef3c31 100644
--- a/third_party/rust/serde_json_lenient/v0_2/wrapper/lib.rs
+++ b/third_party/rust/serde_json_lenient/v0_2/wrapper/lib.rs
@@ -3,6 +3,7 @@
 // found in the LICENSE file.
 
 mod visitor;
+#[path = "../../../../../brave/chromium_src/third_party/rust/serde_json_lenient/v0_2/wrapper/large_integers.rs"] mod large_integers;
 
 use crate::visitor::ValueVisitor;
 
@@ -79,6 +80,8 @@ mod ffi {
         /// The maximum recursion depth to walk while parsing nested JSON
         /// objects. JSON beyond the specified depth will be ignored.
         max_depth: usize,
+        /// Allows 64-bit integers rather than trying to fit than as double.
+        allow_64bit_numbers: bool,
     }
 }
 
@@ -122,7 +125,7 @@ pub fn decode_json(
 
     let target = visitor::DeserializationTarget::List { ctx };
 
-    let result = deserializer.deserialize_any(ValueVisitor::new(target, options.max_depth));
+    let result = deserializer.deserialize_any(ValueVisitor::new(target, options.max_depth, options.allow_64bit_numbers));
     match result.and(deserializer.end()) {
         Ok(()) => true,
         Err(err) => {
