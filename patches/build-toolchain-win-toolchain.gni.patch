diff --git a/build/toolchain/win/toolchain.gni b/build/toolchain/win/toolchain.gni
index cb4e939c3b258ca08baba96a4e96d0281fd58024..4088b8c3b8ce186fb40881a0563671fe7a4da739 100644
--- a/build/toolchain/win/toolchain.gni
+++ b/build/toolchain/win/toolchain.gni
@@ -114,6 +114,10 @@ template("single_msvc_toolchain") {
       # lld-link includes a replacement for lib.exe that can produce thin
       # archives and understands bitcode (for lto builds).
       link = "${_clang_bin_path}/lld-link${_exe}"
+      cc_linkflags = ""
+      if (toolchain_has_rust) {
+        rust_linkflags = ""
+      }
       if (host_os == "win") {
         # Flip the slashes so that copy/paste of the commands works.
         link = string_replace(link, "/", "\\")
@@ -121,11 +125,18 @@ template("single_msvc_toolchain") {
       lib = "$link /lib"
       if (host_os != "win") {
         # See comment adding --rsp-quoting to $cl above for more information.
-        link = "$link --rsp-quoting=posix"
+        cc_linkflags += " --rsp-quoting=posix"
+        if (toolchain_has_rust) {
+          rust_linkflags += " -Clink-arg=--rsp-quoting=posix"
+        }
       }
     } else {
       lib = "lib.exe"
       link = "link.exe"
+      cc_linkflags = ""
+      if (toolchain_has_rust) {
+        rust_linkflags = ""
+      }
     }
 
     # If possible, pass system includes as flags to the compiler.  When that's
@@ -145,7 +156,25 @@ template("single_msvc_toolchain") {
 
     if (host_os != "win" || (use_lld && defined(invoker.sys_lib_flags))) {
       linker_wrapper = ""
-      sys_lib_flags = "${invoker.sys_lib_flags} "  # Note trailing space.
+      sys_lib_flags = "${invoker.sys_lib_flags}"
+
+      # TODO(thakis): Remove once crbug.com/1300005 is fixed
+      assert(toolchain_args.current_cpu == "x64" ||
+                 toolchain_args.current_cpu == "x86" ||
+                 toolchain_args.current_cpu == "arm" ||
+                 toolchain_args.current_cpu == "arm64",
+             "Only supports x64, x86, arm and arm64 CPUs")
+      if (toolchain_args.current_cpu == "x64") {
+        sys_lib_flags += " /MACHINE:X64"
+      } else if (toolchain_args.current_cpu == "x86") {
+        sys_lib_flags += " /MACHINE:X86"
+      } else if (toolchain_args.current_cpu == "arm") {
+        sys_lib_flags += " /MACHINE:ARM"
+      } else if (toolchain_args.current_cpu == "arm64") {
+        sys_lib_flags += " /MACHINE:ARM64"
+      }
+
+      sys_lib_flags += " "  # Note trailing space.
     } else {
       # link.exe must be run under a wrapper to set up the environment
       # (it needs %LIB% set to find libraries), and to work around its bugs.
@@ -243,7 +272,7 @@ template("single_msvc_toolchain") {
 
       if (toolchain_args.current_cpu == "arm64") {
         if (toolchain_is_clang) {
-          ml = "${cl_prefix}${_clang_bin_path}/clang-cl${_exe} --target=arm64-windows"
+          ml = "${cl_prefix}${_clang_bin_path}/clang-cl${_exe} --target=aarch64-pc-windows"
           if (host_os == "win") {
             # Flip the slashes so that copy/paste of the command works.
             ml = string_replace(ml, "/", "\\")
@@ -307,7 +336,7 @@ template("single_msvc_toolchain") {
       rustc_wrapper = rebase_path("//build/rust/rustc_wrapper.py")
       rustc = rebase_path("${rust_sysroot}/bin/rustc", root_build_dir)
       rust_sysroot_relative_to_out = rebase_path(rust_sysroot, root_out_dir)
-      rustc_windows_args = " -Clinker=$link $rustc_common_args"
+      rustc_windows_args = " -Clinker=$link$rust_linkflags $rustc_common_args"
 
       tool("rust_staticlib") {
         libname = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
@@ -321,7 +350,7 @@ template("single_msvc_toolchain") {
         outputs = [ libname ]
 
         rspfile_content = "{{rustdeps}} {{externs}}"
-        command = "\"$python_path\" \"$rustc_wrapper\" --rustc=$rustc --depfile=$depfile --rsp=$rspfile -- $rustc_windows_args --emit=dep-info=$depfile,link -o $libname LDFLAGS RUSTENV {{rustenv}}"
+        command = "\"$python_path\" \"$rustc_wrapper\" --target-windows --rustc=$rustc --depfile=$depfile --rsp=$rspfile -- $rustc_windows_args --emit=dep-info=$depfile,link -o $libname LDFLAGS RUSTENV {{rustenv}}"
         rust_sysroot = rust_sysroot_relative_to_out
       }
 
@@ -345,7 +374,7 @@ template("single_msvc_toolchain") {
         description = "RUST {{output}}"
         outputs = [ rlibname ]
 
-        command = "\"$python_path\" \"$rustc_wrapper\" --rustc=$rustc --depfile=$depfile -- $rustc_windows_args --emit=dep-info=$depfile,link -o $rlibname {{rustdeps}} {{externs}} LDFLAGS RUSTENV {{rustenv}}"
+        command = "\"$python_path\" \"$rustc_wrapper\" --target-windows --rustc=$rustc --depfile=$depfile -- $rustc_windows_args --emit=dep-info=$depfile,link -o $rlibname {{rustdeps}} {{externs}} LDFLAGS RUSTENV {{rustenv}}"
         rust_sysroot = rust_sysroot_relative_to_out
       }
 
@@ -367,7 +396,7 @@ template("single_msvc_toolchain") {
         runtime_outputs = outputs
 
         rspfile_content = "{{rustdeps}} {{externs}}"
-        command = "\"$python_path\" \"$rustc_wrapper\" --rustc=$rustc --depfile=$depfile --rsp=$rspfile -- $rustc_windows_args --emit=dep-info=$depfile,link -o $exename LDFLAGS {{ldflags}} $sys_lib_flags /PDB:$pdbname RUSTENV {{rustenv}}"
+        command = "\"$python_path\" \"$rustc_wrapper\" --target-windows --rustc=$rustc --depfile=$depfile --rsp=$rspfile -- $rustc_windows_args --emit=dep-info=$depfile,link -o $exename LDFLAGS {{ldflags}} $sys_lib_flags /PDB:$pdbname RUSTENV {{rustenv}}"
         rust_sysroot = rust_sysroot_relative_to_out
       }
 
@@ -398,7 +427,7 @@ template("single_msvc_toolchain") {
         ]
 
         rspfile_content = "{{rustdeps}} {{externs}}"
-        command = "\"$python_path\" \"$rustc_wrapper\" --rustc=$rustc --depfile=$depfile --rsp=$rspfile -- $rustc_windows_args --emit=dep-info=$depfile,link -o $dllname LDFLAGS {{ldflags}} $sys_lib_flags /PDB:$pdbname /IMPLIB:$libname RUSTENV {{rustenv}}"
+        command = "\"$python_path\" \"$rustc_wrapper\" --target-windows --rustc=$rustc --depfile=$depfile --rsp=$rspfile -- $rustc_windows_args --emit=dep-info=$depfile,link -o $dllname LDFLAGS {{ldflags}} $sys_lib_flags /PDB:$pdbname /IMPLIB:$libname RUSTENV {{rustenv}}"
         rust_sysroot = rust_sysroot_relative_to_out
 
         # Since the above commands only updates the .lib file when it changes,
@@ -432,7 +461,7 @@ template("single_msvc_toolchain") {
         runtime_outputs = outputs
 
         rspfile_content = "{{rustdeps}} {{externs}}"
-        command = "\"$python_path\" \"$rustc_wrapper\" --rustc=$rustc --depfile=$depfile --rsp=$rspfile -- $rustc_windows_args --emit=dep-info=$depfile,link -o $dllname LDFLAGS {{ldflags}} $sys_lib_flags /PDB:$pdbname RUSTENV {{rustenv}}"
+        command = "\"$python_path\" \"$rustc_wrapper\" --target-windows --rustc=$rustc --depfile=$depfile --rsp=$rspfile -- $rustc_windows_args --emit=dep-info=$depfile,link -o $dllname LDFLAGS {{ldflags}} $sys_lib_flags /PDB:$pdbname RUSTENV {{rustenv}}"
         rust_sysroot = rust_sysroot_relative_to_out
 
         # Since the above commands only updates the .lib file when it changes,
@@ -444,8 +473,7 @@ template("single_msvc_toolchain") {
 
     tool("alink") {
       rspfile = "{{output}}.rsp"
-      command =
-          "$linker_wrapper$lib /OUT:{{output}} /nologo {{arflags}} @$rspfile"
+      command = "$linker_wrapper$lib \"/OUT:{{output}}\" /nologo {{arflags}} \"@$rspfile\""
       description = "LIB {{output}}"
       outputs = [
         # Ignore {{output_extension}} and always use .lib, there's no reason to
@@ -468,7 +496,7 @@ template("single_msvc_toolchain") {
       rspfile = "${dllname}.rsp"
       pool = "//build/toolchain:link_pool($default_toolchain)"
 
-      command = "$linker_wrapper$link /OUT:$dllname /nologo ${sys_lib_flags}/IMPLIB:$libname /DLL /PDB:$pdbname @$rspfile"
+      command = "$linker_wrapper$link$cc_linkflags \"/OUT:$dllname\" /nologo ${sys_lib_flags} \"/IMPLIB:$libname\" /DLL \"/PDB:$pdbname\" \"@$rspfile\""
 
       default_output_extension = ".dll"
       default_output_dir = "{{root_out_dir}}"
@@ -503,7 +531,7 @@ template("single_msvc_toolchain") {
       rspfile = "${dllname}.rsp"
       pool = "//build/toolchain:link_pool($default_toolchain)"
 
-      command = "$linker_wrapper$link /OUT:$dllname /nologo ${sys_lib_flags}/DLL /PDB:$pdbname @$rspfile"
+      command = "$linker_wrapper$link$cc_linkflags \"/OUT:$dllname\" /nologo ${sys_lib_flags} /DLL \"/PDB:$pdbname\" \"@$rspfile\""
 
       default_output_extension = ".dll"
       default_output_dir = "{{root_out_dir}}"
@@ -526,7 +554,7 @@ template("single_msvc_toolchain") {
       rspfile = "$exename.rsp"
       pool = "//build/toolchain:link_pool($default_toolchain)"
 
-      command = "$linker_wrapper$link /OUT:$exename /nologo ${sys_lib_flags} /PDB:$pdbname @$rspfile"
+      command = "$linker_wrapper$link$cc_linkflags \"/OUT:$exename\" /nologo ${sys_lib_flags} \"/PDB:$pdbname\" \"@$rspfile\""
 
       default_output_extension = ".exe"
       default_output_dir = "{{root_out_dir}}"
@@ -610,6 +638,19 @@ template("msvc_toolchain") {
         is_debug = false
         is_component_build = false
         is_official_build = false
+        use_clang_coverage = false
+        use_sanitizer_coverage = false
+        generate_linker_map = false
+
+        # On Windows, cross-compile for x86 changes the `host_toolchain`
+        # into x86 too so as to avoid compiling things twice (see
+        # //build/config/BUILDCONFIG.gn). But the prebuilt stdlib does not
+        # exist for Windows x86 and it's exceedingly difficult to get it
+        # built from a single build_rust.py invocation. So we just don't follow
+        # along in this toolchain, and always use the host cpu type (which will
+        # be x64). Things built with this toolchain are never built for the
+        # target_cpu anyhow, so the optimization there does not benefit them.
+        current_cpu = host_cpu
       }
     }
   }
@@ -674,20 +715,6 @@ template("win_toolchains") {
     if (use_lld) {
       sys_lib_flags =
           "-libpath:$_clang_lib_dir ${win_toolchain_data.libpath_lldlink_flags}"
-
-      # TODO(thakis): Remove once crbug.com/1300005 is fixed
-      assert(toolchain_arch == "x64" || toolchain_arch == "x86" ||
-                 toolchain_arch == "arm" || toolchain_arch == "arm64",
-             "Only supports x64, x86, arm and arm64 CPUs")
-      if (toolchain_arch == "x64") {
-        sys_lib_flags += " /MACHINE:X64"
-      } else if (toolchain_arch == "x86") {
-        sys_lib_flags += " /MACHINE:X86"
-      } else if (toolchain_arch == "arm") {
-        sys_lib_flags += " /MACHINE:ARM"
-      } else if (toolchain_arch == "arm64") {
-        sys_lib_flags += " /MACHINE:ARM64"
-      }
     }
 
     toolchain_args = {
