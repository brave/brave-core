diff --git a/content/browser/renderer_host/render_frame_host_impl.cc b/content/browser/renderer_host/render_frame_host_impl.cc
index 622142dcf64df8bf50a6ae5448fdf97c097e49c6..9d2df8cac2856da73dec81b9a94f32b57d795f2e 100644
--- a/content/browser/renderer_host/render_frame_host_impl.cc
+++ b/content/browser/renderer_host/render_frame_host_impl.cc
@@ -5097,6 +5097,7 @@ net::IsolationInfo RenderFrameHostImpl::ComputeIsolationInfoInternal(
     candidate_site_for_cookies = net::SiteForCookies(top_frame_site);
   }
 
+  BRAVE_RENDER_FRAME_HOST_IMPL_COMPUTE_ISOLATION_INFO_INTERNAL
   std::optional<base::UnguessableToken> nonce =
       ComputeNonce(is_credentialless, fenced_frame_nonce_for_navigation);
   return net::IsolationInfo::Create(request_type, top_frame_origin,
@@ -5107,6 +5108,7 @@ net::IsolationInfo RenderFrameHostImpl::ComputeIsolationInfoInternal(
 std::optional<base::UnguessableToken> RenderFrameHostImpl::ComputeNonce(
     bool is_credentialless,
     std::optional<base::UnguessableToken> fenced_frame_nonce_for_navigation) {
+  BRAVE_RENDER_FRAME_HOST_IMPL_COMPUTE_NONCE
   // If it's a credentialless frame tree, use its nonce even if it's within a
   // fenced frame tree to maintain the guarantee that a credentialless frame
   // tree has a unique nonce.
@@ -5166,6 +5168,7 @@ bool RenderFrameHostImpl::IsThirdPartyStoragePartitioningEnabled(
     // current value of net::features::ThirdPartyStoragePartitioning.
     if (rfs_document_data_for_storage_key->runtime_feature_state_read_context()
             .IsDisableThirdPartyStoragePartitioning3Enabled()) {
+      BRAVE_RENDER_FRAME_HOST_IMPL_IS_THIRD_PARTY_STORAGE_PARTITIONING_ENABLED_CHECK_IF_CAN_BE_DISABLED
       return false;
     }
     // Compile the list of third-party origins we need to check in addition to
@@ -5183,6 +5186,7 @@ bool RenderFrameHostImpl::IsThirdPartyStoragePartitioningEnabled(
     if (rfs_document_data_for_storage_key->runtime_feature_state_read_context()
             .IsDisableThirdPartyStoragePartitioning3EnabledForThirdParty(
                 third_party_origins)) {
+      BRAVE_RENDER_FRAME_HOST_IMPL_IS_THIRD_PARTY_STORAGE_PARTITIONING_ENABLED_CHECK_IF_CAN_BE_DISABLED
       return false;
     }
   }
@@ -9654,6 +9658,7 @@ void RenderFrameHostImpl::CreateNewWindow(
         dom_storage_context, params->session_storage_namespace_id);
   }
 
+  BRAVE_RENDER_FRAME_HOST_IMPL_CREATE_NEW_WINDOW
   if (IsCredentialless() || IsNestedWithinFencedFrame() ||
       CoopSuppressOpener(/*opener=*/this)) {
     params->opener_suppressed = true;
