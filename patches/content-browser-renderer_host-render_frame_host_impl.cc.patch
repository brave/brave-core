diff --git a/content/browser/renderer_host/render_frame_host_impl.cc b/content/browser/renderer_host/render_frame_host_impl.cc
index b58c9d354fed0793810a491e0564b8bf163dccc9..53d4848caeaacf2f0579e52f0eca864e8e1e1180 100644
--- a/content/browser/renderer_host/render_frame_host_impl.cc
+++ b/content/browser/renderer_host/render_frame_host_impl.cc
@@ -5154,6 +5154,7 @@ net::IsolationInfo RenderFrameHostImpl::ComputeIsolationInfoInternal(
     candidate_site_for_cookies = net::SiteForCookies(top_frame_site);
   }
 
+  BRAVE_RENDER_FRAME_HOST_IMPL_COMPUTE_ISOLATION_INFO_INTERNAL
   std::optional<base::UnguessableToken> nonce =
       ComputeNonce(is_credentialless, fenced_frame_nonce_for_navigation);
   return net::IsolationInfo::Create(request_type, top_frame_origin,
@@ -5164,6 +5165,7 @@ net::IsolationInfo RenderFrameHostImpl::ComputeIsolationInfoInternal(
 std::optional<base::UnguessableToken> RenderFrameHostImpl::ComputeNonce(
     bool is_credentialless,
     std::optional<base::UnguessableToken> fenced_frame_nonce_for_navigation) {
+  BRAVE_RENDER_FRAME_HOST_IMPL_COMPUTE_NONCE
   // If it's a credentialless frame tree, use its nonce even if it's within a
   // fenced frame tree to maintain the guarantee that a credentialless frame
   // tree has a unique nonce.
@@ -5221,6 +5223,7 @@ bool RenderFrameHostImpl::IsThirdPartyStoragePartitioningEnabled(
   if (rfs_document_data_for_storage_key && unpartitioned_key_allowed &&
       rfs_document_data_for_storage_key->runtime_feature_state_read_context()
           .IsThirdPartyStoragePartitioningUserBypassEnabled()) {
+    BRAVE_RENDER_FRAME_HOST_IMPL_IS_THIRD_PARTY_STORAGE_PARTITIONING_ENABLED_CHECK_IF_CAN_BE_DISABLED
     return false;
   }
 
@@ -9754,6 +9757,7 @@ void RenderFrameHostImpl::CreateNewWindow(
         dom_storage_context, params->session_storage_namespace_id);
   }
 
+  BRAVE_RENDER_FRAME_HOST_IMPL_CREATE_NEW_WINDOW
   if (IsCredentialless() || IsNestedWithinFencedFrame() ||
       CoopSuppressOpener(/*opener=*/this)) {
     params->opener_suppressed = true;
