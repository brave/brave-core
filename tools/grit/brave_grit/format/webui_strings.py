# Copyright (c) 2025 The Brave Authors. All rights reserved.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at https://mozilla.org/MPL/2.0/.

import os

from grit.node import message

IDS_PREFIX_LEN = 4


def GetFormatter(type):
    if type == 'webui_header':
        return _FormatHeader
    if type == 'webui_ts':
        return _FormatTsEnum
    raise ValueError(f'Invalid type: {type}')


def _GetMessageAndIds(root):
    tids = root.GetIdMap()
    grouped_messages = {}

    for item in root.ActiveDescendants():
        if not isinstance(item, message.MessageNode):
            continue

        if 'webui' not in item.formatter_data:
            continue

        webui = item.formatter_data['webui']
        name = item.attrs['name']

        if webui not in grouped_messages:
            grouped_messages[webui] = []

        grouped_messages[webui].append((name[IDS_PREFIX_LEN:], tids[name]))

    return grouped_messages


def _FormatHeader(root, lang, output_dir='.'):
    yield '''\
// This file is automatically generated by GRIT. Do not edit.
#pragma once

#include "ui/base/webui/web_ui_util.h"

'''
    messages = _GetMessageAndIds(root)
    for group in sorted(_GetMessageAndIds(root).keys()):
        yield f'''\
namespace {group} {{
  inline constexpr auto kLocalizedStrings = std::to_array<
    webui::LocalizedString>({{
'''

        is_first = True
        for name, id in messages[group]:
            if not is_first:
                yield ',\n'
            yield f'      // IDS_{name}\n      {{"{name}", {id}}}'
            is_first = False

        yield '''});
}
'''


def _FormatTsEnum(root, lang, output_dir='.'):
    # Output the header
    yield '''\
// This file is automatically generated by GRIT. Do not edit.

'''

    messages = _GetMessageAndIds(root)
    for group in sorted(messages.keys()):
        yield f'''\
export const enum {''.join(word.capitalize() for word in group.split('_'))}Strings {{
'''

        for name, _ in messages[group]:
            yield f'  {name} = "{name}",\n'

        yield '''\n}'''
