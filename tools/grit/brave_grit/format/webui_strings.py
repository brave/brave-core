# Copyright (c) 2025 The Brave Authors. All rights reserved.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at https://mozilla.org/MPL/2.0/.

from collections import defaultdict

from grit.node import message


def GetFormatter(type):
    if type == 'webui_header':
        return _FormatHeader
    if type == 'webui_ts':
        return _FormatTsEnum
    raise ValueError(f'Invalid type: {type}')


def _GetMessageAndIds(root):
    """Collects webui messages grouped by their webui attribute value."""

    IDS_PREFIX_LEN = 4

    ids_map = root.GetIdMap()
    grouped_messages = defaultdict(list)

    for item in root.ActiveDescendants():
        if not isinstance(item, message.MessageNode):
            continue

        webui = item.formatter_data.get('webui')
        if not webui:
            continue

        name = item.attrs['name']
        # Strip 'IDS_' prefix from message names.
        grouped_messages[webui].append((name[IDS_PREFIX_LEN:], ids_map[name]))

    return grouped_messages


def _FormatHeader(root, lang, output_dir='.'):
    """Generates C++ header with webui::LocalizedString arrays for each group."""

    yield ('// This file is automatically generated by GRIT. Do not edit.\n\n'
           '#pragma once\n\n'
           '#include <array>\n\n'
           '#include "ui/base/webui/web_ui_util.h"\n\n'
           'namespace webui {\n')

    for group, messages in _GetWebuiMessageAndIds(root).items():
        # Create constexpr array of LocalizedString structs.
        yield (f'\ninline constexpr auto k{group}Strings = '
               'std::to_array<LocalizedString>({\n')

        for name, ids_value in messages:
            yield f'    {{"{name}", {ids_value}}},\n'

        yield '});\n'

    yield '\n}  // namespace webui\n'


def _FormatTsEnum(root, lang, output_dir='.'):
    """Generates TypeScript enums with string constants for webui usage."""

    yield '// This file is automatically generated by GRIT. Do not edit.\n'

    for group, messages in _GetWebuiMessageAndIds(root).items():
        yield f'\nexport const enum {group}Strings {{\n'

        for name, _ in messages:
            # Enum values are the same as their keys and IDS_ for easy grepping.
            yield f'  {name} = "{name}",\n'

        yield '}\n'
