#!/bin/bash
set -exu

# GPG Signing key fingerprint table
#
# These GPG signing key fingerprints are accurate as of the
# dates below. These keys will be used for signing the packages
# that we ship. We will update this table as keys are changed.
#
# RPM SIGNING REQUIRES THE SIGNING SUBKEY, SO THESE ARE THE SIGNING SUBKEY
# FINGERPRINTS, NOT THE MASTER FINGERPRINTS. UNFORTUNATELY THIS IS A DIVERGENCE
# FROM THE APTLY SIGNING SCRIPT, WHICH USES SIGNING SUBKEYS.
#
#
# Date          Channel       Fingerprint           Full Key
#
# 06/26/2019    Release       0x4FE13824E3FFC656    E85FFA8E2E90B40B33ED39274FE13824E3FFC656
# 12/29/2018    Beta          0x0B31DBA06A8A26F9    9228DBCE20DDE5EC46488DE90B31DBA06A8A26F9
# 12/29/2018    Dev           0x0B31DBA06A8A26F9    9228DBCE20DDE5EC46488DE90B31DBA06A8A26F9
# 12/29/2018    Nightly       0x0B31DBA06A8A26F9    9228DBCE20DDE5EC46488DE90B31DBA06A8A26F9

BUCKET=${1:-brave-browser-rpm-staging-nightly}
GPG_KEY_ID=${2:-D8BAD4DE7EE17AF52A834B2D0BB75829C2D4E821} # Defaults to New Brave Software signing key
GPG_KEY_SHORT_ID=${GPG_KEY_ID:(-8)}

if [ -z "${CHANNEL}" ]; then
    echo "Error: Environment variable CHANNEL not set! Exitting..."
    exit 1
fi

if [[ $2 == 0x* ]]; then
    echo "Error: Please pass the Full GPG KEY ID to sign with! (i.e. 'E85FFA8E2E90B40B33ED39274FE13824E3FFC656')"
    exit 1
fi

if [ "$GPG_KEY_ID" = "E85FFA8E2E90B40B33ED39274FE13824E3FFC656" ]; then
  KEY_NAME=brave-core.asc
else
  KEY_NAME=brave-core-nightly.asc
fi
KEY_FILE=/tmp/${KEY_NAME}
TMP_REPO=/tmp/rpm_repo

echo "%_signature gpg
%_gpg_path $HOME/.gnupg
%_gpg_name Brave Software
%_gpgbin /usr/bin/gpg" > ~/.rpmmacros

rm -rf $TMP_REPO
mkdir -pv $TMP_REPO/x86_64

# if .sig files exist remove them
rm -rf dist/*.sig

# Check whether each rpm is signed
for i in $(ls dist/*.rpm); do
    if ! rpm -v -K $i | grep "key ID ${GPG_KEY_SHORT_ID,,}: OK"; then
        if [ "${CHANNEL}" = "release" ]; then
            echo "No signature found, running \"./rpm-resign.exp $GPG_KEY_ID $i (REDACTED GPG_PASSPHRASE)\""
            ./rpm-resign.exp $GPG_KEY_ID $i $GPG_PASSPHRASE
            # removes passphrase from gpg-agent cache
            # to prevent rpm-resign.exp failure due
            # to an error like:
            # send: spawn id exp4 not open
            #     while executing
            # "send -- $PASSPHRASE\r"
            echo RELOADAGENT | gpg-connect-agent
        else
            rpm --resign $i
        fi
    fi
done

# Ensure the rpm has the correct signature before continuing
# NOTE: rpm displays the short key id, all lower case
rpm -v -K dist/*.rpm | grep "key ID ${GPG_KEY_SHORT_ID,,}: OK"

# if .sig files exist remove them
rm -rf dist/*.sig

cp dist/*.rpm $TMP_REPO/x86_64/

for arch in $TMP_REPO/x86_64 ; do
	createrepo -v --deltas $arch/
done
for arch in $TMP_REPO/x86_64 ; do
	createrepo -v --update --deltas $arch/
done

gpg --export --armor ${GPG_KEY_ID} > ${KEY_FILE}
aws s3 cp ${KEY_FILE} s3://${BUCKET}/${KEY_NAME}
aws s3api put-object-acl --acl public-read --bucket ${BUCKET} --key ${KEY_NAME}
aws s3 sync --acl public-read $TMP_REPO/ s3://$BUCKET/
