# Copyright (c) 2024 The Brave Authors. All rights reserved.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at https://mozilla.org/MPL/2.0/.

import argparse
import os
import sys
import pathlib

from distutils.dir_util import copy_tree
from lib.config import PLATFORM, enable_verbose_mode, is_verbose_mode
from lib.util import execute_stdout, scoped_cwd

SRC_DIR = os.path.normpath(os.path.join(os.path.dirname(__file__), '..', '..'))


def main():
    if PLATFORM != 'darwin':
        # Only applicable to macOS
        sys.exit(0)
    args = parse_args()
    if not args.yes:
        check_root()
    if args.verbose:
        enable_verbose_mode()

    create_required_spm_resources()
    generate_lldbinit()


def parse_args():
    parser = argparse.ArgumentParser(description='Bootstrap the iOS project')
    parser.add_argument('-v',
                        '--verbose',
                        action='store_true',
                        help='Prints the output of the subprocesses')
    parser.add_argument('-y',
                        '--yes',
                        '--assume-yes',
                        action='store_true',
                        help='Run non-interactively by assuming "yes" to all '
                        'prompts.')
    return parser.parse_args()


def check_root():
    if os.geteuid() == 0:  # pylint: disable=no-member
        print("We suggest not running this as root, unless you're really sure.")
        choice = input("Do you want to continue? [y/N]: ")
        if choice not in ('y', 'Y'):
            sys.exit(0)


def create_required_spm_resources():
    env = os.environ.copy()
    with scoped_cwd('.'):
        args = ['npm', 'run', 'ios_pack_js']
        if is_verbose_mode():
            args += ['--verbose']
        execute_stdout(args, env)
    ios_current_link = os.path.join(SRC_DIR, 'out', 'ios_current_link')
    pathlib.Path(ios_current_link).mkdir(parents=True, exist_ok=True)
    pathlib.Path(os.path.join(ios_current_link, 'args.xcconfig')).touch()
    if not os.path.exists(
            os.path.join(ios_current_link, 'BraveCore.xcframework')):
        placeholders_dir = os.path.join(SRC_DIR, 'brave', 'ios', 'brave-ios',
                                        'BraveCore', 'placeholders')
        copy_tree(placeholders_dir, ios_current_link, verbose=is_verbose_mode())


def generate_lldbinit():
    contents = """# This file is generated by ios_bootstrap.py
#
# This allows proper source mapping to builds made with the GN arg
# strip_absolute_paths_from_debug_symbols set to true.
settings set target.source-map "../.." "%s"
    """ % SRC_DIR
    lldbinit_file = os.path.join(SRC_DIR, 'brave', 'ios', 'brave-ios', 'App',
                                 'Configuration', 'LLDBInit')
    with open(lldbinit_file, 'w') as f:
        f.write(contents)


if __name__ == '__main__':
    sys.exit(main())
