// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

[
  {
    "namespace": "ipfs",
    "description": "Use the <code>chrome.ipfs</code> API to control IPFS functionality.",
    "compiler_options": {
      "implemented_in": "brave/browser/extensions/api/ipfs_api.h"
    },
    "events": [
    ],
    "functions": [
      {
        "name": "getIpnsKeysList",
        "type": "function",
        "description": "Get list of available p2p keys",
        "parameters": [
          {
            "name": "callback",
            "type": "function",
            "description": "Function called when keys list are fetched",
            "parameters": [
              {
                "name": "keys",
                "type": "string",
                "description": "json stringified avalable keys list"
              }
            ]
          }
        ]
      },
      {
        "name": "getIpfsPeersList",
        "type": "function",
        "description": "Get list of peers",
        "parameters": [
          {
            "name": "callback",
            "type": "function",
            "description": "Function called when the peers list is fetched",
            "parameters": [
              {
                "name": "peers",
                "type": "string",
                "description": "json stringified avalable peers list"
              }
            ]
          }
        ]
      },
      {
        "name": "removeIpfsPeer",
        "type": "function",
        "description": "Removes ipfs peer",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "description": "The id of a peer"
          },
          {
            "name": "address",
            "type": "string",
            "description": "The address of a peer"
          },
          {
            "name": "callback",
            "type": "function",
            "description": "Function called when the peer is removed",
            "parameters": [
              {
                "name": "success",
                "type": "boolean",
                "description": "result of operation"
              }
            ]
          }
        ]
      },
      {
        "name": "addIpfsPeer",
        "type": "function",
        "description": "Adds new ipfs peer",
        "parameters": [
          {
            "name": "value",
            "type": "string",
            "description": "The name of new peer"
          },
          {
            "name": "callback",
            "type": "function",
            "description": "Function called when peer is created",
            "parameters": [
              {
                "name": "success",
                "type": "boolean",
                "description": "result of config update operation"
              }
            ]
          }
        ]
      },
      {
        "name": "addIpnsKey",
        "type": "function",
        "description": "Adds new ipns key",
        "parameters": [
          {
            "name": "name",
            "type": "string",
            "description": "The name of new key"
          },
          {
            "name": "callback",
            "type": "function",
            "description": "Function called when key is created",
            "parameters": [
              {
                "name": "result",
                "type": "string",
                "description": "json stringified created key information"
              }
            ]
          }
        ]
      },
      {
        "name": "rotateKey",
        "type": "function",
        "description": "Rotate default ipns key",
        "parameters": [
          {
            "name": "name",
            "type": "string",
            "description": "The name of oldkey key"
          },
          {
            "name": "callback",
            "type": "function",
            "description": "Function called when key is rotated",
            "parameters": [
              {
                "name": "result",
                "type": "boolean",
                "description": "json stringified created key information"
              }
            ]
          }
        ]
      },
      {
        "name": "removeIpnsKey",
        "type": "function",
        "description": "Removes existing ipns key",
        "parameters": [
          {
            "name": "name",
            "type": "string",
            "description": "The name of removed key"
          },
          {
            "name": "callback",
            "type": "function",
            "description": "Function called when key is removed",
            "parameters": [
              {
                "name": "result",
                "type": "string",
                "description": "removed key name"
              }
            ]
          }
        ]
      },
      {
        "name": "getResolveMethodList",
        "type": "function",
        "description": "Get methods for resolving IPFS URIs",
        "parameters": [
          {
            "name": "callback",
            "type": "function",
            "description": "Function called when IPFS resolve methods list are fetched",
            "parameters": [
              {
                "name": "types",
                "type": "string",
                "description": "json stringified avalable IPFS resolve methods list"
              }
            ]
          }
        ]
      }, {
        "name": "getIPFSEnabled",
        "type": "function",
        "description": "Get to see if the IPFS feature flag is enabled",
        "parameters": [
          {
            "name": "callback",
            "type": "function",
            "description": "Function called with enabled status",
            "parameters": [
              {
                "name": "enabled",
                "type": "boolean"
              }
            ]
          }
        ]
      }, {
        "name": "getResolveMethodType",
        "type": "function",
        "description": "Obtains the gateway setting for IPFS",
        "parameters": [
          {
            "name": "callback",
            "type": "function",
            "description": "Function called with enabled status",
            "parameters": [
              {
                "name": "type",
                "type": "string"
              }
            ]
          }
        ]
      }, {
        "name": "launch",
        "type": "function",
        "description": "Called to launch the IPFS daemon",
        "parameters": [
          {
            "type": "function",
            "name": "callback",
            "parameters": [
              {
                "name": "success",
                "type": "boolean"
              }
            ]
          }
        ]
      }, {
        "name": "shutdown",
        "type": "function",
        "description": "Called to shutdown the IPFS daemon",
        "parameters": [
          {
            "type": "function",
            "name": "callback",
            "parameters": [
              {
                "name": "success",
                "type": "boolean"
              }
            ]
          }
        ]
      }, {
        "name": "getConfig",
        "type": "function",
        "description": "Called to get the IPFS config path",
        "parameters": [
        {
            "type": "function",
            "name": "callback",
            "parameters": [
              {
                "name": "success",
                "type": "boolean"
              }, {
                "name": "path",
                "type": "string"
              }
            ]
          }
        ]
      }, {
        "name": "getExecutableAvailable",
        "type": "function",
        "description": "Called to determine if a local node is installed",
        "parameters": [
          {
            "type": "function",
            "name": "callback",
            "parameters": [
              {
                "name": "available",
                "type": "boolean"
              }
            ]
          }
        ]
      }, {
        "name": "resolveIPFSURI",
        "type": "function",
        "description": "Converts an IPFS URI into its gateway URL",
        "parameters": [
          {
            "type": "string",
            "name": "uri"
          }, {
            "type": "function",
            "name": "callback",
            "parameters": [
              {
                "name": "gateway",
                "type": "string"
              }
            ]
          }
        ]
      },
      {
        "name": "validateGatewayUrl",
        "type": "function",
        "description": "Validates gateway url",
        "parameters": [
          {
            "name": "url",
            "type": "string",
            "description": "The url to validate"
          },
          {
            "name": "callback",
            "type": "function",
            "description": "Function called when url is validated",
            "parameters": [
              {
                "name": "result",
                "type": "boolean",
                "description": "True if gateway is valid otherwise false"
              }
            ]
          }
        ]
      }, {
        "name": "getSettings",
        "type": "function",
        "description": "Returns list of ipfs settings",
        "parameters": [
          {
            "name": "callback",
            "type": "function",
            "description": "Function called with settings list",
            "parameters": [
              {
                "name": "settings",
                "type": "string"
              }
            ]
          }
        ]
      }, {
        "name": "setResolveMethod",
        "type": "function",
        "description": "Returns list of ipfs settings",
        "parameters": [
          {
            "name": "resolve_method",
            "type": "string",
            "description": "ask/disabled/gateway/local"
          },
          {
            "name": "callback",
            "type": "function",
            "description": "Function called with status",
            "parameters": [
              {
                "name": "status",
                "type": "boolean"
              }
            ]
          }
        ]
      }, {
        "name": "setPublicGateway",
        "type": "function",
        "description": "Sets public gateway value",
        "parameters": [
          {
            "name": "url",
            "type": "string",
            "description": "Public gateway url"
          },
          {
            "name": "callback",
            "type": "function",
            "description": "Function called with status",
            "parameters": [
              {
                "name": "status",
                "type": "boolean"
              }
            ]
          }
        ]
      }, {
      "name": "setPublicNFTGateway",
      "type": "function",
      "description": "Sets public NFT gateway value",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "description": "Public NFT gateway url"
        },
        {
          "name": "callback",
          "type": "function",
          "description": "Function called with status",
          "parameters": [
            {
              "name": "status",
              "type": "boolean"
            }
          ]
        }
      ]
    }, {
        "name": "setAutoRedirectToConfiguredGatewayEnabled",
        "type": "function",
        "description": "Sets whether IPFS resouceces should be forwarded to the configured gateway",
        "parameters": [
          {
            "name": "value",
            "type": "boolean",
            "description": "value"
          },
          {
            "name": "callback",
            "type": "function",
            "description": "Function called with status",
            "parameters": [
              {
                "name": "status",
                "type": "boolean"
              }
            ]
          }
        ]
      }, {
        "name": "setGatewayFallbackEnabled",
        "type": "function",
        "description": "Returns list of ipfs settings",
        "parameters": [
          {
            "name": "value",
            "type": "boolean",
            "description": "value"
          },
          {
            "name": "callback",
            "type": "function",
            "description": "Function called with status",
            "parameters": [
              {
                "name": "status",
                "type": "boolean"
              }
            ]
          }
        ]
      }
    ],
    "types": [
    ],
    "properties": {
    }
  }
]
