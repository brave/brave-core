import("//brave/build/config.gni")
import("//build/buildflag_header.gni")
import("//build/util/branding.gni")
import("//extensions/buildflags/buildflags.gni")
import("//mojo/public/tools/bindings/mojom.gni")

declare_args() {
  brave_services_key = ""
}

if (is_official_build) {
  assert(brave_services_key != "")
}

buildflag_header("brave_services_key") {
  header = "brave_services_key.h"
  flags = [ "BRAVE_SERVICES_KEY=\"$brave_services_key\"" ]
}

brave_common_visibility_targets = [
  ":*",
  "//brave:browser_dependencies",
  "//brave:child_dependencies",
  "//brave/browser/*",
  "//brave/ios/browser/*",
  "//brave/renderer/*",
  "//brave/test/*",
  "//brave/utility/*",
  "//chrome/common/*",
  "//chrome/browser/*",
  "//chrome/renderer/*",
  "//chrome/utility/*",
]

source_set("channel_info") {
  visibility = brave_common_visibility_targets

  if (is_linux) {
    sources = [
      "brave_channel_info_posix.cc",
      "brave_channel_info_posix.h",
    ]

    deps = [
      "//base:base",
      "//base:logging_buildflags",
      "//components/version_info:version_info",
    ]

    configs += [ "//brave/build/linux:linux_channel_names" ]
  }
}

source_set("network_constants") {
  visibility = brave_common_visibility_targets +
               # These are layering violation and need to be fixed
               [
                 "//brave/components/sync/driver:unit_tests",
                 "//components/content_settings/core/browser",
                 "//components/sync/driver",
               ]

  sources = [
    "network_constants.cc",
    "network_constants.h",
  ]
}

source_set("pref_names") {
  visibility = brave_common_visibility_targets +
               # These are layering violation and need to be fixed
               [
                 "//brave/components/brave_shields/browser",
                 "//brave/components/p3a",
                 "//brave/components/binance/browser",
                 "//brave/ios/app",
                 "//components/content_settings/core/browser",
                 "//components/omnibox/browser",
               ]

  sources = [
    "pref_names.cc",
    "pref_names.h",
  ]

  deps = [
    "//components/gcm_driver:gcm_buildflags",
    "//extensions/buildflags:buildflags",
  ]
}

source_set("switches") {
  visibility = brave_common_visibility_targets

  sources = [
    "brave_switches.cc",
    "brave_switches.h",
  ]

  deps = [ "//base" ]
}

source_set("common") {
  visibility = brave_common_visibility_targets +
               # These are layering violation and need to be fixed
               [
                 "//brave/vendor/bat-native-ads:ads",
                 "//brave/components/p3a",
                 "//brave/components/brave_webtorrent/browser",
                 "//brave/components/brave_referrals/browser",
                 "//brave/components/brave_ads/browser",
                 "//brave/components/brave_wallet/renderer",
                 "//brave/components/content_settings/renderer",
                 "//brave/components/external_intents/android",
                 "//brave/components/webcompat_reporter/browser",
               ]
  if (!is_android && !is_ios) {
    visibility += [ "//brave/components/ipfs/test:brave_ipfs_browser_tests" ]
  }

  deps = []

  sources = [
    "brave_channel_info.cc",
    "brave_channel_info.h",
    "brave_constants.cc",
    "brave_constants.h",
    "brave_features.cc",
    "brave_features.h",
    "brave_paths.cc",
    "brave_paths.h",
    "brave_services_key_helper.cc",
    "brave_services_key_helper.h",
    "resource_bundle_helper.cc",
    "resource_bundle_helper.h",
    "url_constants.cc",
    "url_constants.h",
    "webui_url_constants.cc",
    "webui_url_constants.h",
  ]

  public_deps = [ ":brave_services_key" ]

  if (!is_android && !is_ios) {
    deps += [ "//brave/common/importer" ]
  }

  if (enable_extensions) {
    sources += [
      "extensions/brave_extensions_api_provider.cc",
      "extensions/brave_extensions_api_provider.h",
      "extensions/brave_extensions_client.cc",
      "extensions/brave_extensions_client.h",
      "extensions/whitelist.cc",
      "extensions/whitelist.h",
    ]

    deps += [
      "//brave/components/brave_component_updater/browser",
      "//extensions/common:common_constants",
    ]

    public_deps += [ "extensions/api" ]
  }

  deps += [
    ":mojo_bindings",
    ":network_constants",
    ":pref_names",
    ":switches",
    "//base",
    "//brave/chromium_src:common",
    "//brave/extensions:common",
    "//components/version_info:channel",
    "//extensions/buildflags",
    "//services/service_manager",
    "//ui/base",
  ]

  if (!is_ios) {
    sources += [
      "brave_content_client.cc",
      "brave_content_client.h",
    ]

    deps += [
      "//brave/components/resources",
      "//brave/components/resources:static_resources_grit",
      "//chrome/common",
      "//chrome/common:channel_info",
      "//chrome/common:constants",
      "//components/resources",
      "//content/public/common",
      "//third_party/widevine/cdm:buildflags",
    ]
  }
}

config("constants_configs") {
  visibility = brave_common_visibility_targets +
               # These are layering violation and need to be fixed
               [ "//chrome/tools/build/mac:infoplist_strings_util" ]
  defines = []
  if (is_mac) {
    defines += [ "BRAVE_PRODUCT_STRING=\"$chrome_product_full_name\"" ]
  }
}

mojom("mojo_bindings") {
  sources = [ "brave_renderer_configuration.mojom" ]

  deps = [ "//mojo/public/mojom/base" ]
}
