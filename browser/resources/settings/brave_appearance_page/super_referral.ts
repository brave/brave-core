// Copyright (c) 2020 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// you can obtain one at https://mozilla.org/MPL/2.0/.

import {PolymerElement} from 'chrome://resources/polymer/v3_0/polymer/polymer_bundled.min.js';
import {assert} from 'chrome://resources/js/assert.js';
import {I18nMixin, I18nMixinInterface} from 'chrome://resources/cr_elements/i18n_mixin.js'
import {loadTimeData} from "../i18n_setup.js"
import {AppearanceBrowserProxy, AppearanceBrowserProxyImpl} from '../appearance_page/appearance_browser_proxy.js';
import {getTemplate} from './super_referral.html.js'

/**
 * ID for autogenerated themes. Should match
 * |ThemeService::kAutogeneratedThemeID|.
 */
const AUTOGENERATED_THEME_ID = 'autogenerated_theme_id';

const SettingsBraveAppearanceSuperReferralElementBase = I18nMixin(PolymerElement) as {
  new (): PolymerElement & I18nMixinInterface
}

/**
 * 'settings-brave-appearance-theme' is the settings page area containing
 * brave's themes settings.
 */

export class SettingsBraveAppearanceSuperReferralElement extends
    SettingsBraveAppearanceSuperReferralElementBase {
  static get is() {
    return 'settings-brave-appearance-super-referral'
  }

  static get template() {
    return getTemplate()
  }

  static get properties() {
    return {
      /**
       * Preferences state.
       */
      prefs: {
        type: Object,
        notify: true,
      },

      useSystemTheme_: {
        type: Boolean,
        value: false,  // Can only be true on Linux, but value exists everywhere.
      }
    }
  }

  static get observers() {
    return [
      'themeChanged_(prefs.extensions.theme.id.value, useSystemTheme_)',

      // <if expr="is_linux and not chromeos_ash">
      // NOTE: this pref only exists on Linux.
      'useSystemThemePrefChanged_(prefs.extensions.theme.use_system.value)',
      // </if>
    ]
  }

  prefs: any
  private useSystemTheme_: boolean

  private themeUrl_: string
  private themeSublabel_: string
  // Sync with ThemesOption enum in ViewCounterService
  private themeValues_ = {
    DEFAULT: 0,
    SUPER_REFERRAL: 1
  }
  private appearanceBrowserProxy_: AppearanceBrowserProxy = AppearanceBrowserProxyImpl.getInstance()


  private getSuperReferralThemeName_() {
    return loadTimeData.getString('superReferralThemeName')
  }
  /**
   * Open URL for either current theme or the theme gallery.
   */
  private openThemeUrl_() {
    window.open(this.themeUrl_ || loadTimeData.getString('themesGalleryUrl'),
      undefined, 'noreferrer');
  }

  private onUseDefaultTap_() {
    this.appearanceBrowserProxy_.useDefaultTheme();
  }

  // <if expr="is_linux and not chromeos_ash">
  private useSystemThemePrefChanged_(useSystemTheme: boolean) {
    this.useSystemTheme_ = useSystemTheme;
  }

  /**
   * Whether to show the "USE CLASSIC" button.
   */
  private showUseClassic_(themeId: string, useSystemTheme: boolean): boolean {
    return !!themeId || useSystemTheme;
  }

  /**
   * Whether to show the "USE GTK+" button.
   */
  private showUseSystem_(themeId: string, useSystemTheme: boolean) {
    return (!!themeId || !useSystemTheme) &&
        !this.appearanceBrowserProxy_.isChildAccount();
  }

  /**
   * Whether to show the secondary area where "USE CLASSIC"
   *     and "USE GTK+" buttons live.
   */
  private showThemesSecondary_(themeId: string, useSystemTheme: boolean) {
    return this.showUseClassic_(themeId, useSystemTheme) ||
        this.showUseSystem_(themeId, useSystemTheme);
  }

  private onUseSystemTap_() {
    this.appearanceBrowserProxy_.useGtkTheme();
  }
  // </if>

  private themeChanged_(themeId: string, useSystemTheme: boolean) {
    if (this.prefs == undefined || useSystemTheme == undefined) {
      return;
    }

    if (themeId.length > 0 && themeId != AUTOGENERATED_THEME_ID) {
      assert(!useSystemTheme);

      this.appearanceBrowserProxy_.getThemeInfo(themeId).then(info => {
        this.themeSublabel_ = info.name;
      });

      this.themeUrl_ = 'https://chrome.google.com/webstore/detail/' + themeId;
      return;
    }

    this.themeUrl_ = '';

    if (themeId == AUTOGENERATED_THEME_ID) {
      this.themeSublabel_ = this.i18n('chromeColors');
      return;
    }

    let i18nId;
    // <if expr="is_linux and not chromeos_ash">
    i18nId = useSystemTheme ? 'gtkTheme' : 'classicTheme';
    // </if>
    // <if expr="not is_linux or chromeos_ash">
    i18nId = 'chooseFromWebStore';
    // </if>
    this.themeSublabel_ = this.i18n(i18nId);
  }
}

customElements.define(SettingsBraveAppearanceSuperReferralElement.is, SettingsBraveAppearanceSuperReferralElement)

