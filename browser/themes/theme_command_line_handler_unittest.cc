// Copyright 2025 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "chrome/browser/themes/theme_command_line_handler.h"

#include "base/command_line.h"
#include "build/build_config.h"
#include "chrome/browser/themes/theme_service.h"
#include "chrome/browser/themes/theme_service_factory.h"
#include "chrome/browser/themes/theme_service_test_utils.h"
#include "chrome/common/chrome_switches.h"
#include "chrome/test/base/testing_profile.h"
#include "content/public/test/browser_task_environment.h"
#include "testing/gtest/include/gtest/gtest.h"
#include "third_party/skia/include/core/SkColor.h"
#include "ui/base/mojom/themes.mojom.h"

namespace {

class ThemeCommandLineHandlerTest : public testing::Test {
 public:
  void SetUp() override {
    profile_ = std::make_unique<TestingProfile>();
    theme_service_ = ThemeServiceFactory::GetForProfile(profile_.get());
    command_line_ =
        std::make_unique<base::CommandLine>(base::CommandLine::NO_PROGRAM);
  }

 protected:
  content::BrowserTaskEnvironment task_environment_;
  std::unique_ptr<TestingProfile> profile_;
  raw_ptr<ThemeService> theme_service_;
  std::unique_ptr<base::CommandLine> command_line_;
};

TEST_F(ThemeCommandLineHandlerTest, ProcessUserColorSwitch) {
  command_line_->AppendSwitchASCII(switches::kSetUserColor, "0,255,128");

  EXPECT_EQ(std::nullopt, theme_service_->GetUserColor());

  ThemeCommandLineHandler::ProcessThemeCommandLineSwitches(command_line_.get(),
                                                           theme_service_);

  EXPECT_EQ(SkColorSetRGB(0, 255, 128), theme_service_->GetUserColor());
  EXPECT_EQ(ThemeService::kUserColorThemeID, theme_service_->GetThemeID());
}

TEST_F(ThemeCommandLineHandlerTest, ProcessColorSchemeSwitch) {
  command_line_->AppendSwitchASCII(switches::kSetColorScheme, "dark");

  EXPECT_EQ(ThemeService::BrowserColorScheme::kSystem,
            theme_service_->GetBrowserColorScheme());

  ThemeCommandLineHandler::ProcessThemeCommandLineSwitches(command_line_.get(),
                                                           theme_service_);

  EXPECT_EQ(ThemeService::BrowserColorScheme::kDark,
            theme_service_->GetBrowserColorScheme());
}

TEST_F(ThemeCommandLineHandlerTest, ProcessColorSchemeSwitchLight) {
  command_line_->AppendSwitchASCII(switches::kSetColorScheme, "light");

  ThemeCommandLineHandler::ProcessThemeCommandLineSwitches(command_line_.get(),
                                                           theme_service_);

  EXPECT_EQ(ThemeService::BrowserColorScheme::kLight,
            theme_service_->GetBrowserColorScheme());
}

TEST_F(ThemeCommandLineHandlerTest, ProcessColorSchemeSwitchSystem) {
  theme_service_->SetBrowserColorScheme(
      ThemeService::BrowserColorScheme::kDark);
  EXPECT_EQ(ThemeService::BrowserColorScheme::kDark,
            theme_service_->GetBrowserColorScheme());

  command_line_->AppendSwitchASCII(switches::kSetColorScheme, "system");

  ThemeCommandLineHandler::ProcessThemeCommandLineSwitches(command_line_.get(),
                                                           theme_service_);

  EXPECT_EQ(ThemeService::BrowserColorScheme::kSystem,
            theme_service_->GetBrowserColorScheme());
}

TEST_F(ThemeCommandLineHandlerTest, ProcessDefaultThemeSwitch) {
  theme_service_->BuildAutogeneratedThemeFromColor(SK_ColorBLUE);
  EXPECT_TRUE(theme_service_->UsingAutogeneratedTheme());

  command_line_->AppendSwitch(switches::kSetDefaultTheme);

  ThemeCommandLineHandler::ProcessThemeCommandLineSwitches(command_line_.get(),
                                                           theme_service_);

  EXPECT_TRUE(theme_service_->UsingDefaultTheme());
  EXPECT_FALSE(theme_service_->UsingAutogeneratedTheme());
}

TEST_F(ThemeCommandLineHandlerTest, ProcessGrayscaleSwitch) {
  command_line_->AppendSwitchASCII(switches::kSetGrayscaleTheme, "true");

  EXPECT_FALSE(theme_service_->GetIsGrayscale());

  ThemeCommandLineHandler::ProcessThemeCommandLineSwitches(command_line_.get(),
                                                           theme_service_);

  EXPECT_TRUE(theme_service_->GetIsGrayscale());
}

TEST_F(ThemeCommandLineHandlerTest, ProcessGrayscaleSwitchFalse) {
  theme_service_->SetIsGrayscale(true);
  EXPECT_TRUE(theme_service_->GetIsGrayscale());

  command_line_->AppendSwitchASCII(switches::kSetGrayscaleTheme, "false");

  ThemeCommandLineHandler::ProcessThemeCommandLineSwitches(command_line_.get(),
                                                           theme_service_);

  EXPECT_FALSE(theme_service_->GetIsGrayscale());
}

TEST_F(ThemeCommandLineHandlerTest, ProcessColorVariantSwitch) {
  command_line_->AppendSwitchASCII(switches::kSetColorVariant, "tonal_spot");

  EXPECT_EQ(ui::mojom::BrowserColorVariant::kSystem,
            theme_service_->GetBrowserColorVariant());

  ThemeCommandLineHandler::ProcessThemeCommandLineSwitches(command_line_.get(),
                                                           theme_service_);

  EXPECT_EQ(ui::mojom::BrowserColorVariant::kTonalSpot,
            theme_service_->GetBrowserColorVariant());
}

TEST_F(ThemeCommandLineHandlerTest, ProcessColorVariantSwitchNeutral) {
  command_line_->AppendSwitchASCII(switches::kSetColorVariant, "neutral");

  ThemeCommandLineHandler::ProcessThemeCommandLineSwitches(command_line_.get(),
                                                           theme_service_);

  EXPECT_EQ(ui::mojom::BrowserColorVariant::kNeutral,
            theme_service_->GetBrowserColorVariant());
}

TEST_F(ThemeCommandLineHandlerTest, ProcessColorVariantSwitchVibrant) {
  command_line_->AppendSwitchASCII(switches::kSetColorVariant, "vibrant");

  ThemeCommandLineHandler::ProcessThemeCommandLineSwitches(command_line_.get(),
                                                           theme_service_);

  EXPECT_EQ(ui::mojom::BrowserColorVariant::kVibrant,
            theme_service_->GetBrowserColorVariant());
}

TEST_F(ThemeCommandLineHandlerTest, ProcessColorVariantSwitchExpressive) {
  command_line_->AppendSwitchASCII(switches::kSetColorVariant, "expressive");

  ThemeCommandLineHandler::ProcessThemeCommandLineSwitches(command_line_.get(),
                                                           theme_service_);

  EXPECT_EQ(ui::mojom::BrowserColorVariant::kExpressive,
            theme_service_->GetBrowserColorVariant());
}

TEST_F(ThemeCommandLineHandlerTest, ProcessUserColorAndVariantTogether) {
  command_line_->AppendSwitchASCII(switches::kSetUserColor, "255,100,50");
  command_line_->AppendSwitchASCII(switches::kSetColorVariant, "vibrant");

  ThemeCommandLineHandler::ProcessThemeCommandLineSwitches(command_line_.get(),
                                                           theme_service_);

  EXPECT_EQ(SkColorSetRGB(255, 100, 50), theme_service_->GetUserColor());
  EXPECT_EQ(ui::mojom::BrowserColorVariant::kVibrant,
            theme_service_->GetBrowserColorVariant());
  EXPECT_EQ(ThemeService::kUserColorThemeID, theme_service_->GetThemeID());
}

TEST_F(ThemeCommandLineHandlerTest, ProcessEmptyCommandLine) {
  EXPECT_TRUE(theme_service_->UsingDefaultTheme());

  ThemeCommandLineHandler::ProcessThemeCommandLineSwitches(command_line_.get(),
                                                           theme_service_);

  EXPECT_TRUE(theme_service_->UsingDefaultTheme());
  EXPECT_FALSE(theme_service_->UsingAutogeneratedTheme());
}

}  // namespace
