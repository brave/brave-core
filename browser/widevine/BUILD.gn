# Copyright (c) 2023 The Brave Authors. All rights reserved.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at https://mozilla.org/MPL/2.0/.

import("//third_party/widevine/cdm/widevine.gni")

if (is_win) {
  import("//brave/build/win/sign.gni")
}

assert(enable_widevine)

source_set("widevine") {
  # Remove when https://github.com/brave/brave-browser/issues/10644 is resolved
  check_includes = false
  deps = [
    ":constants",
    "//base",
    "//brave/app:brave_generated_resources_grit",
    "//brave/components/constants",
    "//chrome/common",
    "//components/component_updater/",
    "//components/content_settings/core/common",
    "//components/permissions",
    "//components/pref_registry",
    "//components/prefs",
    "//components/subresource_filter/content/browser",
    "//components/vector_icons",
    "//content/public/browser",
    "//content/public/common",
    "//third_party/widevine/cdm:buildflags",
    "//third_party/widevine/cdm:headers",
    "//ui/base",
    "//url",
  ]

  sources = [
    "widevine_permission_request.cc",
    "widevine_permission_request.h",
    "widevine_utils.cc",
    "widevine_utils.h",
  ]
}

source_set("constants") {
  sources = [ "constants.h" ]
}

source_set("unittest") {
  testonly = true

  sources = [ "widevine_cdm_component_installer_unittest.cc" ]
  deps = [
    "//testing/gtest",
    "//third_party/widevine/cdm:buildflags",
  ]
}

source_set("browser_tests") {
  testonly = true
  defines = [ "HAS_OUT_OF_PROC_TEST_RUNNER" ]

  sources = [
    "widevine_permission_request_browsertest.cc",
    "widevine_prefs_migration_browsertest.cc",
  ]

  deps = [
    ":constants",
    ":widevine",
    "//base",
    "//brave/browser",
    "//brave/common",
    "//brave/components/constants",
    "//chrome/browser",
    "//chrome/browser:browser_process",
    "//chrome/browser/profiles:profile",
    "//chrome/browser/ui",
    "//chrome/common",
    "//chrome/test:test_support_ui",
    "//components/prefs",
    "//content/public/browser",
    "//content/test:test_support",
    "//testing/gtest",
    "//third_party/widevine/cdm:buildflags",
    "//ui/views",
    "//url",
  ]
}

if (is_win && !skip_signing) {
  template("sig_file") {
    assert(defined(invoker.flags), "Need flags in $target_name.")
    action(target_name) {
      forward_variables_from(invoker,
                             [
                               "sources",
                               "outputs",
                               "deps",
                             ])

      script = "//brave/script/run.py"
      inputs =
          [ "//third_party/widevine/scripts/signature_generator_python3.py" ]
      args = [
        "PYTHONPATH=" +
            rebase_path("//brave/third_party/macholib", root_build_dir),
        "--",

        # We use vpython3 to have access to the `cryptography` library.
        "vpython3",
        rebase_path(
            "//third_party/widevine/scripts/signature_generator_python3.py",
            root_build_dir),
        "--input_file",
        rebase_path(sources[0], root_build_dir),
        "--output_file",
        rebase_path(outputs[0], root_build_dir),
        "--flags",
        invoker.flags,
      ]
    }
  }
  sig_file("brave_exe_sig") {
    flags = "1"
    sources = [ "$root_out_dir/presigned_binaries/brave.exe" ]
    outputs = [ "$root_out_dir/brave.exe.sig" ]
    deps = [ "//brave:signed_brave_exe" ]
  }
  sig_file("chrome_dll_sig") {
    flags = "0"
    sources = [ "$root_out_dir/presigned_binaries/chrome.dll" ]
    outputs = [ "$root_out_dir/chrome.dll.sig" ]
    deps = [ "//brave:signed_chrome_dll" ]
  }
}
