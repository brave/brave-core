/* Copyright (c) 2024 The Brave Authors. All rights reserved.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at https://mozilla.org/MPL/2.0/. */

#include "brave/browser/ui/webui/cr_components/theme_color_picker/brave_theme_color_picker_handler.h"

#include <utility>
#include <vector>

#include "chrome/browser/ui/webui/cr_components/theme_color_picker/customize_chrome_colors.h"
#include "chrome/common/themes/autogenerated_theme_util.h"
#include "ui/base/l10n/l10n_util.h"

namespace {
// Create a GM2 chrome color.
theme_color_picker::mojom::ChromeColorPtr CreateChromeColor(
    chrome_colors::ColorInfo color_info) {
  auto theme_colors = GetAutogeneratedThemeColors(color_info.color);
  auto color = theme_color_picker::mojom::ChromeColor::New();
  color->name = l10n_util::GetStringUTF8(color_info.label_id);
  color->seed = color_info.color;
  color->background = theme_colors.active_tab_color;
  color->foreground = theme_colors.frame_color;
  color->variant = ui::mojom::BrowserColorVariant::kSystem;
  return color;
}
}  // namespace

BraveThemeColorPickerHandler::BraveThemeColorPickerHandler(
    mojo::PendingReceiver<theme_color_picker::mojom::ThemeColorPickerHandler>
        pending_handler,
    mojo::PendingRemote<theme_color_picker::mojom::ThemeColorPickerClient>
        pending_client,
    NtpCustomBackgroundService* ntp_custom_background_service,
    content::WebContents* web_contents)
    : ThemeColorPickerHandler(std::move(pending_handler),
                              std::move(pending_client),
                              ntp_custom_background_service,
                              web_contents) {}

void BraveThemeColorPickerHandler::SetSeedColor(
    SkColor seed_color,
    ui::mojom::BrowserColorVariant variant) {
  theme_service_->BuildAutogeneratedThemeFromColor(seed_color);
}

void BraveThemeColorPickerHandler::GetChromeColors(
    bool is_dark_mode,
    bool extended_list,
    GetChromeColorsCallback callback) {
  if (extended_list) {
    ThemeColorPickerHandler::GetChromeColors(is_dark_mode, extended_list,
                                             std::move(callback));
    return;
  }
  std::vector<theme_color_picker::mojom::ChromeColorPtr> colors;
  for (const auto& color_info : kCustomizeChromeColors) {
    colors.push_back(CreateChromeColor(color_info));
  }
  std::move(callback).Run(std::move(colors));
}
