// Copyright (c) 2025 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// You can obtain one at https://mozilla.org/MPL/2.0/.

module brave_new_tab_page_refresh.mojom;

struct BraveBackground {
  string author;
  string image_url;
  string link;
};

enum SelectedBackgroundType {
  kBrave,
  kCustom,
  kSolid,
  kGradient,
};

struct SelectedBackground {
  SelectedBackgroundType type;
  string value;
};

struct SponsoredImageLogo {
  string alt;
  string destination_url;
  string image_url;
};

struct SponsoredImageBackground {
  string type;
  string wallpaper_id;
  string creative_instance_id;
  string campaign_id;
  string image_url;
  SponsoredImageLogo? logo;
};

struct SearchEngineInfo {
  int64 prepopulate_id;
  string name;
  string keyword;
  string host;
  string favicon_url;
};

struct EventDetails {
  bool alt_key;
  bool ctrl_key;
  bool meta_key;
  bool shift_key;
};

struct TopSite {
  string title;
  string url;
  string favicon;
};

enum TopSitesListKind {
  kCustom,
  kMostVisited
};

struct ShieldsStats {
  double ads_blocked;
  double bandwidth_saved_bytes;
};

// WebUI-side handler for notifications from the browser.
interface NewTabPage {
  OnBackgroundsUpdated();
  OnSearchStateUpdated();
  OnTopSitesUpdated();
  OnClockStateUpdated();
  OnShieldsStatsUpdated();
};

// Browser-side handler for requests from the WebUI page.
interface NewTabPageHandler {

  // Sets the NewTabPage remote interface that will receive notifications from
  // the browser.
  SetNewTabPage(pending_remote<NewTabPage> page);

  // Gets or sets whether the user has enabled background images or colors on
  // the new tab page.
  GetBackgroundsEnabled() => (bool enabled);
  SetBackgroundsEnabled(bool enabled) => ();

  // Gets or sets whether the user has enabled sponsored background images.
  GetSponsoredImagesEnabled() => (bool enabled);
  SetSponsoredImagesEnabled(bool enabled) => ();

  // Returns the current collection of Brave background images.
  GetBraveBackgrounds() => (array<BraveBackground> backgrounds);

  // Returns the list of custom background images supplied by the user.
  GetCustomBackgrounds() => (array<string> backgrounds);

  // Returns the user-selected or default background.
  GetSelectedBackground() => (SelectedBackground? background);

  // Returns sponsored image background info, if a sponsored image should be
  // displayed to the user.
  GetSponsoredImageBackground() => (SponsoredImageBackground? background);

  // Saves the provided background as the user's selected background.
  SelectBackground(SelectedBackground background) => ();

  // Displays a file select dialog for selecting custom background images and
  // returns a value indicating whether any image files were selected. If
  // images were selected, they are added to the user's profile in the
  // background.
  ShowCustomBackgroundChooser() => (bool images_selected);

  // Removes the specified custom image background from the list of available
  // backgrounds.
  RemoveCustomBackground(string background_url) => ();

  // Notifies the browser that the user has clicked the sponsored image logo.
  NotifySponsoredImageLogoClicked(string creative_instance_id,
                                  string destination_url,
                                  string wallpaper_id) => ();

  // Gets or sets whether the search box is displayed on the NTP.
  GetShowSearchBox() => (bool show_search_box);
  SetShowSearchBox(bool show_search_box) => ();

  // Gets or sets whether search suggestions are enabled.
  GetSearchSuggestionsEnabled() => (bool enabled);
  SetSearchSuggestionsEnabled(bool enabled) => ();

  // Gets or sets whether the prompt to enable search suggestions has been
  // dismissed.
  GetSearchSuggestionsPromptDismissed() => (bool dismissed);
  SetSearchSuggestionsPromptDismissed(bool dismissed) => ();

  // Gets or sets the last used search engine.
  GetLastUsedSearchEngine() => (string engine);
  SetLastUsedSearchEngine(string engine) => ();

  // Returns the list of available search engines for use on the NTP search box.
  GetAvailableSearchEngines() => (array<SearchEngineInfo> search_engines);

  // Opens search for the specified query and engine.
  OpenSearch(string query, string engine, EventDetails details) => ();

  // Opens a URL from the search box.
  OpenURLFromSearch(string url, EventDetails details) => ();

  // Records search box usage metrics.
  ReportSearchBoxHidden() => ();
  ReportSearchEngineUsage(int64 engine_prepopulate_id) => ();
  ReportSearchResultUsage(int64 engine_prepopulate_id) => ();

  // Gets or sets whether top sites are shown on the NTP
  GetShowTopSites() => (bool show_top_sites);
  SetShowTopSites(bool show_top_sites) => ();

  // Gets or sets the top sites list kind.
  GetTopSitesListKind() => (TopSitesListKind list_kind);
  SetTopSitesListKind(TopSitesListKind list_kind) => ();

  // Returns the current list of top sites for the user.
  GetTopSites() => (array<TopSite> top_sites);

  // Adds a site to the list of custom top sites.
  AddCustomTopSite(string url, string title) => ();

  // Updates the custom top site entry with the specified URL.
  UpdateCustomTopSite(string url, string new_url, string title) => ();

  // Sets the position for a custom top site URL. Allows the user to reorder
  // custom top sites.
  SetCustomTopSitePosition(string url, int32 position) => ();

  // Removes a custom top sites entry.
  RemoveCustomTopSite(string url) => ();

  // Reverses the most recent action on the custom top sites list.
  UndoCustomTopSiteAction() => ();

  // Excludes a site from the "most visited" top sites list.
  ExcludeMostVisitedTopSite(string url) => ();

  // Includes a site in the "most visited" top sites list, after it was excluded
  // by a call to `ExcludeMostVisitedTopSite`.
  IncludeMostVisitedTopSite(string url) => ();

  // Gets or sets whether the clock is displayed on the new tab page.
  GetShowClock() => (bool show_clock);
  SetShowClock(bool show_clock) => ();

  // Gets or sets the clock time format.
  GetClockFormat() => (string clock_format);
  SetClockFormat(string clock_format) => ();

  // Gets or sets whether the shields stats widget is displayed.
  GetShowShieldsStats() => (bool show_shields_stats);
  SetShowShieldsStats(bool show_shields_stats) => ();

  // Returns shields browsing stats for the current user.
  GetShieldsStats() => (ShieldsStats shields_stats);

};
