# Copyright (c) 2023 The Brave Authors. All rights reserved.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at https://mozilla.org/MPL/2.0/.

import("//brave/components/text_recognition/common/buildflags/buildflags.gni")
import("//tools/json_schema_compiler/json_schema_api.gni")

static_library("browser") {
  sources = [
    "ai_chat_credential_manager.cc",
    "ai_chat_credential_manager.h",
    "ai_chat_database.cc",
    "ai_chat_database.h",
    "ai_chat_feedback_api.cc",
    "ai_chat_feedback_api.h",
    "ai_chat_metrics.cc",
    "ai_chat_metrics.h",
    "ai_chat_service.cc",
    "ai_chat_service.h",
    "associated_archive_content.cc",
    "associated_archive_content.h",
    "associated_content_driver.cc",
    "associated_content_driver.h",
    "constants.cc",
    "constants.h",
    "conversation_handler.cc",
    "conversation_handler.h",
    "engine/conversation_api_client.cc",
    "engine/conversation_api_client.h",
    "engine/engine_consumer.cc",
    "engine/engine_consumer.h",
    "engine/engine_consumer_claude.cc",
    "engine/engine_consumer_claude.h",
    "engine/engine_consumer_conversation_api.cc",
    "engine/engine_consumer_conversation_api.h",
    "engine/engine_consumer_llama.cc",
    "engine/engine_consumer_llama.h",
    "engine/engine_consumer_oai.cc",
    "engine/engine_consumer_oai.h",
    "engine/oai_api_client.cc",
    "engine/oai_api_client.h",
    "engine/remote_completion_client.cc",
    "engine/remote_completion_client.h",
    "local_models_updater.cc",
    "local_models_updater.h",
    "model_service.cc",
    "model_service.h",
    "model_validator.cc",
    "model_validator.h",
    "types.h",
    "utils.cc",
    "utils.h",
  ]

  if (is_android) {
    sources += [
      "android/ai_chat_iap_subscription_android.cc",
      "android/ai_chat_iap_subscription_android.h",
    ]
  }

  public_deps = [
    ":text_embedder",
    "//base",
  ]

  deps = [
    ":generated_brave_search_responses",
    "//brave/brave_domains",
    "//brave/components/ai_chat/core/common",
    "//brave/components/ai_chat/core/common/buildflags",
    "//brave/components/ai_chat/core/common/mojom",
    "//brave/components/api_request_helper",
    "//brave/components/brave_component_updater/browser",
    "//brave/components/brave_service_keys",
    "//brave/components/brave_stats/browser",
    "//brave/components/constants",
    "//brave/components/l10n/common",
    "//brave/components/p3a_utils",
    "//brave/components/resources:strings_grit",
    "//brave/components/sidebar/common",
    "//brave/components/skus/common:mojom",
    "//brave/components/text_recognition/common/buildflags",
    "//brave/components/time_period_storage",
    "//brave/net/base:utils",
    "//components/component_updater",
    "//components/component_updater:component_updater_paths",
    "//components/keyed_service/core",
    "//components/os_crypt/async/browser",
    "//components/os_crypt/async/common",
    "//components/os_crypt/sync:os_crypt",
    "//components/prefs",
    "//components/update_client",
    "//components/user_prefs",
    "//net/traffic_annotation",
    "//services/data_decoder/public/cpp",
    "//services/network/public/cpp",
    "//services/service_manager/public/cpp",
    "//sql",
    "//third_party/abseil-cpp:absl",
    "//third_party/re2",
    "//ui/base",
    "//url",
  ]

  if (enable_text_recognition) {
    deps += [ "//brave/components/text_recognition/browser" ]
  }
}

source_set("text_embedder") {
  sources = [
    "text_embedder.cc",
    "text_embedder.h",
  ]

  deps = [ "//base" ]

  public_deps = [
    "//brave/third_party/tflite_support",
    "//third_party/tflite",
    "//third_party/tflite_support",
    "//third_party/tflite_support:tflite_support_proto",
  ]
}

if (!is_ios) {
  source_set("unit_tests") {
    testonly = true
    sources = [
      "ai_chat_credential_manager_unittest.cc",
      "ai_chat_database_unittest.cc",
      "ai_chat_metrics_unittest.cc",
      "ai_chat_service_unittest.cc",
      "associated_content_driver_unittest.cc",
      "conversation_handler_unittest.cc",
      "engine/conversation_api_client_unittest.cc",
      "engine/engine_consumer_claude_unittest.cc",
      "engine/engine_consumer_conversation_api_unittest.cc",
      "engine/engine_consumer_llama_unittest.cc",
      "engine/engine_consumer_oai_unittest.cc",
      "engine/oai_api_client_unittest.cc",
      "engine/test_utils.cc",
      "engine/test_utils.h",
      "local_models_updater_unittest.cc",
      "model_service_unittest.cc",
      "model_validator_unittest.cc",
      "text_embedder_unittest.cc",
      "utils_unittest.cc",
    ]

    deps = [
      ":test_support",
      "//base/test:test_support",
      "//brave/components/ai_chat/core/browser",
      "//brave/components/ai_chat/core/common",
      "//brave/components/ai_chat/core/common/mojom",
      "//brave/components/api_request_helper",
      "//brave/components/brave_component_updater/browser:test_support",
      "//brave/components/constants",
      "//brave/components/l10n/common:test_support",
      "//brave/components/resources:strings_grit",
      "//brave/components/skus/browser",
      "//brave/components/skus/common",
      "//brave/components/skus/common:mojom",
      "//components/component_updater:component_updater_paths",
      "//components/component_updater:test_support",
      "//components/os_crypt/async/browser:test_support",
      "//components/os_crypt/sync:test_support",
      "//components/prefs:test_support",
      "//components/sync_preferences:test_support",
      "//content/test:test_support",
      "//net/traffic_annotation:test_support",
      "//services/data_decoder/public/cpp:test_support",
      "//services/network:test_support",
      "//services/network/public/cpp:cpp",
      "//sql:test_support",
      "//testing/gtest:gtest",
    ]
  }
}

source_set("test_support") {
  testonly = true
  sources = [
    "engine/mock_engine_consumer.cc",
    "engine/mock_engine_consumer.h",
    "engine/mock_remote_completion_client.cc",
    "engine/mock_remote_completion_client.h",
    "mock_conversation_handler_observer.cc",
    "mock_conversation_handler_observer.h",
    "test_utils.cc",
    "test_utils.h",
  ]

  deps = [
    "//brave/components/ai_chat/core/browser",
    "//brave/components/ai_chat/core/common/mojom",
    "//services/network/public/cpp",
    "//testing/gmock",
    "//testing/gtest",
  ]
}

generated_types("generated_brave_search_responses") {
  sources = [ "brave_search_responses.idl" ]
  deps = [ "//base" ]
  root_namespace = "ai_chat::%(namespace)s"
  visibility = [ ":browser" ]
}
