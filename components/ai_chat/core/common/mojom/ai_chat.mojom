// Copyright (c) 2023 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// You can obtain one at https://mozilla.org/MPL/2.0/.

module ai_chat.mojom;

import "mojo/public/mojom/base/time.mojom";
import "url/mojom/url.mojom";

enum CharacterType {
  HUMAN,
  ASSISTANT
};

enum ConversationTurnVisibility {
  VISIBLE,
  HIDDEN // does not get added to chat history, used as a flag internally
};

enum APIError {
  None,
  ConnectionIssue,
  RateLimitReached,
  ContextLimitReached
};

enum ModelEngineType {
  LLAMA_REMOTE,
  CLAUDE_REMOTE,
};

// When adding or modifying category names, associated UI strings must also
// be provided via ai_chat_ui_strings.grdp and ai_chat/core/constants.cc
enum ModelCategory {
  CHAT,
};

enum ModelAccess {
  // The model only has a single basic tier, accessible by any level
  BASIC,
  // The model has a basic tier and a more capable premium tier (a.k.a freemium)
  BASIC_AND_PREMIUM,
  // The model only has a premium tier
  PREMIUM,
};

enum PremiumStatus {
  Unknown,
  Inactive,
  Active,
  ActiveDisconnected,
};

struct PremiumInfo {
  // How many credentials in the current batch are remaining
  uint32 remaining_credential_count;

  // When their next batch of credentials is active. If null, there is no
  // next batch.
  mojo_base.mojom.Time? next_active_at;
};

enum SuggestionGenerationStatus {
  None,
  CanGenerate,
  IsGenerating,
  HasGenerated,
};

struct SiteInfo {
  // Title is present if the site has associated page content
  string? title;
  // the content so long that it's being truncated
  bool is_content_truncated;
  // Indicates if the URL scheme is of a type that allows for content association.
  bool is_content_association_possible;
};

// Represents a single turn in a conversation.
// The character type defines which party initiated the turn in the conversation
// The text attribute contains the actual content of the turn, which can be a
// message, statement, or question, among others.
struct ConversationTurn {
  CharacterType character_type;
  ConversationTurnVisibility visibility;
  string text;
};

// Represents an AI engine model choice, usually for the user to choose for a
// Conversation. Display Name and Description should be provided by
// localization.
// We use a key in case there are minor changes to model name for a purpose and
// we want to respect the user's intent (e.g. claude increases version or llama2
// default model changes parameter size).
struct Model {
  // unique key across all models
  string key;
  // exact name to provide to API
  string name;
  // display name, for users
  string display_name;
  // maker, for users
  string display_maker;
  // how to run this model
  ModelEngineType engine_type;
  // user-facing category
  ModelCategory category;
  // Which access level grants permission to use the model
  ModelAccess access;
  // max limit to truncate page contents (measured in chars, not tokens)
  uint32 max_page_content_length;
  // max limit for overall conversation (measured in chars, not tokens)
  uint32 long_conversation_warning_character_limit;
};

// Browser-side handler for requests from WebUI page.
interface PageHandler {
  SetClientPage(pending_remote<ChatUIPage> page);
  // Get all the possible models for the conversation
  GetModels() => (array<Model> models, string current_model_key);
  // Command to change the model for the Conversation to |model_name|.
  ChangeModel(string model_key);
  GetConversationHistory() => (array<ConversationTurn> conversation_history);

  // List of all suggested questions for the active tab in the page's Browser
  // window.
  GetSuggestedQuestions() => (
      array<string> questions, SuggestionGenerationStatus suggestion_status);
  // The browser should generate some questions and fire an event when they
  // are ready.
  GenerateQuestions();

  SubmitHumanConversationEntry(string input);
  SubmitSummarizationRequest();
  MarkAgreementAccepted();
  // Get associated page information. If there is none then |site_info| will be
  // |null|. If the reason for that is it's still being fetched, then
  // |is_fetching| will be |true|.
  GetSiteInfo() => (SiteInfo site_info);
  GetFaviconImageData() => (array<uint8>? favicon_image_data);
  OpenBraveLeoSettings();
  OpenURL(url.mojom.Url url);
  SetShouldSendPageContents(bool should_send);
  GetShouldSendPageContents() => (bool should_send);
  GoPremium();
  RefreshPremiumSession();
  ClearConversationHistory();
  RetryAPIRequest();
  GetAPIResponseError() => (APIError error);
  GetCanShowPremiumPrompt() => (bool can_show);
  DismissPremiumPrompt();

  // Send a user-rating for a chat
  // message. |turn_id| is the index of the message in the
  // current conversation.
  RateMessage(bool is_liked, uint32 turn_id) => (string? rating_id);
  SendFeedback(string category,
      string feedback,
          string rating_id) => (bool is_success);
  GetPremiumStatus() => (PremiumStatus status, PremiumInfo? info);
};

interface ChatUIPage {
  OnConversationHistoryUpdate();
  OnAPIRequestInProgress(bool in_progress);
  OnAPIResponseError(APIError error);
  // Usually the model is changed from the UI client, but occassionally
  // it could be changed from the browser.
  OnModelChanged(string model_key);
  // Provides the full list of questions for the active tab in the page's
  // Browser window.
  OnSuggestedQuestionsChanged(
      array<string> questions, SuggestionGenerationStatus status);
  // Associated page information has changed. If there is none then |site_info|
  // will be |null|. If the reason for that is it's still being fetched, then
  // |is_fetching| will be |true|.
  OnSiteInfoChanged(SiteInfo info);
  OnFaviconImageDataChanged(array<uint8> favicon_image_data);
};

[EnableIf=is_android]
struct ModelWithSubtitle {
  Model model;
  string subtitle;
};

[EnableIf=is_android]
interface AIChatAndroidHelper {
  GetPremiumStatus() => (PremiumStatus status, PremiumInfo? info);
  GetModelsWithSubtitles() => (array<ModelWithSubtitle> models);
};

[EnableIf=is_android]
interface IAPSubscription {
  GetPurchaseToken() => (string token);
};
