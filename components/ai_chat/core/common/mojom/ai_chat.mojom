// Copyright (c) 2023 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// You can obtain one at https://mozilla.org/MPL/2.0/.

module ai_chat.mojom;

import "mojo/public/mojom/base/time.mojom";
import "url/mojom/url.mojom";

enum CharacterType {
  HUMAN,
  ASSISTANT
};

enum ConversationTurnVisibility {
  VISIBLE,
  HIDDEN // does not get added to chat history, used as a flag internally
};

enum APIError {
  None,
  ConnectionIssue,
  RateLimitReached,
  ContextLimitReached
};

enum ModelEngineType {
  LLAMA_REMOTE,
  CLAUDE_REMOTE,
  BRAVE_CONVERSATION_API,
};

// When adding or modifying category names, associated UI strings must also
// be provided via ai_chat_ui_strings.grdp and ai_chat/core/constants.cc
enum ModelCategory {
  CHAT,
};

enum ModelAccess {
  // The model only has a single basic tier, accessible by any level
  BASIC,
  // The model has a basic tier and a more capable premium tier (a.k.a freemium)
  BASIC_AND_PREMIUM,
  // The model only has a premium tier
  PREMIUM,
};

enum PremiumStatus {
  Unknown,
  Inactive,
  Active,
  ActiveDisconnected,
};

struct PremiumInfo {
  // How many credentials in the current batch are remaining
  uint32 remaining_credential_count;

  // When their next batch of credentials is active. If null, there is no
  // next batch.
  mojo_base.mojom.Time? next_active_at;
};

enum SuggestionGenerationStatus {
  None,
  CanGenerate,
  IsGenerating,
  HasGenerated,
};

struct SiteInfo {
  // Title is present if the site has associated page content
  string? title;
  // Indicates if the URL scheme is of a type that allows for content association.
  bool is_content_association_possible;
  // Current tab's url and hostname, if http(s)
  string? hostname;
  url.mojom.Url? url;
  // Percentage of the content that has been utilized by remote LLM (0-100)
  int32 content_used_percentage;
  // Indicates content has been refined through extracting most relevant parts
  // from long page content
  bool is_content_refined;
};

enum ActionType {
  UNSPECIFIED,
  RESPONSE,
  SUMMARIZE_PAGE,
  SUMMARIZE_VIDEO,
  SUMMARIZE_SELECTED_TEXT,
  QUERY,
  EXPLAIN,
  CREATE_TAGLINE,
  CREATE_SOCIAL_MEDIA_COMMENT_SHORT,
  CREATE_SOCIAL_MEDIA_COMMENT_LONG,
  // Rewrite
  PARAPHRASE,
  IMPROVE,
  // Change tone
  ACADEMICIZE,
  PROFESSIONALIZE,
  PERSUASIVE_TONE,
  CASUALIZE,
  FUNNY_TONE,
  // Change length
  SHORTEN,
  EXPAND,
};

struct PageContentRefineEvent {
  bool is_refining = true;
};

struct SearchQueriesEvent {
  array<string> search_queries;
};

struct SearchStatusEvent {
  bool is_searching = true;
};

struct CompletionEvent {
  string completion;
};

struct SelectedLanguageEvent {
  string selected_language;
};

// Events that occur during a conversation turn (only assistant for now)
union ConversationEntryEvent {
  CompletionEvent completion_event;
  PageContentRefineEvent page_content_refine_event;
  SearchQueriesEvent search_queries_event;
  SearchStatusEvent search_status_event;
  SelectedLanguageEvent selected_language_event;
};

// Represents a single turn in a conversation.
// The character type defines which party initiated the turn in the
// conversation.
// The text attribute contains the actual content of the turn, which can be a
// message, statement, or question, among others.
// The selected_text attribute contains what user selects in the page when
// calling from the context menu.
struct ConversationTurn {
  CharacterType character_type;
  ActionType action_type;
  ConversationTurnVisibility visibility;
  // The text that is displayed to the user. This might be different than
  // the text sent to the AI engine to represent this turn, which might be more
  // verbose.
  // TODO(petemill): Store the text sent to the AI engine to aid in regeneration
  // and error retries.
  string text;
  string? selected_text;
  // Ordered list of events that occurred during this turn
  // TODO(petemill): ConversationTurn's |text| and |selected_text| might move
  // to be an event - as the events become richer, the order around text could
  // be important.
  array<ConversationEntryEvent>? events;

  mojo_base.mojom.Time created_time;

  // Edits to this turn, sorted by time of creation, with the most recent edit
  // at the end of the array. When this appears, the value of |text| field is
  // the original text of the turn, the last entry of this array should be used
  // instead of the original turn text when submitting the turn to the AI
  // engine or displaying the most recent text to users.
  array<ConversationTurn>? edits;

  // Whether the turn was generated from Brave Search SERP.
  bool from_brave_search_SERP = false;
};

// Represents an AI engine model choice, usually for the user to choose for a
// Conversation. Display Name and Description should be provided by
// localization.
// We use a key in case there are minor changes to model name for a purpose and
// we want to respect the user's intent (e.g. claude increases version or llama2
// default model changes parameter size).
struct LeoModelOptions {
  // exact name to provide to API
  string name;
  // maker, for users
  string display_maker;
  // how to run this model
  ModelEngineType engine_type;
  // user-facing category
  ModelCategory category;
  // Which access level grants permission to use the model
  ModelAccess access;
  // max limit to truncate page contents (measured in chars, not tokens)
  uint32 max_associated_content_length;
  // max limit for overall conversation (measured in chars, not tokens)
  uint32 long_conversation_warning_character_limit;
};

struct CustomModelOptions {
  string model_request_name;
  // number of tokens supported by the given model
  uint32 context_size;
  // max limit to truncate page contents (measured in chars, not tokens)
  uint32 max_associated_content_length;
  // max limit for overall conversation (measured in chars, not tokens)
  uint32 long_conversation_warning_character_limit;
  // a user-specified prompt to be used with the model
  string? model_system_prompt;
  url.mojom.Url endpoint;
  string api_key;
};

union ModelOptions {
  LeoModelOptions leo_model_options;
  CustomModelOptions custom_model_options;
};

struct Model {
  ModelOptions options;
  // unique key across all models
  string key;
  // display name, for users
  string display_name;
};

struct ModelWithSubtitle {
  Model model;
  string subtitle;
};

struct ActionDetails {
  string label;
  ActionType type;
};

union ActionEntry {
  string subheading;
  ActionDetails details;
};

struct ActionGroup {
  string category;
  array<ActionEntry> entries;
};

struct Conversation {
  string uuid;
  string title;
  bool has_content;
};

interface Service {
  // User opts-in to the feature at a profile level
  MarkAgreementAccepted();

  // Get metadata for non-archived conversations
  GetVisibleConversations() => (array<Conversation> conversations);

  // Get metadata for all quick actions
  GetActionMenuList() => (array<ActionGroup> action_list);

  // Current status of subscription
  GetPremiumStatus() => (PremiumStatus status, PremiumInfo? info);

  // Premium prompt is only shown conditionally (e.g. the user hasn't dismissed
  // it and it's been some time since the user started using the feature).
  GetCanShowPremiumPrompt() => (bool can_show);
  DismissPremiumPrompt();

  // Send events to the UI
  BindObserver(pending_remote<ServiceObserver> ui);

  // Bind specified Conversation for 2-way communication
  BindConversation(
      string conversation_uuid,
      pending_receiver<ConversationHandler> conversation,
      pending_remote<ConversationUI> conversation_ui);
};

interface ServiceObserver {
  OnConversationListChanged(array<Conversation> conversations);
  OnAgreementAccepted();
};

// Browser-side handler for general AI Chat UI functions, implemented
// per-platform
interface AIChatUIHandler {
  // Open various external links or dialogs depending on the platform
  OpenAIChatSettings();
  OpenURL(url.mojom.Url url);
  OpenLearnMoreAboutBraveSearchWithLeo();
  OpenModelSupportUrl();
  GoPremium();
  RefreshPremiumSession();
  ManagePremium();
  HandleVoiceRecognition(string conversation_uuid);

  // This might be a no-op if the UI isn't closeable
  CloseUI();

  SetChatUI(pending_remote<ChatUI> chat_ui);

  // Bind 2-way communication to the conversation related to the open page in
  // the current browser window. No binding will occur if this isn't a
  // tab-related UI, e.g. sidebar or popup.
  BindRelatedConversation(
      pending_receiver<ConversationHandler> conversation,
      pending_remote<ConversationUI> conversation_ui);

  // Make a completely new conversation, which may
  // be bound to the associated conversation, if this UI has a target
  NewConversation(pending_receiver<ConversationHandler> conversation,
      pending_remote<ConversationUI> conversation_ui);

  // TODO(petemill): WebUI clients won't need this when they can
  // request via FaviconSource URLs via trusted webui.
  GetFaviconImageData(string conversation_uuid) => (
      array<uint8>? favicon_image_data);
};

// UI-side handler for whole AI Chat UI
interface ChatUI {
  // Notifies that the default conversation for the
  // panel has changed. e.g. Tab navigation with AIChat open in sidebar.
  OnNewDefaultConversation();
};

struct ConversationState {
  string conversation_uuid;
  bool is_request_in_progress;
  array<Model> all_models;
  string current_model_key;
  array<string> suggested_questions;
  SuggestionGenerationStatus suggestion_status;
  SiteInfo associated_content_info;
  bool should_send_content;
  APIError error;
  // TODO(petemill): include conversation history, once
  // `OnConversationHistoryUpdate` is more intelligent (see TOOD in definition).
};

// Browser-side handler for a Conversation
interface ConversationHandler {
  GetState() => (ConversationState conversation_state);

  GetConversationUuid() => (string conversation_uuid);

  // Get all the possible models for any conversation
  // TODO(petemill): Move the models part to Service
  GetModels() => (array<Model> models, string current_model_key);

  // Command to change the model for the Conversation to |model_name|
  ChangeModel(string model_key);

  GetIsRequestInProgress() => (bool is_request_in_progress);

  // Get all visible history entries, including in-progress responses
  GetConversationHistory() => (array<ConversationTurn> conversation_history);

  // List of all suggested questions
  GetSuggestedQuestions() => (
      array<string> questions, SuggestionGenerationStatus suggestion_status);

  // The browser should generate some questions and fire an event when they
  // are ready.
  GenerateQuestions();

  SubmitHumanConversationEntry(string input);
  SubmitHumanConversationEntryWithAction(string input, ActionType action_type);
  ModifyConversation(uint32 turn_index, string new_text);
  SubmitSummarizationRequest();

  // Get associated page information. If there is none then |site_info| will be
  // |null|. If the reason for that is it's still being fetched, then
  // |is_fetching| will be |true|.
  GetAssociatedContentInfo() => (
      SiteInfo associated_content_info, bool should_send_content);

  SetShouldSendPageContents(bool should_send);

  GetAPIResponseError() => (APIError error);
  RetryAPIRequest();

  // Reset the current error state and returns the
  // most recent message from the conversation to the caller.
  ClearErrorAndGetFailedMessage() => (ConversationTurn turn);

  // Send a user-rating for a chat
  // message. |turn_id| is the index of the message in the
  // specified conversation.
  RateMessage(bool is_liked, uint32 turn_id)
      => (string? rating_id);
  SendFeedback(
      string category,
      string feedback,
      string rating_id, bool send_hostname) => (bool is_success);
};

interface ConversationUI {
  // TODO(petemill): Provide single entry that's been updated so that we don't
  // need to fetch (and clone) all conversation entries each time text is added
  // to the most recent entry.
  OnConversationHistoryUpdate();
  OnAPIRequestInProgress(bool is_request_in_progress);
  OnAPIResponseError(APIError error);
  // Usually the model is changed from the UI client, but occassionally
  // it could be changed from the browser.
  // When the browser changes the model, it will also provide a new list
  // of models.
  OnModelDataChanged(string conversation_model_key, array<Model> all_models);
  // Provides the full list of questions for the active tab in the page's
  // Browser window.
  OnSuggestedQuestionsChanged(
      array<string> questions, SuggestionGenerationStatus status);
  // Associated page information has changed. If there is none then |site_info|
  // will be |null|. If the reason for that is it's still being fetched, then
  // |is_fetching| will be |true|.
  OnAssociatedContentInfoChanged(SiteInfo info, bool should_send_page_contents);
  OnFaviconImageDataChanged();
};

[EnableIf=is_android]
interface IAPSubscription {
  GetPurchaseTokenOrderId() => (string token, string order_id);
};
