// Copyright (c) 2024 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// You can obtain one at https://mozilla.org/MPL/2.0/.

module ai_chat.mojom;

import "brave/components/ai_chat/core/common/mojom/common.mojom";
import "url/mojom/url.mojom";

// Interfaces for communication between the untrusted content frame and both
// the Browser and the parent trusted UI frame.

// Trusted WebUI-side handler for messages from the untrusted child frame
interface ParentUIFrame {
  // <iframe> cannot be sized to the natural height of its content, so the child
  // must let the parent know whenever the body height changes so that the parent
  // can manually set the same height on the <iframe> to avoid scrolling.
  ChildHeightChanged(uint32 height);

  // This is sent to the parent trusted webui rather than straight to the
  // browser to allow for further rating feedback to be attached. The parent
  // frame deals with it instead of the child frame, due to UI space as well as
  // sensitive user information being captured.
  RateMessage(string turn_uuid, bool is_liked);

  // This is sent to the parent trusted webui to allow displaying the
  // open external link modal outside of the untrusted iframe. This is
  // to prevent the modal backdrop from being clipped within the iframe
  // and fixes centering the modal in the page view. The parent frame
  // then deals with whether to display the modal or to continue opening
  // the link.
  UserRequestedOpenGeneratedUrl(url.mojom.Url url);

  // Notify the parent that the child has received a drag enter. We don't have
  // a corresponding DragEnd because the parent should intercept the drag event
  // with an overlay.
  DragStart();

  // This is sent to the parent trusted webui to allow settings the iframes
  // wrapper position to relative while the Regenerate Answer Menu is open.
  // Otherwise the menu can sometimes be overlapped by the Suggested question
  // buttons.
  RegenerateAnswerMenuIsOpen(bool is_open);

  // Show the skill creation dialog with the provided prompt text
  ShowSkillDialog(string prompt);
};

// Browser-side handler for a Conversation's UI responsible for displaying
// untrusted content (e.g. content generated by the AI engine).
interface UntrustedConversationHandler {
  BindUntrustedConversationUI(
      pending_remote<UntrustedConversationUI> untrusted_ui)
          => (ConversationEntriesState conversation_entries_state);

  // Get all visible history entries, including in-progress responses
  GetConversationHistory() => (array<ConversationTurn> conversation_history);

  ModifyConversation(string entry_uuid, string new_text);

  // Allows a client to provide an answer to a tool use request
  // as a result of a user action.
  RespondToToolUseRequest(string tool_id, array<ContentBlock> output_json);

  // Regenerate answer using specified model.
  RegenerateAnswer(string turn_uuid, string model_key);
};

// Untrusted-UI-side handler for a Conversation, responsible for displaying
// content generated by the AI engine.
interface UntrustedConversationUI {
  OnConversationHistoryUpdate(ConversationTurn? entry);
  OnToolUseEventOutput(string entry_uuid, ToolUseEvent tool_use);
  OnEntriesUIStateChanged(ConversationEntriesState state);

  // Called when the associated content is changed - called when the untrusted
  // conversation frame is attached and when the content is changed.
  AssociatedContentChanged(array<AssociatedContent> associated_content);
};

// UI-side handler for callbacks from UntrustedUIHandler
interface UntrustedUI {
  // Called when memories have changed (added, updated, or deleted)
  OnMemoriesChanged(array<string> memories);
};

// Browser-side handler for untrusted frame that handles rendering of
// conversation entries.
interface UntrustedUIHandler {
  // Bind the conversation handler
  BindConversationHandler(
    string conversation_id,
    pending_receiver<UntrustedConversationHandler> conversation_handler
  );

  // Bind UntrustedUI for callbacks
  BindUntrustedUI(pending_remote<UntrustedUI> untrusted_ui);

  // Open a URL for the web search query the assistant used for a response
  OpenSearchURL(string query);

  OpenLearnMoreAboutBraveSearchWithLeo();

  // Opens a URL linked from an assistant response or web search event in the
  // response. Could be any http/https destination.
  OpenURLFromResponse(url.mojom.Url url);

  // Open AI Chat customization settings page
  OpenAIChatCustomizationSettings();

  BindParentPage(pending_receiver<ParentUIFrame> parent_frame);

  // Delete a specific memory from user memory storage
  DeleteMemory(string memory);

  // Check if a specific memory exists in storage
  HasMemory(string memory) => (bool exists);
};
