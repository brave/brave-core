/* Copyright (c) 2019 The Brave Authors. All rights reserved.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at https://mozilla.org/MPL/2.0/. */
module brave_ads.mojom;

import "mojo/public/mojom/base/time.mojom";
import "url/mojom/url.mojom";

struct SysInfo {
  string device_id;
};

struct BuildChannelInfo {
  bool is_release;
  string name;
};

enum EnvironmentType {
  kStaging = 0,
  kProduction
};

struct Flags {
  bool should_debug;
  bool did_override_from_command_line;
  EnvironmentType environment_type;
};

struct ContentSettings {
  bool allow_javascript;
};

struct WalletInfo {
  string payment_id;
  string recovery_seed_base64;
};

struct StatementInfo {
  double min_earnings_previous_month;
  double max_earnings_previous_month;
  double min_earnings_this_month;
  double max_earnings_this_month;
  mojo_base.mojom.Time next_payment_date;
  int32 ads_received_this_month;
  map<AdType, int32> ads_summary_this_month;
};

enum ReminderType {
  kClickedSameAdMultipleTimes = 0,
  kExternalWalletConnected
};

[Stable, Extensible]
enum ReactionType {
  [Default] kNeutral = 0,
  kLiked = 1,
  kDisliked = 2
};

struct ReactionInfo {
  AdType mojom_ad_type;
  string creative_instance_id;
  string creative_set_id;
  string campaign_id;
  string advertiser_id;
  string segment;
};

enum AdType {
  kUndefined = 0,
  kNotificationAd,
  kNewTabPageAd,
  kPromotedContentAd,
  kInlineContentAd,
  kSearchResultAd
};

enum ConfirmationType {
  kUndefined = 0,

  // Clicked is when the user clicks on an ad.
  kClicked,

  // Dismissed is when the user dismisses an ad.
  kDismissed,

  // Viewed impression is when the ad is shown to the user.
  kViewedImpression,

  // Served impression is when the ad is served.
  kServedImpression,

  // Landed is when the user lands on the ad's landing page.
  kLanded,

  // When the user marks an ad as inappropriate.
  kMarkAdAsInappropriate,

  // When the user saves an ad.
  kSavedAd,

  // When the user likes an ad.
  kLikedAd,

  // When the user dislikes an ad.
  kDislikedAd,

  // When the user converts on an ad.
  kConversion,

  // When the user interacts on a new tab page ad.
  kInteraction,

  // When a new tab page video ad begins playing.
  kMediaPlay,

  // When 25% of a new tab page video ad has been played.
  kMedia25,

  // When 100% of a new tab page video ad has been played.
  kMedia100
};

struct CreativeSetConversionInfo {
  string url_pattern;
  string? verifiable_advertiser_public_key_base64;
  mojo_base.mojom.TimeDelta observation_window;
};

enum NotificationAdEventType {
  kServedImpression = 0,
  kViewedImpression,
  kClicked,
  kDismissed,
  kTimedOut
};

enum NewTabPageAdEventType {
  kServedImpression = 0,
  kViewedImpression,
  kClicked,
  kInteraction,
  kMediaPlay,
  kMedia25,
  kMedia100
};

enum PromotedContentAdEventType {
  kServedImpression = 0,
  kViewedImpression,
  kClicked
};

enum InlineContentAdEventType {
  kServedImpression = 0,
  kViewedImpression,
  kClicked
};

struct CreativeSearchResultAdInfo {
  AdType type = kSearchResultAd;
  string placement_id;
  string creative_instance_id;
  string creative_set_id;
  string campaign_id;
  string advertiser_id;
  url.mojom.Url target_url;
  string headline_text;
  string description;
  double value;
  CreativeSetConversionInfo? creative_set_conversion;
};

enum SearchResultAdEventType {
  kServedImpression = 0,
  kViewedImpression,
  kClicked
};

enum UrlRequestMethodType {
  kGet = 0,
  kPut,
  kPost
};

struct UrlRequestInfo {
  url.mojom.Url url;
  array<string> headers;
  string content;
  string content_type;
  UrlRequestMethodType method;
};

struct UrlResponseInfo {
  url.mojom.Url url;
  int32 status_code = -1;
  string body;
  map<string, string> headers;
};

struct DBTransactionInfo {
  // Raze the database. This must be done before any other actions are run.
  // All tables must be recreated after the raze action has completed.
  bool should_raze = false;

  // The list of actions to run within the transaction such as creating or
  // opening the database, executing a statement, or migrating the database.
  array<DBActionInfo> actions;

  // Vacuum the database. This must be done after any other actions are run.
  // The database is configured to auto-vacuum with some limitations, but it is
  // good practice to run this action manually.
  bool should_vacuum = false;
};

struct DBTransactionResultInfo {
  enum StatusCode {
    kSuccess,  // No error.
    kDatabaseNotInitialized,
    kFailedToRazeDatabase,
    kFailedToInitializeMetaTable,
    kFailedToOpenDatabase,
    kMigrationError,
    kTransactionError,
    kStatementError
  };

  StatusCode status_code;

  DBRowsUnion? rows_union;
};

enum DBBindColumnType {
  kInt,
  kInt64,
  kDouble,
  kBool,
  kString,
  kTime,
  kTimeDelta
};

union DBColumnValueUnion {
  int32 int_value;
  int64 int64_value;
  double double_value;
  bool bool_value;
  string string_value;
  mojo_base.mojom.Time time_value;
  mojo_base.mojom.TimeDelta time_delta_value;
};

struct DBBindColumnInfo {
  int32 index;
  DBColumnValueUnion value_union;
};

struct DBRowInfo {
  array<DBColumnValueUnion> column_values_union;
};

union DBRowsUnion {
  array<DBRowInfo> rows;
  DBColumnValueUnion column_value_union;
};

struct DBActionInfo {
  enum Type {
    // Initialize the database table.
    kInitialize,

    // Execute a SQL statement without any parameter bindings that does not return any records.
    kExecute,

    // Execute a SQL statement with parameter bindings that does not return any records.
    kExecuteWithBindings,

    // Execute a SQL statement with parameter bindings that returns records.
    kExecuteQueryWithBindings,

    // Migrate the database.
    kMigrate
  };

  // The action type.
  Type type;

  // The SQL statement to execute.
  string? sql;

  // The SQL statement's bound column types. This is only used for
  // `kExecuteQueryWithBindings`.
  array<DBBindColumnType> bind_column_types;

  // The SQL statement's bound columns. This is only used for `kExecuteWithBindings`
  // and `kExecuteQueryWithBindings`.
  array<DBBindColumnInfo> bind_columns;
};

// Silences presubmit for mojom check for legacy types.
struct DBCommandResponseInfo {};
struct DBStatementResultInfo {};
