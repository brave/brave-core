/* Copyright (c) 2019 The Brave Authors. All rights reserved.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at https://mozilla.org/MPL/2.0/. */
module brave_ads.mojom;

import "mojo/public/mojom/base/time.mojom";
import "url/mojom/url.mojom";

struct SysInfo {
  string device_id;
};

struct BuildChannelInfo {
  bool is_release;
  string name;
};

enum EnvironmentType {
  kStaging = 0,
  kProduction
};

struct Flags {
  bool should_debug;
  bool did_override_from_command_line;
  EnvironmentType environment_type;
};

struct WalletInfo {
  string payment_id;
  string recovery_seed;
};

struct StatementInfo {
  double min_earnings_last_month;
  double max_earnings_last_month;
  double min_earnings_this_month;
  double max_earnings_this_month;
  mojo_base.mojom.Time next_payment_date;
  int32 ads_received_this_month;
  map<string, int32> ads_summary_this_month;
};

enum ReminderType {
  kClickedSameAdMultipleTimes = 0,
  kExternalWalletConnected
};

enum UserReactionType {
  kNeutral = 0,
  kLike,
  kDislike
};

enum AdType {
  kUndefined = 0,
  kNotificationAd,
  kNewTabPageAd,
  kPromotedContentAd,
  kInlineContentAd,
  kSearchResultAd
};

struct ConversionInfo {
  string url_pattern;
  string? verifiable_advertiser_public_key_base64;
  mojo_base.mojom.TimeDelta observation_window;
};

enum NotificationAdEventType {
  kServed = 0,
  kViewed,
  kClicked,
  kDismissed,
  kTimedOut
};

enum NewTabPageAdEventType {
  kServed = 0,
  kViewed,
  kClicked
};

enum PromotedContentAdEventType {
  kServed = 0,
  kViewed,
  kClicked
};

enum InlineContentAdEventType {
  kServed = 0,
  kViewed,
  kClicked
};

struct SearchResultAdInfo {
  AdType type = kSearchResultAd;
  string placement_id;
  string creative_instance_id;
  string creative_set_id;
  string campaign_id;
  string advertiser_id;
  url.mojom.Url target_url;
  string headline_text;
  string description;
  double value;
  ConversionInfo? conversion;
};

enum SearchResultAdEventType {
  kServed = 0,
  kViewed,
  kClicked
};

enum UrlRequestMethodType {
  kGet = 0,
  kPut,
  kPost
};

struct UrlRequestInfo {
  url.mojom.Url url;
  array<string> headers;
  string content;
  string content_type;
  UrlRequestMethodType method;
};

struct UrlResponseInfo {
  url.mojom.Url url;
  int32 status_code = -1;
  string body;
  map<string, string> headers;
};

union DBValue {
  int32 int_value;
  int64 int64_value;
  double double_value;
  bool bool_value;
  string string_value;
  int8 null_value;
};

struct DBCommandBindingInfo {
  int32 index;
  DBValue value;
};

struct DBCommandInfo {
  enum Type {
    INITIALIZE,
    READ,
    RUN,
    EXECUTE,
    MIGRATE
  };

  enum RecordBindingType {
    STRING_TYPE,
    INT_TYPE,
    INT64_TYPE,
    DOUBLE_TYPE,
    BOOL_TYPE
  };

  Type type;
  string sql;
  array<DBCommandBindingInfo> bindings;
  array<RecordBindingType> record_bindings;
};

struct DBTransactionInfo {
  int32 version;
  int32 compatible_version;
  array<DBCommandInfo> commands;
};

struct DBRecordInfo {
  array<DBValue> fields;
};

union DBCommandResult {
  array<DBRecordInfo> records;
  DBValue value;
};

struct DBCommandResponseInfo {
  enum StatusType {
    RESPONSE_OK,
    INITIALIZATION_ERROR,
    TRANSACTION_ERROR,
    COMMAND_ERROR,
    RESPONSE_ERROR
  };

  DBCommandResult? result;
  StatusType status;
};
