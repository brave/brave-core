// Copyright (c) 2021 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// You can obtain one at https://mozilla.org/MPL/2.0/.

module brave_news.mojom;

import "mojo/public/mojom/base/time.mojom";
import "url/mojom/url.mojom";

// Items either have a padded or an unpadded image url
union Image {
  url.mojom.Url padded_image_url;
  url.mojom.Url image_url;
};

enum CardType {
  HEADLINE,
  HEADLINE_PAIRED,
  CATEGORY_GROUP,
  PUBLISHER_GROUP,
  DEALS,
  DISPLAY_AD,
  PROMOTED_ARTICLE
};

struct FeedItemMetadata {
  string category_name;
  mojo_base.mojom.Time publish_time;
  string title;
  string description;
  url.mojom.Url url;
  string url_hash;
  Image image;
  string publisher_id;
  string publisher_name;
  double score;
  double pop_score;
  string relative_time_description;
};

struct Article {
  FeedItemMetadata data;
  bool is_discover;
};

struct PromotedArticle {
  FeedItemMetadata data;
  string creative_instance_id;
};

struct Deal {
  FeedItemMetadata data;
  string offers_category;
};

union FeedItem {
  Article article;
  PromotedArticle promoted_article;
  Deal deal;
};

struct FeedPageItem {
  CardType card_type;
  // Each UI must validate if the items array
  // contains enough content to support the card_type.
  array<FeedItem> items;
};

struct FeedPage {
  array<FeedPageItem> items;
};

struct Feed {
  string hash;
  array<FeedPage> pages;
  FeedItem? featured_item;
};

enum UserEnabled {
  NOT_MODIFIED,
  ENABLED,
  DISABLED,
};

struct Channel {
  string channel_name;
  array<string> subscribed_locales;
};

enum PublisherType {
  // Remote single feed of feed items combinging all default-provided feeds.
  COMBINED_SOURCE,

  // User-chosen additional feed which is fetched directly by the browser
  // individually.
  DIRECT_SOURCE,
};

struct LocaleInfo {
  string locale;

  // The ranking of the source.
  // Mojo doesn't support nullable primitives, so we consider a rank of 0 to be
  // unranked.
  uint32 rank;
  array<string> channels;
};

struct Publisher {
  string publisher_id;
  PublisherType type;
  string publisher_name;
  string category_name;
  bool is_enabled;

  // Information about the locales this source is in.
  array<LocaleInfo> locales;

  // Only really used for direct feeds, though this information would
  // be useful for combined-source feeds so that the user doesn't add
  // a direct feed for a data source already contained in the combined-source
  // feed.
  url.mojom.Url feed_source;

  // The favicon url for this publisher.
  url.mojom.Url? favicon_url;

  // The cover url for this publisher.
  url.mojom.Url? cover_url;

  // The background color for this publisher (in hex).
  string? background_color;

  // The url of the site. Used to determine whether the user is subscribed to
  // a site when viewing a webcontents.
  url.mojom.Url site_url;

  // Identifies whether the user has manually set the publisher on and off,
  // so that we may know if the source should follow the `is_enabled`
  // remote-provided value (which may change), or not.
  UserEnabled user_enabled_status = UserEnabled.NOT_MODIFIED;
};

// Used to display information about why an article was displayed.
struct Signal {
  // The subscription weight of this item. Note: This is normally a small
  // non-zero number even if the user is not subscribed to a channel/source for
  // this item. It will only be zero if the user has explicitly opted out.
  double subscribed_weight;
  double visit_weight;
};

struct HeroArticle {
  FeedItemMetadata data;
};

union ArticleElements {
  Article article;
  HeroArticle hero;
};

struct Discover {
  array<string> publisher_ids;
};

struct Cluster {
  string type;
  string id;
  array<ArticleElements> articles;
};

union FeedItemV2 {
  Article article;
  HeroArticle hero;
  PromotedArticle advert;
  Discover discover;
  Cluster cluster;
};

struct FeedV2 {
  array<FeedItemV2> items;
};

struct DisplayAd {
  string uuid;
  string creative_instance_id;
  string dimensions;
  string title;
  string description;
  Image image;
  url.mojom.Url target_url;
  string? cta_text;
};

struct FeedSearchResultItem {
  url.mojom.Url feed_url;
  string feed_title;
};

struct PublishersEvent {
  map<string, Publisher> addedOrUpdated;
  array<string> removed;
};

interface PublishersListener {
  Changed(PublishersEvent event);
};

struct ChannelsEvent {
  map<string, Channel> addedOrUpdated;
  array<string> removed;
};

interface ChannelsListener {
  Changed(ChannelsEvent event);
};

interface FeedListener {
  OnUpdateAvailable(string feed_hash);
};

// Browser-side handler
interface BraveNewsController {
  // Gets the current locale.
  GetLocale() => (string locale);

  GetFeed() => (Feed feed);
  GetFeedV2() => (FeedV2 feed);
  GetSignals() => (map<string, Signal> signals);

  // Deprecated by https://github.com/brave/brave-core/pull/16038. Use
  // |AddPublishersListener| instead.
  GetPublishers() => (map<string, Publisher> publishers);
  AddPublishersListener(pending_remote<PublishersListener> listener);
  GetSuggestedPublisherIds() => (array<string> suggested_publisher_ids);

  // Deprecated by https://github.com/brave/brave-core/pull/16038. Use
  // |AddChannelsListener| instead.
  GetChannels() => (map<string, Channel> channels);
  AddChannelsListener(pending_remote<ChannelsListener> listener);
  SetChannelSubscribed(string locale, string channel_id, bool subscribed) => (Channel updated);
  // Look at the incoming url and return results
  //  - if it's a feed url then return the feed item
  //  - if it's an html document url, then search for related feed items in the html
  //    then validate and  parse the title from the url and return the details
  FindFeeds(url.mojom.Url possible_feed_or_site_url)
    => (array<FeedSearchResultItem> results);
  // When feed_url is a valid parsable feed, it will be added to the user's
  // preferences and this function will return the new list of Publisher items.
  // When it is not valid, or it is a duplicate, then the list of Publisher
  // items will not be provided.
  SubscribeToNewDirectFeed(url.mojom.Url feed_url)
    => (bool is_valid_feed, bool is_duplicate, map<string, Publisher>? publishers);
  RemoveDirectFeed(string publisher_id);
  GetImageData(url.mojom.Url padded_image_url) => (array<uint8>? image_data);
  GetFavIconData(string publisher_id) => (array<uint8>? image_data);
  SetPublisherPref(string publisher_id, UserEnabled new_status);
  ClearPrefs();

  // DEPRECATED: Use AddFeedListener::OnUpdateAvailable instead.
  IsFeedUpdateAvailable(string displayed_feed_hash)
    => (bool is_update_available);
  AddFeedListener(pending_remote<FeedListener> listener);

  GetDisplayAd() => (DisplayAd? ad);
  // Lets the browser know when a user begins viewing or scrolling
  // through Brave News, for statistics gathering purposes.
  OnInteractionSessionStarted();
  // Argument should be how many total cards visited in this session.
  // We need the front-end to give us this since the class
  // which implements this interface may live longer than the session
  // or there may be multiple sessions active. This includes if a user visits
  // a card and then navigates "back" to the same place in Brave News
  // and visits a subsequent card.
  OnSessionCardVisitsCountChanged(uint16 total_count);
  // Arguments should be how many total cards and new cards viewed in this session.
  // We need the front-end to give us this since the class
  // which implements this interface may live longer than the session
  // or there may be multiple sessions active. This includes if a user visits
  // a card and then navigates "back" to the same place in Brave News
  // and views subsequent card. In that case,
  // the UI should provide a number which increments the view count from before
  // the navigation event.
  OnSessionCardViewsCountChanged(uint16 total_count, uint16 count_delta);
  OnPromotedItemView(string item_id, string creative_instance_id);
  OnPromotedItemVisit(string item_id, string creative_instance_id);
  OnDisplayAdVisit(string item_id, string creative_instance_id);
  OnDisplayAdView(string item_id, string creative_instance_id);
  OnDisplayAdPurgeOrphanedEvents();
};
