// Copyright (c) 2021 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// you can obtain one at http://mozilla.org/MPL/2.0/.

module brave_shields.mojom;

import "url/mojom/url.mojom";

// Used by the WebUI page to bootstrap bidirectional communication.
interface PanelHandlerFactory {
  // The WebUI calls this method when the page is first initialized.
  CreatePanelHandler(pending_receiver<PanelHandler> panel_handler,
    pending_receiver<DataHandler> data_handler);
};

// Browser-side handler for requests from WebUI page.
interface PanelHandler {
  // Notify the backend that the UI is ready to be shown.
  ShowUI();

  // Notify the backend that the dialog should be closed.
  CloseUI();
};

// WebUI-side handler for requests from the browser.
interface UIHandler {
  OnSiteBlockInfoChanged(SiteBlockInfo site_block_info);
};

interface DataHandler {
  RegisterUIHandler(pending_remote<UIHandler> ui_handler);
  GetSiteBlockInfo() => (SiteBlockInfo site_block_info);
  GetSiteSettings() => (SiteSettings site_settings);
  SetAdBlockMode(AdBlockMode mode);
  SetFingerprintMode(FingerprintMode mode);
  SetCookieBlockMode(CookieBlockMode mode);
  SetIsNoScriptsEnabled(bool is_enabled);
  SetHTTPSEverywhereEnabled(bool is_enabled);
  SetBraveShieldsEnabled(bool is_enabled);
  OpenWebCompatWindow();
  UpdateFavicon();
};

struct SiteBlockInfo {
  string host;
  int32 total_blocked_resources;
  bool is_shields_enabled;
  url.mojom.Url favicon_url;
  array<url.mojom.Url> ads_list;
  array<url.mojom.Url> http_redirects_list;
  array<url.mojom.Url> js_list;
  array<url.mojom.Url> fingerprints_list;
};

struct SiteSettings {
  AdBlockMode ad_block_mode;
  FingerprintMode fingerprint_mode;
  CookieBlockMode cookie_block_mode;
  bool is_https_everywhere_enabled;
  bool is_noscript_enabled;
};

enum AdBlockMode {
  AGGRESSIVE,
  STANDARD,
  ALLOW
};

enum FingerprintMode {
  STRICT,
  STANDARD,
  ALLOW
};

enum CookieBlockMode {
  CROSS_SITE_BLOCKED,
  BLOCKED,
  ALLOW
};
