/* Copyright 2019 The Brave Authors. All rights reserved.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "brave/components/brave_shields/browser/adblock_stub_response.h"

#include <string>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "base/no_destructor.h"
#include "base/strings/string_split.h"
#include "net/base/data_url.h"
#include "net/http/http_util.h"
#include "services/network/public/cpp/resource_request.h"
#include "services/network/public/mojom/url_response_head.mojom.h"

namespace brave_shields {
namespace {

// Everything but jpeg is a transparent pixel.
const unsigned char kAvif1x1[] = {
    0x00, 0x00, 0x00, 0x20, 0x66, 0x74, 0x79, 0x70, 0x61, 0x76, 0x69, 0x66,
    0x00, 0x00, 0x00, 0x00, 0x61, 0x76, 0x69, 0x66, 0x6d, 0x69, 0x66, 0x31,
    0x6d, 0x69, 0x61, 0x66, 0x4d, 0x41, 0x31, 0x41, 0x00, 0x00, 0x01, 0xa1,
    0x6d, 0x65, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28,
    0x68, 0x64, 0x6c, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x70, 0x69, 0x63, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x6c, 0x69, 0x62, 0x61, 0x76, 0x69, 0x66, 0x00,
    0x00, 0x00, 0x00, 0x0e, 0x70, 0x69, 0x74, 0x6d, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x00, 0x2c, 0x69, 0x6c, 0x6f, 0x63, 0x00, 0x00,
    0x00, 0x00, 0x44, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x01, 0xc9, 0x00, 0x00, 0x00, 0x16, 0x00, 0x02, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x01, 0xdf, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00,
    0x00, 0x42, 0x69, 0x69, 0x6e, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
    0x00, 0x00, 0x00, 0x1a, 0x69, 0x6e, 0x66, 0x65, 0x02, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x61, 0x76, 0x30, 0x31, 0x43, 0x6f, 0x6c, 0x6f,
    0x72, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x69, 0x6e, 0x66, 0x65, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x61, 0x76, 0x30, 0x31, 0x41, 0x6c,
    0x70, 0x68, 0x61, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x69, 0x72, 0x65, 0x66,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x61, 0x75, 0x78, 0x6c,
    0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0xd7, 0x69, 0x70,
    0x72, 0x70, 0x00, 0x00, 0x00, 0xb1, 0x69, 0x70, 0x63, 0x6f, 0x00, 0x00,
    0x00, 0x14, 0x69, 0x73, 0x70, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x70, 0x69,
    0x78, 0x69, 0x00, 0x00, 0x00, 0x00, 0x03, 0x08, 0x08, 0x08, 0x00, 0x00,
    0x00, 0x0c, 0x61, 0x76, 0x31, 0x43, 0x81, 0x2d, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x13, 0x63, 0x6f, 0x6c, 0x72, 0x6e, 0x63, 0x6c, 0x78, 0x00, 0x02,
    0x00, 0x02, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x14, 0x69, 0x73, 0x70,
    0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x69, 0x78, 0x69, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x08, 0x00, 0x00, 0x00, 0x0c, 0x61, 0x76, 0x31, 0x43, 0x81,
    0x0d, 0x10, 0x00, 0x00, 0x00, 0x00, 0x38, 0x61, 0x75, 0x78, 0x43, 0x00,
    0x00, 0x00, 0x00, 0x75, 0x72, 0x6e, 0x3a, 0x6d, 0x70, 0x65, 0x67, 0x3a,
    0x6d, 0x70, 0x65, 0x67, 0x42, 0x3a, 0x63, 0x69, 0x63, 0x70, 0x3a, 0x73,
    0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x3a, 0x61, 0x75, 0x78, 0x69, 0x6c,
    0x69, 0x61, 0x72, 0x79, 0x3a, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x00, 0x00,
    0x00, 0x00, 0x1e, 0x69, 0x70, 0x6d, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x00, 0x01, 0x04, 0x01, 0x02, 0x83, 0x04, 0x00, 0x02,
    0x04, 0x05, 0x06, 0x87, 0x08, 0x00, 0x00, 0x00, 0x32, 0x6d, 0x64, 0x61,
    0x74, 0x12, 0x00, 0x0a, 0x07, 0x38, 0x00, 0x06, 0x90, 0x20, 0x20, 0x19,
    0x32, 0x09, 0x10, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x8f, 0x67, 0x83, 0x12,
    0x00, 0x0a, 0x05, 0x18, 0x00, 0x06, 0x84, 0x20, 0x32, 0x09, 0x10, 0x00,
    0x00, 0x00, 0x07, 0xc8, 0x24, 0xc6, 0x62};
const unsigned char kWebp1x1[] = {
    0x52, 0x49, 0x46, 0x46, 0x1a, 0x00, 0x00, 0x00, 0x57, 0x45, 0x42, 0x50,
    0x56, 0x50, 0x38, 0x4c, 0x0d, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00,
    0x10, 0x07, 0x10, 0x11, 0x11, 0x88, 0x88, 0xfe, 0x07, 0x00};
const unsigned char kPng1x1[] = {
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
    0x08, 0x04, 0x00, 0x00, 0x00, 0xb5, 0x1c, 0x0c, 0x02, 0x00, 0x00, 0x00,
    0x0b, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0x63, 0xfa, 0xcf, 0x00, 0x00,
    0x02, 0x07, 0x01, 0x02, 0x9a, 0x1c, 0x31, 0x71, 0x00, 0x00, 0x00, 0x00,
    0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82};
const unsigned char kGif1x1[] = {
    0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x01, 0x00, 0x01, 0x00, 0x80,
    0x01, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x21, 0xf9, 0x04,
    0x01, 0x0a, 0x00, 0x01, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x02, 0x4c, 0x01, 0x00, 0x3b};
const unsigned char kJpeg1x1[] = {
    0xff, 0xd8, 0xff, 0xdb, 0x00, 0x43, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xc0, 0x00, 0x0b, 0x08, 0x00, 0x01, 0x00, 0x01, 0x01, 0x01, 0x11, 0x00,
    0xff, 0xc4, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc4,
    0x00, 0x14, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xda, 0x00, 0x08,
    0x01, 0x01, 0x00, 0x00, 0x3f, 0x00, 0x37, 0xff, 0xd9};

// Basically, for now all Chromium image resource requests use hardcoded
// 'Accept' header that starts with "image/webp". However, it is possible to
// craft a custom 'Accept', for example, using XHR, so we provide stubs for
// other popular mime types.
std::string GetContentForMimeType(const std::string& mime_type) {
  static const base::NoDestructor<base::flat_map<std::string, std::string>>
      content({
          {"image/avif", {kAvif1x1, std::end(kAvif1x1)}},
          {"image/webp", {kWebp1x1, std::end(kWebp1x1)}},
          {"image/*", {kPng1x1, std::end(kPng1x1)}},
          {"image/apng", {kPng1x1, std::end(kPng1x1)}},
          {"image/png", {kPng1x1, std::end(kPng1x1)}},
          {"image/x-png", {kPng1x1, std::end(kPng1x1)}},
          {"image/gif", {kGif1x1, std::end(kGif1x1)}},
          {"image/jpeg", {kJpeg1x1, std::end(kJpeg1x1)}},
      });
  auto it = content->find(mime_type);
  if (it == content->end()) {
    return {};
  }
  return it->second;
}

}  // namespace

void MakeStubResponse(const absl::optional<std::string>& data_url,
                      const network::ResourceRequest& request,
                      network::mojom::URLResponseHeadPtr* response,
                      std::string* data) {
  DCHECK(response && *response);
  DCHECK(data);

  (*response)->mime_type = "text/html";
  *data = {};

  // Possibly overwrite mime and stub data.
  std::string accept_header;
  request.headers.GetHeader("Accept", &accept_header);
  auto mime_types = base::SplitString(
      accept_header, ",;", base::TRIM_WHITESPACE, base::SPLIT_WANT_NONEMPTY);
  if (!mime_types.empty()) {
    DCHECK(!mime_types.front().empty());
    // If the entry looks like "*/*", use the default value. Otherwise, use
    // the value from 'Accept', even if it looks like "audio/*".
    if (mime_types.front()[0] != '*') {
      (*response)->mime_type = mime_types.front();
    }
    *data = GetContentForMimeType((*response)->mime_type);
  }

  if (data_url.has_value() && !data_url->empty()) {
    std::string charset;
    std::string mime_type;
    std::string url_data;
    if (!net::DataURL::Parse(GURL(data_url.value()), &mime_type, &charset,
                             &url_data)) {
      LOG(ERROR) << "Could not parse ad-block data URL: " << data_url.value();
    } else {
      *data = std::move(url_data);
      if (!mime_type.empty() && data_url.value().find("data:,") != 0) {
        (*response)->mime_type = mime_type;
      }
    }
  }

  // Craft response headers.
  // TODO(iefremov): Allowing any origins still breaks some CORS requests.
  // Maybe we can provide something smarter here (issues/4396).
  std::string raw_headers =
      "HTTP/1.1 200 OK\r\n"
      "Access-Control-Allow-Origin: *\r\n"
      "Content-Type: " +
      (*response)->mime_type + "\r\n";
  (*response)->headers = new net::HttpResponseHeaders(
      net::HttpUtil::AssembleRawHeaders(raw_headers));
}

}  // namespace brave_shields
