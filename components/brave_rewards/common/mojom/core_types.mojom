// Copyright (c) 2023 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// You can obtain one at https://mozilla.org/MPL/2.0/.

module brave_rewards.mojom;

// While the actual value of an error enumerator does not matter,
// the convention is to use only non-zero values
// to ensure that `!error` in TypeScript unambiguously means
// `error === undefined` (as opposed to `error === undefined || error === 0`).

struct ConnectExternalWalletValue {};

enum ConnectExternalWalletError {
  kDeviceLimitReached = 1, // see comment at the top of the file
  kFlaggedWallet,
  kKYCRequired,
  kMismatchedCountries,
  kMismatchedProviderAccounts,
  kProviderUnavailable,
  kRegionNotSupported,
  kRequestSignatureVerificationFailure,
  kUnexpected,
  kUpholdBATNotAllowed,
  kUpholdInsufficientCapabilities,
  kUpholdTransactionVerificationFailure
};

union ConnectExternalWalletResult {
  ConnectExternalWalletValue value;
  ConnectExternalWalletError error;
};

struct Balance {
  double total;
  map<string, double> wallets;
};

struct FetchBalanceValue {
  Balance balance;
};

enum FetchBalanceError {
  kAccessTokenExpired = 1, // see comment at the top of the file
  kUnexpected
};

union FetchBalanceResult {
  FetchBalanceValue value;
  FetchBalanceError error;
};

// WalletStatus definition up until state v12:
// enum WalletStatus {
//   NOT_CONNECTED = 0,
//   CONNECTED = 1,
//   VERIFIED = 2,
//   DISCONNECTED_NOT_VERIFIED = 3,
//   DISCONNECTED_VERIFIED = 4,
//   PENDING = 5
// };

// WalletStatus definition as of state v12:
enum WalletStatus {
  kNotConnected = 0,
  kConnected = 2,
  kLoggedOut = 4
};

struct ExternalWallet {
  string type;
  string token;
  string address;
  WalletStatus status;
  string one_time_string;
  string code_verifier;
  string user_name;
  string member_id;
  string account_url;
  string login_url;
  string activity_url;
  map<string, double> fees;
};

struct GetExternalWalletValue {
  ExternalWallet wallet;
};

enum GetExternalWalletError {
  kAccessTokenExpired = 1, // see comment at the top of the file
  kUnexpected
};

union GetExternalWalletResult {
  GetExternalWalletValue value;
  GetExternalWalletError error;
};

enum UserType {
  kLegacyUnconnected,
  kUnconnected,
  kConnected
};

enum Environment {
  STAGING = 0,
  PRODUCTION = 1,
  DEVELOPMENT = 2
};
