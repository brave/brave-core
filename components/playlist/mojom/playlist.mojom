// Copyright (c) 2022 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// you can obtain one at http://mozilla.org/MPL/2.0/.

module playlist.mojom;

import "url/mojom/url.mojom";

enum PlaylistEvent {
  kUpdated,
};

struct Playlist {
  string? id;
  string name;
  array<PlaylistItem> items;
};

struct PlaylistItem {
  string id;
  string name;
  
  url.mojom.Url page_source;
  url.mojom.Url media_path;
  url.mojom.Url thumbnail_path;

  // When it's |cached|, |media_path| and |thumbnail_path| will be
  // local path.
  bool cached;
};

// Used by the WebUI page to bootstrap bidirectional communication.
interface PageHandlerFactory {
  // The WebUI page's |BrowserProxy| singleton calls this method when the page
  // is first initialized.
  CreatePageHandler(pending_remote<Page> page,
                    pending_receiver<PageHandler> handler);
};

// Browser-side handler for requests from WebUI page.
interface PageHandler {
  GetAllPlaylists() => (array<Playlist> playlists);

  GetPlaylist(string id) => (Playlist? playlist);

  AddMediaFilesFromPageToPlaylist(string playlist_id, url.mojom.Url url);
  
  // Store all media files from tabs in this window.
  AddMediaFilesFromOpenTabsToPlaylist(string playlist_id);

  RemoveItemFromPlaylist(string playlist_id, string item_id);

  // Try downloading thumbnail and media files again
  RecoverLocalDataForItem(string id);

  // Removes thumbnail and media files for a item stored in local directory.
  RemoveLocalDataForItem(string id);

  CreatePlaylist(Playlist playlist);
  RemovePlaylist(string id);
};

// WebUI-side handler for requests from the browser.
interface Page {
  // TODO(sko) For now, we only send |kUpdated| event. Need to make more events
  // and parameters for client side.
  OnEvent(PlaylistEvent event);
};

