// Copyright (c) 2022 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// You can obtain one at https://mozilla.org/MPL/2.0/.

module playlist.mojom;

import "url/mojom/url.mojom";

enum PlaylistEvent {
  kUpdated,
};

struct Playlist {
  string? id;
  string name;
  array<PlaylistItem> items;
};

struct PlaylistItem {
  string id;
  string name;

  // original sources
  url.mojom.Url page_source;
  url.mojom.Url media_source;
  url.mojom.Url thumbnail_source;

  // cached path or original src url
  url.mojom.Url media_path;
  url.mojom.Url thumbnail_path;

  // When it's |cached|, |media_path| and |thumbnail_path| will be
  // local path.
  bool cached;

  string author;
  string duration;
  int32 last_played_position;
};

// Used by the web UI to bootstrap bidirectional communication.
// the WebUI page's |BrowserProxy| singleton calls this method
// when the page is first initialized.
interface PageHandlerFactory {
  CreatePageHandler(pending_remote<PlaylistServiceObserver> service_observer,
                    pending_receiver<PlaylistService> service);
};

// Service-side handler for requests from UI.
interface PlaylistService {
  // Getters for playlists.
  GetAllPlaylists() => (array<Playlist> playlists);
  GetPlaylist(string id) => (Playlist? playlist);

  // Getters for playlist items.
  GetAllPlaylistItems() => (array<PlaylistItem> items);
  GetPlaylistItem(string id) => (PlaylistItem? item);

  // Store all media files from given URL.
  AddMediaFilesFromPageToPlaylist(string playlist_id, url.mojom.Url url);

  // Store or find all media files from the active tab.
  AddMediaFilesFromActiveTabToPlaylist(string playlist_id);
  FindMediaFilesFromActiveTab() => (array<PlaylistItem> items);

  AddMediaFiles(array<PlaylistItem> items, string playlist_id);

  RemoveItemFromPlaylist(string playlist_id, string item_id);
  MoveItem(string from_playlist_id, string to_playlist_id, string item_id);
  ReorderItemFromPlaylist(string playlist_id, string item_id, int16 position);

  UpdateItem(PlaylistItem item);

  // Try downloading media files again
  RecoverLocalDataForItem(string id);

  // Removes media files for a item stored in local directory.
  RemoveLocalDataForItem(string id);

  // Removes media files of all items in a playlist with |playlist_id|.
  RemoveLocalDataForItemsInPlaylist(string playlist_id);

  // Creates a new playlist with given |playlist| and return created Playlist
  // with a new ID of the playlist.
  CreatePlaylist(Playlist playlist) => (Playlist created_list);

  RemovePlaylist(string id);
};

// UI-side handler for response from the service.
interface PlaylistServiceObserver {
  // TODO(sko) For now, we only send |kUpdated| event. Need to make more events
  // and parameters for client side.
  OnEvent(PlaylistEvent event);

  OnMediaFileDownloadProgressed(
      string id,
      int64 total_bytes,
      int64 received_bytes,
      int8 percent_complete,
      string time_remaining);
};
