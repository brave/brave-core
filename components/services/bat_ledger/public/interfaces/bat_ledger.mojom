// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// You can obtain one at http://mozilla.org/MPL/2.0/.
module bat_ledger.mojom;

const string kServiceName = "bat_ledger";

interface BatLedgerService {
  Create(associated BatLedgerClient bat_ledger_client,
         associated BatLedger& bat_ledger);
  SetProduction(bool isProduction);
  SetDebug(bool isDebug);
  SetReconcileTime(int32 time);
  SetShortRetries(bool short_retries);
  SetTesting();

  GetProduction() => (bool production);
  GetDebug() => (bool debug);
  GetReconcileTime() => (int32 time);
  GetShortRetries() => (bool short_retries);
};

interface BatLedger {
  Initialize();
  CreateWallet();
  FetchWalletProperties() => (int32 result, string wallet_info);

  GetAutoContributeProps() => (string props);
  GetPublisherMinVisitTime() => (uint64 min_visit_time);
  GetPublisherMinVisits() => (uint32 min_visits);
  GetPublisherAllowNonVerified() => (bool allowed);
  GetPublisherAllowVideos() => (bool allowed);
  GetAutoContribute() => (bool auto_contribute);
  GetReconcileStamp() => (uint64 reconcile_stamp);

  OnLoad(string visit_data, uint64 current_time);
  OnUnload(uint32 tab_id, uint64 current_time);
  OnShow(uint32 tab_id, uint64 current_time);
  OnHide(uint32 tab_id, uint64 current_time);
  OnForeground(uint32 tab_id, uint64 current_time);
  OnBackground(uint32 tab_id, uint64 current_time);
  OnMediaStart(uint32 tab_id, uint64 current_time);
  OnMediaStop(uint32 tab_id, uint64 current_time);

  OnPostData(string url, string first_party_url, string referrer,
             string post_data, string visit_data);
  OnXHRLoad(uint32 tab_id, string url, map<string, string> parts,
            string first_party_url, string referrer, string visit_data);

  SetPublisherExclude(string publisher_key, int32 exclude);
  RestorePublishers();

  SetBalanceReportItem(int32 month, int32 year, int32 type, string probi);
  OnReconcileCompleteSuccess(string viewing_id, int32 category, string probi,
      int32 month, int32 year, uint32 data);

  FetchGrants(string lang, string payment_id);
  GetGrantCaptcha(string promotion_id, string promotion_type);
  GetWalletPassphrase() => (string wallet_passphrase);
  GetExcludedPublishersNumber() => (uint32 num_excluded_sites);
  RecoverWallet(string passPhrase);
  SolveGrantCaptcha(string solution, string promotionId);

  GetAddresses() => (map<string, string> addresses);
  GetBATAddress() => (string address);
  GetBTCAddress() => (string address);
  GetETHAddress() => (string address);
  GetLTCAddress() => (string address);

  SetRewardsMainEnabled(bool enabled);
  SetPublisherMinVisitTime(uint64 duration_in_seconds);
  SetPublisherMinVisits(uint32 visits);
  SetPublisherAllowNonVerified(bool allow);
  SetPublisherAllowVideos(bool allow);
  SetUserChangedContribution();
  SetContributionAmount(double amount);
  SetAutoContribute(bool enabled);

  OnTimer(uint32 timer_id);

  GetAllBalanceReports() => (map<string, string> reports);
  GetBalanceReport(int32 month, int32 year) => (bool result, string report);

  IsWalletCreated() => (bool wallet_created);

  GetPublisherActivityFromUrl(uint64 window_id, string visit_data,
      string publisher_blob);
  GetContributionAmount() => (double contribution_amount);
  GetPublisherBanner(string publisher_id) => (string banner);

  DoDirectDonation(string publisher_info, int32 amount, string currency);

  RemoveRecurringTip(string publisher_key);
  GetBootStamp() => (uint64 boot_stamp);
  GetRewardsMainEnabled() => (bool main_enabled);

  HasSufficientBalanceToReconcile() => (bool sufficient);

  GetAddressesForPaymentId() => (map<string, string> addresses);

  SetCatalogIssuers(string info);
  ConfirmAd(string info);
  GetTransactionHistoryForThisCycle() => (string transactions);
  GetRewardsInternalsInfo() => (string info);

  GetRecurringTips() => (array<string> list);
  GetOneTimeTips() => (array<string> list);

  GetActivityInfoList(uint32 start, uint32 limit, string json_filter) =>
      (array<string> list, uint32 number);

  LoadPublisherInfo(string publisher_key) => (uint32 result, string info);
  RefreshPublisher(string publisher_key) => (bool verified);

  StartAutoContribute();
};

interface BatLedgerClient {
  [Sync]
  GenerateGUID() => (string guid);
  LoadLedgerState() => (int32 result, string data);
  OnWalletInitialized(int32 result);
  LoadPublisherState() => (int32 result, string data);
  LoadPublisherList() => (int32 result, string data);
  SaveLedgerState(string ledger_state) => (int32 result);
  SavePublisherState(string publisher_state) => (int32 result);
  SavePublishersList(string publishers_list) => (int32 result);

  OnWalletProperties(int32 result, string info);
  OnGrant(int32 result, string grant);
  OnGrantCaptcha(string image, string hint);
  OnRecoverWallet(int32 result, double balance, array<string> grants);
  OnReconcileComplete(int32 result, string viewing_id, int32 category,
      string probi);
  OnGrantFinish(int32 result, string grant);

  SavePublisherInfo(string publisher_info) => (int32 result,
      string publisher_info);
  LoadPublisherInfo(string publisher_key) => (int32 result, string publisher_info);
  LoadPanelPublisherInfo(string filter) => (int32 result,
      string publisher_info);
  LoadMediaPublisherInfo(string media_key) => (int32 result,
      string publisher_info);

  OnPanelPublisherInfo(int32 result, string info, uint64 window_id);
  FetchFavIcon(string url, string favicon_key) => (bool success,
      string favicon_url);
  GetRecurringTips() => (array<string> publisher_info_list,
      uint32 next_record);
  GetOneTimeTips() => (array<string> publisher_info_list,
      uint32 next_record);

  LoadNicewareList() => (int32 result, string data);
  OnRemoveRecurring(string publisher_key) => (int32 result);

  LoadURL(string url, array<string> headers, string content,
      string content_type, int32 method) => (int32 status_code, string response,
        map<string, string> headers);

  [Sync]
  SetTimer(uint64 time_offset) => (uint32 timer_id);
  KillTimer(uint32 timer_id);
  OnExcludedSitesChanged(string publisher_id, int32 exclude);
  SaveContributionInfo(string probi, int32 month, int32 year, uint32 date,
      string publisher_key, int32 category);
  SaveMediaPublisherInfo(string media_key, string publisher_id);
  FetchGrants(string lang, string payment_id);
  GetGrantCaptcha(string promotion_id, string promotion_type);

  [Sync]
  URIEncode(string value) => (string encoded_value);

  SavePendingContribution(string list);

  LoadActivityInfo(string filter) => (int32 result, string publisher_info);

  SaveActivityInfo(string publisher_info) => (int32 result,
      string publisher_info);

  OnRestorePublishers() => (bool result);

  GetActivityInfoList(uint32 start, uint32 limit, string filter) => (
      array<string> publisher_info_list, uint32 next_record);

  SaveNormalizedPublisherList(string list);

  SaveState(string name, string value) => (int32 result);
  LoadState(string name) => (int32 result, string value);
  ResetState(string name) => (int32 result);
  SetConfirmationsIsReady(bool is_ready);
  ConfirmationsTransactionHistoryDidChange();

  GetExcludedPublishersNumberDB() => (uint32 number);
};
