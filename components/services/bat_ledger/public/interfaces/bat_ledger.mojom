// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// You can obtain one at http://mozilla.org/MPL/2.0/.
module bat_ledger.mojom;

import "brave/vendor/bat-native-ledger/include/bat/ledger/public/interfaces/ledger.mojom";
import "brave/vendor/bat-native-ledger/include/bat/ledger/public/interfaces/ledger_database.mojom";

const string kServiceName = "bat_ledger";

interface BatLedgerService {
  Create(associated BatLedgerClient bat_ledger_client,
         associated BatLedger& bat_ledger);
  SetEnvironment(ledger.mojom.Environment environment);
  SetDebug(bool isDebug);
  SetReconcileTime(int32 time);
  SetShortRetries(bool short_retries);
  SetTesting();

  GetEnvironment() => (ledger.mojom.Environment environment);
  GetDebug() => (bool debug);
  GetReconcileTime() => (int32 time);
  GetShortRetries() => (bool short_retries);
};

interface BatLedger {
  Initialize(bool execute_create_script) => (ledger.mojom.Result result);
  CreateWallet(string safetynet_token) => (ledger.mojom.Result result);
  FetchWalletProperties() =>
      (ledger.mojom.Result result, ledger.mojom.WalletProperties properties);

  GetAutoContributeProps() => (ledger.mojom.AutoContributeProps props);
  GetPublisherMinVisitTime() => (uint64 min_visit_time);
  GetPublisherMinVisits() => (uint32 min_visits);
  GetPublisherAllowNonVerified() => (bool allowed);
  GetPublisherAllowVideos() => (bool allowed);
  GetAutoContribute() => (bool auto_contribute);
  GetReconcileStamp() => (uint64 reconcile_stamp);

  OnLoad(ledger.mojom.VisitData visit_data, uint64 current_time);
  OnUnload(uint32 tab_id, uint64 current_time);
  OnShow(uint32 tab_id, uint64 current_time);
  OnHide(uint32 tab_id, uint64 current_time);
  OnForeground(uint32 tab_id, uint64 current_time);
  OnBackground(uint32 tab_id, uint64 current_time);

  OnPostData(string url,
             string first_party_url,
             string referrer,
             string post_data,
             ledger.mojom.VisitData visit_data);
  OnXHRLoad(uint32 tab_id,
            string url,
            map<string, string> parts,
            string first_party_url,
            string referrer,
            ledger.mojom.VisitData visit_data);

  SetPublisherExclude(string publisher_key, ledger.mojom.PublisherExclude exclude) => (ledger.mojom.Result result);
  RestorePublishers() => (ledger.mojom.Result result);
  FetchPromotions() => (ledger.mojom.Result result, array<ledger.mojom.Promotion> promotion);
  ClaimPromotion(string payload) => (ledger.mojom.Result result, string response);
  AttestPromotion(string promotion_id, string solution) => (ledger.mojom.Result result, ledger.mojom.Promotion? promotion);
  GetWalletPassphrase() => (string wallet_passphrase);
  RecoverWallet(string passPhrase) => (ledger.mojom.Result result, double balance);
  
  SetRewardsMainEnabled(bool enabled);
  SetPublisherMinVisitTime(uint64 duration_in_seconds);
  SetPublisherMinVisits(uint32 visits);
  SetPublisherAllowNonVerified(bool allow);
  SetPublisherAllowVideos(bool allow);
  SetUserChangedContribution();
  SetContributionAmount(double amount);
  SetAutoContribute(bool enabled);
  UpdateAdsRewards();

  OnTimer(uint32 timer_id);

  GetBalanceReport(ledger.mojom.ActivityMonth month, int32 year) =>
      (ledger.mojom.Result result, ledger.mojom.BalanceReportInfo report);

  IsWalletCreated() => (bool wallet_created);

  GetPublisherActivityFromUrl(uint64 window_id,
      ledger.mojom.VisitData visit_data,
      string publisher_blob);
  GetContributionAmount() => (double contribution_amount);
  GetPublisherBanner(string publisher_id) =>
      (ledger.mojom.PublisherBanner? banner);

  DoTip(string publisher_id, double amount, ledger.mojom.PublisherInfo? info, bool recurring) => (ledger.mojom.Result result);

  RemoveRecurringTip(string publisher_key) => (ledger.mojom.Result result);
  GetBootStamp() => (uint64 boot_stamp);
  GetRewardsMainEnabled() => (bool main_enabled);

  HasSufficientBalanceToReconcile() => (bool sufficient);

  SetCatalogIssuers(string json);
  ConfirmAdNotification(string json);
  ConfirmAction(string creative_instance_id, string creative_set_id, string confirmation_type);
  GetTransactionHistory() => (string json);
  GetRewardsInternalsInfo() => (ledger.mojom.RewardsInternalsInfo info);

  SaveRecurringTip(ledger.mojom.RecurringTip info) => (ledger.mojom.Result result);
  GetRecurringTips() => (array<ledger.mojom.PublisherInfo> list);
  GetOneTimeTips() => (array<ledger.mojom.PublisherInfo> list);

  GetActivityInfoList(uint32 start, uint32 limit, ledger.mojom.ActivityInfoFilter? filter) =>
      (array<ledger.mojom.PublisherInfo> list);

  GetExcludedList() => (array<ledger.mojom.PublisherInfo> list);

  RefreshPublisher(string publisher_key) => (ledger.mojom.PublisherStatus status);

  StartMonthlyContribution();

  SaveMediaInfo(string type, map<string, string> args) =>
    (ledger.mojom.Result result, ledger.mojom.PublisherInfo? publisher_info);

  SetInlineTipSetting(string key, bool enabled);

  GetInlineTipSetting(string key) => (bool enabled);

  GetShareURL(string type, map<string, string> args) =>
      (string url);

  GetPendingContributions() => (array<ledger.mojom.PendingContributionInfo> list);

  RemovePendingContribution(uint64 id) => (ledger.mojom.Result result);

  RemoveAllPendingContributions() => (ledger.mojom.Result result);

  GetPendingContributionsTotal() => (double amount);

  FetchBalance() => (ledger.mojom.Result result, ledger.mojom.Balance balance);

  GetExternalWallet(string wallet_type) => (ledger.mojom.Result result, ledger.mojom.ExternalWallet? wallet);

  ExternalWalletAuthorization(string wallet_type, map<string, string> args) => (ledger.mojom.Result result, map<string, string> args);

  DisconnectWallet(string wallet_type) => (ledger.mojom.Result result);

  GetAnonWalletStatus() => (ledger.mojom.Result result);

  GetTransactionReport(ledger.mojom.ActivityMonth month, int32 year) => (array<ledger.mojom.TransactionReportInfo> list);

  GetContributionReport(ledger.mojom.ActivityMonth month, int32 year) => (array<ledger.mojom.ContributionReportInfo> list);
};

interface BatLedgerClient {
  [Sync]
  GenerateGUID() => (string guid);
  LoadLedgerState() => (ledger.mojom.Result result, string data);
  LoadPublisherState() => (ledger.mojom.Result result, string data);
  SaveLedgerState(string ledger_state) => (ledger.mojom.Result result);
  SavePublisherState(string publisher_state) => (ledger.mojom.Result result);

  OnWalletProperties(ledger.mojom.Result result, ledger.mojom.WalletProperties? properties);
  OnReconcileComplete(ledger.mojom.Result result, string viewing_id,
      double amount, ledger.mojom.RewardsType type);
  LoadMediaPublisherInfo(string media_key) =>
      (ledger.mojom.Result result, ledger.mojom.PublisherInfo? publisher_info);

  OnPanelPublisherInfo(ledger.mojom.Result result,
                       ledger.mojom.PublisherInfo publisher_info,
                       uint64 window_id);
  FetchFavIcon(string url, string favicon_key) => (bool success,
      string favicon_url);
  SaveRecurringTip(ledger.mojom.RecurringTip info) => (ledger.mojom.Result result);
  GetRecurringTips() => (array<ledger.mojom.PublisherInfo> publisher_info_list);
  GetOneTimeTips() => (array<ledger.mojom.PublisherInfo> publisher_info_list);

  LoadNicewareList() => (ledger.mojom.Result result, string data);
  RemoveRecurringTip(string publisher_key) => (ledger.mojom.Result result);

  LoadURL(string url, array<string> headers, string content,
      string content_type, ledger.mojom.UrlMethod method) => (int32 status_code, string response,
        map<string, string> headers);

  [Sync]
  SetTimer(uint64 time_offset) => (uint32 timer_id);
  KillTimer(uint32 timer_id);
  SaveContributionInfo(ledger.mojom.ContributionInfo info) => (ledger.mojom.Result result);
  SaveMediaPublisherInfo(string media_key, string publisher_id);

  [Sync]
  URIEncode(string value) => (string encoded_value);

  SavePendingContribution(array<ledger.mojom.PendingContribution> list) => (ledger.mojom.Result result);

  PublisherListNormalized(array<ledger.mojom.PublisherInfo> list);

  SaveState(string name, string value) => (ledger.mojom.Result result);
  LoadState(string name) => (ledger.mojom.Result result, string value);
  ResetState(string name) => (ledger.mojom.Result result);

  [Sync]
  GetBooleanState(string name) => (bool value);
  SetBooleanState(string name, bool value);
  [Sync]
  GetIntegerState(string name) => (int32 value);
  SetIntegerState(string name, int32 value);
  [Sync]
  GetDoubleState(string name) => (double value);
  SetDoubleState(string name, double value);
  [Sync]
  GetStringState(string name) => (string value);
  SetStringState(string name, string value);
  [Sync]
  GetInt64State(string name) => (int64 value);
  SetInt64State(string name, int64 value);
  [Sync]
  GetUint64State(string name) => (uint64 value);
  SetUint64State(string name, uint64 value);
  ClearState(string name);

  [Sync]
  GetBooleanOption(string name) => (bool value);
  [Sync]
  GetIntegerOption(string name) => (int32 value);
  [Sync]
  GetDoubleOption(string name) => (double value);
  [Sync]
  GetStringOption(string name) => (string value);
  [Sync]
  GetInt64Option(string name) => (int64 value);
  [Sync]
  GetUint64Option(string name) => (uint64 value);

  SetConfirmationsIsReady(bool is_ready);
  ConfirmationsTransactionHistoryDidChange();

  GetPendingContributions() => (array<ledger.mojom.PendingContributionInfo> list);

  RemovePendingContribution(uint64 id) => (ledger.mojom.Result result);

  RemoveAllPendingContributions() => (ledger.mojom.Result result);

  GetPendingContributionsTotal() => (double amount);

  OnContributeUnverifiedPublishers(ledger.mojom.Result result, string publisher_key,
      string publisher_name);

  GetExternalWallets() => (map<string, ledger.mojom.ExternalWallet?> wallets);

  SaveExternalWallet(string wallet_type, ledger.mojom.ExternalWallet wallet);

  ShowNotification(string type, array<string> args) => (ledger.mojom.Result result);

  ClearAndInsertServerPublisherList(array<ledger.mojom.ServerPublisherInfo> list) => (ledger.mojom.Result result);

  GetServerPublisherInfo(string publisher_key) => (ledger.mojom.ServerPublisherInfo? info);

  [Sync]
  GetTransferFees(string wallet_type) => (map<string, ledger.mojom.TransferFee> list);
  SetTransferFee(string wallet_type, ledger.mojom.TransferFee transfer_fee);
  RemoveTransferFee(string wallet_type, string id);
  InsertOrUpdateContributionQueue(ledger.mojom.ContributionQueue info) => (ledger.mojom.Result result);
  DeleteContributionQueue(uint64 id) => (ledger.mojom.Result result);
  GetFirstContributionQueue() => (ledger.mojom.ContributionQueue? info);
  InsertOrUpdatePromotion(ledger.mojom.Promotion info) => (ledger.mojom.Result result);
  GetPromotion(string id) => (ledger.mojom.Promotion? info);
  GetAllPromotions() => (map<string, ledger.mojom.Promotion> promotions);
  DeletePromotionList(array<string> id_list) => (ledger.mojom.Result result);
  SaveUnblindedTokenList(array<ledger.mojom.UnblindedToken> list) => (ledger.mojom.Result result);
  GetAllUnblindedTokens() => (array<ledger.mojom.UnblindedToken> info);
  DeleteUnblindedTokens(array<string> id_list) => (ledger.mojom.Result result);
  DeleteUnblindedTokensForPromotion(string promotion_id) => (ledger.mojom.Result result);
  [Sync]
  GetClientInfo() => (ledger.mojom.ClientInfo info);
  UnblindedTokensReady();

  GetTransactionReport(ledger.mojom.ActivityMonth month, int32 year) => (array<ledger.mojom.TransactionReportInfo> list);

  GetContributionReport(ledger.mojom.ActivityMonth month, int32 year) => (array<ledger.mojom.ContributionReportInfo> list);

  GetIncompleteContributions() => (array<ledger.mojom.ContributionInfo> list);

  GetContributionInfo(string contribution_id) => (ledger.mojom.ContributionInfo info);

  UpdateContributionInfoStepAndCount(string contribution_id, ledger.mojom.ContributionStep step, int32 retry_count) => (ledger.mojom.Result result);

  UpdateContributionInfoContributedAmount(string contribution_id, string publisher_key) => (ledger.mojom.Result result);

  ReconcileStampReset();

  RunDBTransaction(ledger_database.mojom.DBTransaction transaction) => (ledger_database.mojom.DBCommandResponse response);

  GetCreateScript() => (string script, int32 table_version);
};
