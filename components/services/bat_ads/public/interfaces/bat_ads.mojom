/* Copyright (c) 2019 The Brave Authors. All rights reserved.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at https://mozilla.org/MPL/2.0/. */
module bat_ads.mojom;

import "brave/components/brave_ads/core/mojom/brave_ads.mojom";
import "mojo/public/mojom/base/big_string.mojom";
import "mojo/public/mojom/base/file.mojom";
import "mojo/public/mojom/base/time.mojom";
import "mojo/public/mojom/base/values.mojom";
import "url/mojom/url.mojom";

interface BatAdsService {
  Create(pending_associated_remote<BatAdsClient>
             bat_ads_client_pending_associated_remote,
         pending_associated_receiver<BatAds>
             bat_ads_pending_associated_receiver,
         pending_receiver<BatAdsClientNotifier>
             bat_ads_client_notifier) => ();
};

interface BatAdsClientNotifier {
  // See AdsClientNotifier for documentation.

  NotifyDidInitializeAds();

  NotifyLocaleDidChange(string locale);

  NotifyPrefDidChange(string path);

  NotifyResourceComponentDidChange(string manifest_version, string id);
  NotifyDidUnregisterResourceComponent(string id);

  NotifyRewardsWalletDidUpdate(string payment_id, string recovery_seed_base64);

  NotifyTabTextContentDidChange(int32 tab_id,
                                array<url.mojom.Url> redirect_chain,
                                mojo_base.mojom.BigString text);
  NotifyTabHtmlContentDidChange(int32 tab_id,
                                array<url.mojom.Url> redirect_chain,
                                mojo_base.mojom.BigString html);
  NotifyTabDidStartPlayingMedia(int32 tab_id);
  NotifyTabDidStopPlayingMedia(int32 tab_id);
  NotifyTabDidChange(int32 tab_id,
                     array<url.mojom.Url> redirect_chain,
                     bool is_new_navigation,
                     bool is_restoring,
                     bool is_error_page,
                     bool is_visible);
  NotifyDidCloseTab(int32 tab_id);

  NotifyUserGestureEventTriggered(int32 page_transition_type);

  NotifyUserDidBecomeIdle();
  NotifyUserDidBecomeActive(mojo_base.mojom.TimeDelta idle_time,
                            bool screen_was_locked);

  NotifyBrowserDidEnterForeground();
  NotifyBrowserDidEnterBackground();
  NotifyBrowserDidBecomeActive();
  NotifyBrowserDidResignActive();

  NotifyDidSolveAdaptiveCaptcha();
};

interface BatAdsClient {
  // See AdsClient for documentation.

  [Sync]
  IsNetworkConnectionAvailable() => (bool available);

  [Sync]
  IsBrowserActive() => (bool is_browser_active);
  [Sync]
  IsBrowserInFullScreenMode() => (bool is_browser_in_full_screen_mode);

  [Sync]
  CanShowNotificationAds() => (bool can_show);
  [Sync]
  CanShowNotificationAdsWhileBrowserIsBackgrounded() => (bool can_show);
  ShowNotificationAd(mojo_base.mojom.DictionaryValue value);
  CloseNotificationAd(string placement_id);

  CacheAdEventForInstanceId(
      string id,
      brave_ads.mojom.AdType mojom_ad_type,
      brave_ads.mojom.ConfirmationType mojom_confirmation_type,
      mojo_base.mojom.Time time);
  [Sync]
  GetCachedAdEvents(brave_ads.mojom.AdType mojom_ad_type,
                    brave_ads.mojom.ConfirmationType mojom_confirmation_type) =>
      (array<mojo_base.mojom.Time> ad_events);
  ResetAdEventCacheForInstanceId(string id);

  GetSiteHistory(int32 max_count, int32 days_ago) =>
      (array<url.mojom.Url> site_history);

  UrlRequest(brave_ads.mojom.UrlRequestInfo mojom_url_request) =>
      (brave_ads.mojom.UrlResponseInfo mojom_url_response);

  Save(string name, string value) => (bool success);
  Load(string name) => (string? value);

  LoadResourceComponent(string id, int32 version) =>
      (mojo_base.mojom.File? file);

  [Sync]
  LoadDataResource(string name) => (mojo_base.mojom.BigString value);

  ShowScheduledCaptcha(string payment_id, string captcha_id);

  RunDBTransaction(brave_ads.mojom.DBTransactionInfo mojom_db_transaction) =>
      (brave_ads.mojom.DBTransactionResultInfo mojom_db_transaction_result);

  RecordP2AEvents(array<string> events);

  [Sync]
  FindProfilePref(string path) => (bool value);
  [Sync]
  GetProfilePref(string path) => (mojo_base.mojom.Value? value);
  SetProfilePref(string path, mojo_base.mojom.Value value);
  ClearProfilePref(string path);
  [Sync]
  HasProfilePrefPath(string path) => (bool value);

  [Sync]
  FindLocalStatePref(string path) => (bool value);
  [Sync]
  GetLocalStatePref(string path) => (mojo_base.mojom.Value? value);
  SetLocalStatePref(string path, mojo_base.mojom.Value value);
  ClearLocalStatePref(string path);
  [Sync]
  HasLocalStatePrefPath(string path) => (bool value);

  [Sync]
  GetVirtualPrefs() => (mojo_base.mojom.DictionaryValue value);

  Log(string file, int32 line, int32 verbose_level, string message);
};

interface BatAdsObserver {
  // See AdsObserver for documentation.

  OnAdRewardsDidChange();

  OnBrowserUpgradeRequiredToServeAds();

  OnIneligibleWalletToServeAds();

  OnRemindUser(brave_ads.mojom.ReminderType mojom_reminder_type);
};

interface BatAds {
  // See Ads for documentation.

  AddBatAdsObserver(pending_remote<BatAdsObserver> bat_ads_observer);

  SetSysInfo(brave_ads.mojom.SysInfo mojom_sys_info);
  SetBuildChannel(brave_ads.mojom.BuildChannelInfo mojom_build_channel);
  SetFlags(brave_ads.mojom.Flags mojom_flags);

  Initialize(brave_ads.mojom.WalletInfo? mojom_wallet) => (bool success);
  Shutdown() => (bool success);

  GetDiagnostics() => (mojo_base.mojom.ListValue? value);

  GetStatementOfAccounts() => (brave_ads.mojom.StatementInfo? mojom_statement);

  MaybeServeInlineContentAd(string dimensions) =>
      (string dimensions, mojo_base.mojom.DictionaryValue? value);
  TriggerInlineContentAdEvent(
      string placement_id,
      string creative_instance_id,
      brave_ads.mojom.InlineContentAdEventType mojom_ad_event_type) =>
          (bool success);

  MaybeServeNewTabPageAd() => (mojo_base.mojom.DictionaryValue? value);
  TriggerNewTabPageAdEvent(
      string placement_id,
      string creative_instance_id,
      brave_ads.mojom.NewTabPageAdEventType mojom_ad_event_type) =>
          (bool success);

  MaybeGetNotificationAd(string placement_id) =>
      (mojo_base.mojom.DictionaryValue? value);
  TriggerNotificationAdEvent(
      string placement_id,
      brave_ads.mojom.NotificationAdEventType mojom_ad_event_type) =>
          (bool success);

  TriggerPromotedContentAdEvent(
      string placement_id,
      string creative_instance_id,
      brave_ads.mojom.PromotedContentAdEventType mojom_ad_event_type) =>
          (bool success);

  TriggerSearchResultAdEvent(
      brave_ads.mojom.CreativeSearchResultAdInfo mojom_creative_ad,
      brave_ads.mojom.SearchResultAdEventType mojom_ad_event_type) =>
          (bool success);

  PurgeOrphanedAdEventsForType(brave_ads.mojom.AdType mojom_ad_type) =>
      (bool success);

  GetAdHistory(mojo_base.mojom.Time from_time, mojo_base.mojom.Time to_time) =>
      (mojo_base.mojom.ListValue? value);

  ToggleLikeAd(brave_ads.mojom.ReactionInfo mojom_reaction) => (bool success);
  ToggleDislikeAd(brave_ads.mojom.ReactionInfo mojom_reaction) =>
      (bool success);
  ToggleLikeSegment(brave_ads.mojom.ReactionInfo mojom_reaction) =>
      (bool success);
  ToggleDislikeSegment(brave_ads.mojom.ReactionInfo mojom_reaction) =>
      (bool success);
  ToggleSaveAd(brave_ads.mojom.ReactionInfo mojom_reaction) => (bool success);
  ToggleMarkAdAsInappropriate(brave_ads.mojom.ReactionInfo mojom_reaction) =>
      (bool success);
};
