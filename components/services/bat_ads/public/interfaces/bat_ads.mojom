// Copyright (c) 2019 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// You can obtain one at http://mozilla.org/MPL/2.0/.
module bat_ads.mojom;

import "brave/vendor/bat-native-ads/include/bat/ads/public/interfaces/ads.mojom";

const string kServiceName = "bat_ads";

// Service which hands out bat ads.
interface BatAdsService {
  Create(pending_associated_remote<BatAdsClient> bat_ads_client,
         pending_associated_receiver<BatAds> database) => ();
  SetEnvironment(ads.mojom.Environment environment) => ();
  SetDebug(bool is_debug) => ();
};

interface BatAdsClient {
  [Sync]
  IsEnabled() => (bool is_enabled);
  [Sync]
  ShouldAllowAdConversionTracking() => (bool should_allow);
  [Sync]
  GetAdsPerHour() => (uint64 ads_per_hour);
  [Sync]
  GetAdsPerDay() => (uint64 ads_per_day);
  [Sync]
  IsNetworkConnectionAvailable() => (bool available);
  [Sync]
  GetClientInfo(string client_info) => (string client_info);
  [Sync]
  GetUserModelLanguages() => (array<string> languages);
  [Sync]
  IsForeground() => (bool is_foreground);
  [Sync]
  ShouldShowNotifications() => (bool should_show);
  [Sync]
  LoadJsonSchema(string name) => (string json);
  [Sync]
  CanShowBackgroundNotifications() => (bool can_show);

  SetIdleThreshold(int32 threshold);
  LoadUserModelForLanguage(string language) => (int32 result, string value);
  ShowNotification(string notification_info);
  CloseNotification(string uuid);
  SetCatalogIssuers(string issuers_info);
  ConfirmAd(string json, string confirmation_type);
  ConfirmAction(string creative_instance_id, string creative_set_id, string confirmation_type);
  URLRequest(string url, array<string> headers, string content, string content_type, int32 method) => (int32 status_code, string content, map<string, string> headers);
  Save(string name, string value) => (int32 result);
  SaveBundleState(string bundle_state) => (int32 result);
  Load(string name) => (int32 result, string value);
  Reset(string name) => (int32 result);
  GetCreativeAdNotifications(array<string> categories) => (int32 result, array<string> categories, array<string> json_list);
  GetAdConversions() => (int32 result, array<string> json_list);
  Log(string file, int32 line, int32 verbose_level, string message);
};

interface BatAds {
  Initialize() => (int32 result);
  Shutdown() => (int32 result);
  SetConfirmationsIsReady(bool is_ready);
  ChangeLocale(string locale);
  OnPageLoaded(string url, string html);
  OnUnIdle();
  OnIdle();
  OnForeground();
  OnBackground();
  OnMediaPlaying(int32 tab_id);
  OnMediaStopped(int32 tab_id);
  OnTabUpdated(int32 tab_id, string url, bool is_active, bool is_incognito);
  OnTabClosed(int32 tab_id);
  GetAdNotification(string uuid) => (string json);
  OnAdNotificationEvent(string uuid, ads.mojom.AdNotificationEventType event_type);
  RemoveAllHistory() => (int32 result);
  GetAdsHistory(uint64 from_timestamp, uint64 to_timestamp) => (string json);
  ToggleAdThumbUp(string creative_instance_id, string creative_set_id, int32 action) => (string creative_instance_id, int32 action);
  ToggleAdThumbDown(string creative_instance_id, string creative_set_id, int32 action) => (string creative_instance_id, int32 action);
  ToggleAdOptInAction(string category, int32 action) => (string category, int32 action);
  ToggleAdOptOutAction(string category, int32 action) => (string category, int32 action);
  ToggleSaveAd(string creative_instance_id, string creative_set_id, bool saved) => (string creative_instance_id, bool saved);
  ToggleFlagAd(string creative_instance_id, string creative_set_id, bool flagged) => (string creative_instance_id, bool flagged);
};
