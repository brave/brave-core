/* Copyright (c) 2019 The Brave Authors. All rights reserved.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at https://mozilla.org/MPL/2.0/. */
module bat_ads.mojom;

import "brave/components/brave_ads/common/interfaces/ads.mojom";
import "brave/components/brave_federated/public/interfaces/brave_federated.mojom";
import "mojo/public/mojom/base/big_string.mojom";
import "mojo/public/mojom/base/file.mojom";
import "mojo/public/mojom/base/time.mojom";
import "mojo/public/mojom/base/values.mojom";
import "url/mojom/url.mojom";

interface BatAdsService {
  Create(pending_associated_remote<BatAdsClient> bat_ads_client,
         pending_associated_receiver<BatAds> bat_ads,
         pending_receiver<BatAdsClientNotifier>
             bat_ads_client_notifier) => ();

  SetSysInfo(brave_ads.mojom.SysInfo sys_info) => ();

  SetBuildChannel(brave_ads.mojom.BuildChannelInfo build_channel) => ();
};

interface BatAdsClientNotifier {
  // See AdsClientNotifier for documentation.

  NotifyLocaleDidChange(string locale);

  NotifyPrefDidChange(string path);

  NotifyDidUpdateResourceComponent(string id);

  NotifyTabHtmlContentDidChange(int32 tab_id,
                                array<url.mojom.Url> redirect_chain,
                                string html);
  NotifyTabTextContentDidChange(int32 tab_id,
                                array<url.mojom.Url> redirect_chain,
                                string text);
  NotifyTabDidStartPlayingMedia(int32 tab_id);
  NotifyTabDidStopPlayingMedia(int32 tab_id);
  NotifyTabDidChange(int32 tab_id,
                     array<url.mojom.Url> redirect_chain,
                     bool is_visible,
                     bool is_incognito);
  NotifyDidCloseTab(int32 tab_id);

  NotifyUserGestureEventTriggered(int32 page_transition_type);

  NotifyUserDidBecomeIdle();
  NotifyUserDidBecomeActive(mojo_base.mojom.TimeDelta idle_time,
                            bool screen_was_locked);

  NotifyBrowserDidEnterForeground();
  NotifyBrowserDidEnterBackground();
  NotifyBrowserDidBecomeActive();
  NotifyBrowserDidResignActive();
};

interface BatAdsClient {
  // See AdsClient for documentation.

  [Sync]
  IsNetworkConnectionAvailable() => (bool available);

  [Sync]
  IsBrowserActive() => (bool is_browser_active);
  [Sync]
  IsBrowserInFullScreenMode() => (bool is_browser_in_full_screen_mode);

  [Sync]
  CanShowNotificationAds() => (bool can_show);
  [Sync]
  CanShowNotificationAdsWhileBrowserIsBackgrounded() => (bool can_show);
  ShowNotificationAd(mojo_base.mojom.DictionaryValue value);
  CloseNotificationAd(string placement_id);

  ShowReminder(brave_ads.mojom.ReminderType type);

  UpdateAdRewards();

  RecordAdEventForId(string id,
                     string ad_type,
                     string confirmation_type,
                     mojo_base.mojom.Time time);
  [Sync]
  GetAdEventHistory(string ad_type, string confirmation_type) =>
      (array<mojo_base.mojom.Time> ad_events);
  ResetAdEventHistoryForId(string id);

  GetBrowsingHistory(int32 max_count, int32 days_ago) =>
      (array<url.mojom.Url> history);

  UrlRequest(brave_ads.mojom.UrlRequestInfo request) =>
      (brave_ads.mojom.UrlResponseInfo response);

  Save(string name, string value) => (bool success);
  Load(string name) => (bool success, string value);
  LoadFileResource(string id, int32 version) => (mojo_base.mojom.File? file);
  [Sync]
  LoadDataResource(string name) => (mojo_base.mojom.BigString value);

  GetScheduledCaptcha(string payment_id) => (string captcha_id);
  ShowScheduledCaptchaNotification(string payment_id, string captcha_id);
  ClearScheduledCaptcha();

  RunDBTransaction(brave_ads.mojom.DBTransactionInfo transaction) =>
      (brave_ads.mojom.DBCommandResponseInfo response);

  RecordP2AEvent(string name, mojo_base.mojom.ListValue value);

  AddTrainingSample(array<brave_federated.mojom.CovariateInfo>
                          training_sample);

  [Sync]
  GetBooleanPref(string path) => (bool value);
  SetBooleanPref(string path, bool value);
  [Sync]
  GetIntegerPref(string path) => (int32 value);
  SetIntegerPref(string path, int32 value);
  [Sync]
  GetDoublePref(string path) => (double value);
  SetDoublePref(string path, double value);
  [Sync]
  GetStringPref(string path) => (string value);
  SetStringPref(string path, string value);
  [Sync]
  GetInt64Pref(string path) => (int64 value);
  SetInt64Pref(string path, int64 value);
  [Sync]
  GetUint64Pref(string path) => (uint64 value);
  SetUint64Pref(string path, uint64 value);
  [Sync]
  GetTimePref(string path) => (mojo_base.mojom.Time value);
  SetTimePref(string path, mojo_base.mojom.Time value);
  [Sync]
  GetDictPref(string path) => (mojo_base.mojom.DictionaryValue? value);
  SetDictPref(string path, mojo_base.mojom.DictionaryValue value);
  [Sync]
  GetListPref(string path) => (mojo_base.mojom.ListValue? value);
  SetListPref(string path, mojo_base.mojom.ListValue value);
  ClearPref(string path);
  [Sync]
  HasPrefPath(string path) => (bool value);

  Log(string file, int32 line, int32 verbose_level, string message);
};

interface BatAds {
  // See Ads for documentation.

  Initialize() => (bool success);
  Shutdown() => (bool success);

  GetDiagnostics() => (mojo_base.mojom.ListValue? value);

  OnRewardsWalletDidChange(string payment_id, string recovery_seed);

  GetStatementOfAccounts() => (brave_ads.mojom.StatementInfo? statement);

  MaybeServeInlineContentAd(string dimensions) =>
      (string dimensions, mojo_base.mojom.DictionaryValue? value);
  TriggerInlineContentAdEvent(
      string placement_id,
      string creative_instance_id,
      brave_ads.mojom.InlineContentAdEventType event_type);

  MaybeServeNewTabPageAd() => (mojo_base.mojom.DictionaryValue? value);
  TriggerNewTabPageAdEvent(
      string placement_id,
      string creative_instance_id,
      brave_ads.mojom.NewTabPageAdEventType event_type);

  MaybeGetNotificationAd(string placement_id) =>
      (mojo_base.mojom.DictionaryValue? value);
  TriggerNotificationAdEvent(
      string placement_id,
      brave_ads.mojom.NotificationAdEventType event_type);

  TriggerPromotedContentAdEvent(
      string placement_id,
      string creative_instance_id,
      brave_ads.mojom.PromotedContentAdEventType event_type);

  TriggerSearchResultAdEvent(
      brave_ads.mojom.SearchResultAdInfo ad_mojom,
      brave_ads.mojom.SearchResultAdEventType event_type);

  PurgeOrphanedAdEventsForType(brave_ads.mojom.AdType ad_type) =>
      (bool success);

  GetHistory(mojo_base.mojom.Time from_time, mojo_base.mojom.Time to_time) =>
      (mojo_base.mojom.ListValue value);
  RemoveAllHistory() => (bool success);

  ToggleLikeAd(mojo_base.mojom.DictionaryValue value) =>
      (mojo_base.mojom.DictionaryValue value);
  ToggleDislikeAd(mojo_base.mojom.DictionaryValue value) =>
      (mojo_base.mojom.DictionaryValue value);

  ToggleMarkToReceiveAdsForCategory(string category, int32 action) =>
      (string category, int32 action);
  ToggleMarkToNoLongerReceiveAdsForCategory(string category, int32 action) =>
      (string category, int32 action);

  ToggleSaveAd(mojo_base.mojom.DictionaryValue value) =>
      (mojo_base.mojom.DictionaryValue value);

  ToggleMarkAdAsInappropriate(mojo_base.mojom.DictionaryValue value) =>
      (mojo_base.mojom.DictionaryValue value);
};
