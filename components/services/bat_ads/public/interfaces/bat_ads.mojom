// Copyright (c) 2019 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// You can obtain one at http://mozilla.org/MPL/2.0/.
module bat_ads.mojom;

import "brave/vendor/bat-native-ads/include/bat/ads/public/interfaces/ads.mojom";
import "brave/vendor/bat-native-ads/include/bat/ads/public/interfaces/ads_database.mojom";

// Service which hands out bat ads.
interface BatAdsService {
  Create(pending_associated_remote<BatAdsClient> bat_ads_client,
         pending_associated_receiver<BatAds> database) => ();
  SetEnvironment(ads.mojom.BraveAdsEnvironment environment) => ();
  SetSysInfo(ads.mojom.BraveAdsSysInfo sys_info) => ();
  SetBuildChannel(ads.mojom.BraveAdsBuildChannel build_channel) => ();
  SetDebug(bool is_debug) => ();
};

interface BatAdsClient {
  [Sync]
  IsNetworkConnectionAvailable() => (bool available);
  [Sync]
  IsForeground() => (bool is_foreground);
  [Sync]
  IsFullScreen() => (bool is_full_screen);
  [Sync]
  ShouldShowNotifications() => (bool should_show);
  [Sync]
  CanShowBackgroundNotifications() => (bool can_show);
  [Sync]
  GetAdEvents(string ad_type, string confirmation_type) => (array<uint64> ad_events);
  [Sync]
  LoadResourceForId(string id) => (string value);
  [Sync]
  GetBooleanPref(string path) => (bool value);
  [Sync]
  GetIntegerPref(string path) => (int32 value);
  [Sync]
  GetDoublePref(string path) => (double value);
  [Sync]
  GetStringPref(string path) => (string value);
  [Sync]
  GetInt64Pref(string path) => (int64 value);
  [Sync]
  GetUint64Pref(string path) => (uint64 value);

  ShowNotification(string json);
  CloseNotification(string uuid);
  RecordAdEvent(string ad_type, string confirmation_type, uint64 timestamp);
  UrlRequest(ads.mojom.BraveAdsUrlRequest request) => (ads.mojom.BraveAdsUrlResponse response);
  Save(string name, string value) => (int32 result);
  Load(string name) => (int32 result, string value);
  LoadAdsResource(string id, int32 version) => (int32 result, string value);
  GetBrowsingHistory(int32 max_count, int32 days_ago) => (array<string> history);
  RunDBTransaction(ads_database.mojom.DBTransaction transaction) => (ads_database.mojom.DBCommandResponse response);
  OnAdRewardsChanged();
  RecordP2AEvent(string name, ads.mojom.BraveAdsP2AEventType type, string value);
  Log(string file, int32 line, int32 verbose_level, string message);
  SetBooleanPref(string path, bool value);
  SetIntegerPref(string path, int32 value);
  SetDoublePref(string path, double value);
  SetStringPref(string path, string value);
  SetInt64Pref(string path, int64 value);
  SetUint64Pref(string path, uint64 value);
  ClearPref(string path);
};

interface BatAds {
  Initialize() => (int32 result);
  Shutdown() => (int32 result);
  ChangeLocale(string locale);
  OnPrefChanged(string path);
  OnHtmlLoaded(int32 tab_id, array<string> redirect_chain, string html);
  OnTextLoaded(int32 tab_id, array<string> redirect_chain, string text);
  OnUserGesture(int32 page_transition_type);
  OnUnIdle(int32 idle_time, bool was_locked);
  OnIdle();
  OnForeground();
  OnBackground();
  OnMediaPlaying(int32 tab_id);
  OnMediaStopped(int32 tab_id);
  OnTabUpdated(int32 tab_id, string url, bool is_active, bool is_browser_active, bool is_incognito);
  OnTabClosed(int32 tab_id);
  GetAdNotification(string uuid) => (string json);
  OnAdNotificationEvent(string uuid, ads.mojom.BraveAdsAdNotificationEventType event_type);
  OnNewTabPageAdEvent(string uuid, string creative_instance_id, ads.mojom.BraveAdsNewTabPageAdEventType event_type);
  OnPromotedContentAdEvent(string uuid, string creative_instance_id, ads.mojom.BraveAdsPromotedContentAdEventType event_type);
  GetInlineContentAd(string size) => (bool success, string dimensions, string ad);
  OnInlineContentAdEvent(string uuid, string creative_instance_id, ads.mojom.BraveAdsInlineContentAdEventType event_type);
  RemoveAllHistory() => (int32 result);
  OnWalletUpdated(string payment_id, string seed);
  ReconcileAdRewards();
  GetAdsHistory(uint64 from_timestamp, uint64 to_timestamp) => (string json);
  GetAccountStatement() => (bool success, string json);
  ToggleAdThumbUp(string creative_instance_id, string creative_set_id, int32 action) => (string creative_instance_id, int32 action);
  ToggleAdThumbDown(string creative_instance_id, string creative_set_id, int32 action) => (string creative_instance_id, int32 action);
  ToggleAdOptInAction(string category, int32 action) => (string category, int32 action);
  ToggleAdOptOutAction(string category, int32 action) => (string category, int32 action);
  ToggleSaveAd(string creative_instance_id, string creative_set_id, bool saved) => (string creative_instance_id, bool saved);
  ToggleFlagAd(string creative_instance_id, string creative_set_id, bool flagged) => (string creative_instance_id, bool flagged);
  OnResourceComponentUpdated(string id);
};
