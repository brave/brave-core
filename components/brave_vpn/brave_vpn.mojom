// Copyright (c) 2021 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// you can obtain one at http://mozilla.org/MPL/2.0/.

module brave_vpn.mojom;

// Used by the WebUI page to bootstrap bidirectional communication.
interface PanelHandlerFactory {
  // The WebUI calls this method when the page is first initialized.
  CreatePanelHandler(pending_remote<Page> page,
    pending_receiver<PanelHandler> panel_handler,
    pending_receiver<ServiceHandler> service_handler);
};

// Browser-side handler for requests from WebUI page.
interface PanelHandler {
  // Notify the backend that the UI is ready to be shown.
  ShowUI();

  // Notify the backend that the dialog should be closed.
  CloseUI();
};

interface ServiceObserver {
  OnConnectionCreated();
  OnConnectionRemoved();
  OnConnectionStateChanged(ConnectionState state);
  OnPurchasedStateChanged(PurchasedState state);
};

// Browser-side handler for vpn service things
interface ServiceHandler {
  GetConnectionState() => (ConnectionState state);
  GetPurchasedState() => (PurchasedState state);
  AddObserver(pending_remote<ServiceObserver> observer);
  CreateVPNConnection();
  Connect();
  Disconnect();
  // Gets all region from internal cache which is fetched from Guardian API
  GetAllRegions() => (array<Region> regions);
  // Gets region based on user's device timezone
  GetDeviceRegion() => (Region device_region);
  GetSelectedRegion() => (Region current_region);
  SetSelectedRegion(Region region);
  GetProductUrls() => (ProductUrls urls);
};

// WebUI-side handler for requests from the browser.
interface Page {
};

struct ProductUrls {
  string feedback;
  string about;
  string manage;
};

enum ConnectionState {
  CONNECTED,
  DISCONNECTED,
  CONNECTING,
  DISCONNECTING,
  CONNECT_FAILED,
};

enum PurchasedState {
  NOT_PURCHASED,
  PURCHASED,
  EXPIRED,
};

struct Region {
  string continent;
  string name;
  string name_pretty;
};
