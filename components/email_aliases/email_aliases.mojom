/* Copyright (c) 2025 The Brave Authors. All rights reserved.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at https://mozilla.org/MPL/2.0/. */

module email_aliases.mojom;

const uint8 kMaxAliases = 5;

enum AuthenticationStatus {
  kStartup,
  kUnauthenticated,
  kAuthenticating,
  kAuthenticated,
};

struct AuthState {
  AuthenticationStatus status;
  // The authentication email address for this current account
  string email;
  // Error message if authentication has failed somehow
  string? error_message;
};

struct Alias {
  // The alias email address for this alias
  string email;
  // Note attached by user
  string? note;
  // Domains where email is used
  array<string>? domains;
};

// Return value for EmailAliasesService::GenerateAlias()
union GenerateAliasResult {
  string alias_email;
  string error_message;
};

// Observer for change in email aliases state
interface EmailAliasesServiceObserver {

  // Called when the user's authentication state changes.
  OnAuthStateChanged(AuthState state);

  // Called when aliases have been updated for the currently authenticated
  // account.
  OnAliasesUpdated(array<Alias> aliases);

};

// Interface for managing email aliases
interface EmailAliasesService {

  // Initiate authentication using the user's auth email.
  RequestAuthentication(string auth_email) => (string? error_message);

  // Cancel pending authentication or log out if already authenticated.
  CancelAuthenticationOrLogout() => ();

  // Generate a proposed email alias.
  GenerateAlias() => (GenerateAliasResult result);

  // Create or Update an existing email alias.
  UpdateAlias(string alias_email, string? note) => (string? error_message);

  // Delete an email alias.
  DeleteAlias(string alias_email) => (string? error_message);

  // Add an email aliases observer.
  AddObserver(pending_remote<EmailAliasesServiceObserver> observer);

};

