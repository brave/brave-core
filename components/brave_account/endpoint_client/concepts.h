/* Copyright (c) 2025 The Brave Authors. All rights reserved.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at https://mozilla.org/MPL/2.0/. */

#ifndef BRAVE_COMPONENTS_BRAVE_ACCOUNT_ENDPOINT_CLIENT_CONCEPTS_H_
#define BRAVE_COMPONENTS_BRAVE_ACCOUNT_ENDPOINT_CLIENT_CONCEPTS_H_

#include <concepts>
#include <optional>
#include <string>
#include <string_view>

#include "base/json/json_writer.h"
#include "brave/components/api_request_helper/api_request_helper.h"
#include "url/gurl.h"

// This header defines C++20 concepts that reflect the interface of types
// generated by the JSON schema compiler. As such, it is encouraged to use the
// JSON schema compiler (see `generated_types` in
// //tools/json_schema_compiler/json_schema_api.gni) to produce types that
// satisfy these concepts, but compatible hand-written types may also be used.
// Encoding these requirements as concepts makes the contract explicit and
// produces clear diagnostics when a type does not conform, rather than
// cryptic secondary errors from unconstrained template instantiations.
namespace brave_account::endpoint_client::concepts {

namespace detail {

// Concept that checks whether `T` defines a non-static, accessible member
// function `ToValue()` such that:
//   - `t.ToValue()` can be passed to `base::WriteJson()`
//   - `&T::ToValue` is a valid member function pointer (ensures it's a
//      non-static member function)
//
// In short: models any type with a proper non-static `ToValue()` function
// whose result is suitable for JSON serialization via `base::WriteJson()`.
template <typename T>
concept ToValue = requires(T t) { base::WriteJson(t.ToValue()); } &&
                  std::is_member_function_pointer_v<decltype(&T::ToValue)>;

// Concept that checks whether `T` defines a static, accessible member
// function `FromValue()` such that:
//   - `result.value_body()` can be passed to `T::FromValue()`,
//      where `result` is an `api_request_helper::APIRequestResult`,
//      and that call yields `std::optional<T>`
//
// In short: models any type with a proper static `FromValue()` function
// whose result is a `std::optional<T>`, constructed from the
// `value_body()` of an `api_request_helper::APIRequestResult`.
template <typename T>
concept FromValue = requires(api_request_helper::APIRequestResult result) {
  { T::FromValue(result.value_body()) } -> std::same_as<std::optional<T>>;
};

// Concept that checks whether `T` defines a static, accessible member
// function `URL()` such that:
//   - `T::URL()` is a valid expression,
//      and that call yields `GURL`
//
// In short: models any type with a proper static `URL()` function
// whose result is a `GURL`.
template <typename T>
concept URL = requires {
  { T::URL() } -> std::same_as<GURL>;
};

// Concept that checks whether `T` defines a static, accessible member
// function `Method()` such that:
//   - `T::Method()` is a valid expression,
//      and that call yields a type convertible to `std::string_view`
//
// In short: models any type with a proper static `Method()` function
// whose result is convertible to `std::string_view`.
template <typename T>
concept Method = requires {
  { T::Method() } -> std::convertible_to<std::string_view>;
};

}  // namespace detail

template <typename T>
concept Request = detail::ToValue<T>;

template <typename T>
concept Response = detail::FromValue<T>;

template <typename T>
concept Error = detail::FromValue<T>;

template <typename T>
concept Endpoint =
    requires {
      typename T::Request;
      typename T::Response;
      typename T::Error;
    } && Request<typename T::Request> && Response<typename T::Response> &&
    Error<typename T::Error> && detail::URL<T> && detail::Method<T>;

}  // namespace brave_account::endpoint_client::concepts

#endif  // BRAVE_COMPONENTS_BRAVE_ACCOUNT_ENDPOINT_CLIENT_CONCEPTS_H_
