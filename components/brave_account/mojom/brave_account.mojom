// Copyright (c) 2025 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// You can obtain one at https://mozilla.org/MPL/2.0/.

module brave_account.mojom;

struct RegisterInitializeResult {
  // Verification token from the backend, locally encrypted with OSCrypt.
  string encryptedVerificationToken;
  // Response generated by the backend from the client's blindedMessage.
  string serializedResponse;
};

struct RegisterFinalizeResult {
  // Currently empty, serves as a placeholder for success.
};

enum RegisterErrorCode {
  // Client-side errors:
  kOpaqueError = -3,
  kVerificationTokenEncryptionFailed = -2,
  kVerificationTokenDecryptionFailed = -1,
  // Server-side errors:
  kMiscServerError                   = 0,
  // /v2/accounts/password/init:
  // - internal:
  kNewAccountEmailRequired           = 11005,
  kIntentNotAllowed                  = 13003,
  // - user-facing:
  kTooManyVerifications              = 13001,
  kAccountExists                     = 13004,
  kEmailDomainNotSupported           = 13006,
  // /v2/accounts/password/finalize:
  // - internal:
  kInterimPasswordStateNotFound      = 14001,
  kInterimPasswordStateExpired       = 14002,
  // - user-facing: -
};

struct RegisterError {
  uint32? statusCode;
  RegisterErrorCode? errorCode;
};

// Interface for a two-step registration process
// with the backend to create a Brave Account.
interface Authentication {
  // First step of the registration process.
  // `email`: user's email address.
  // `blindedMessage`: initial blinded request
  //                   produced by the OPAQUE library,
  //                   to be sent to the server.
  // Returns `RegisterInitializeResult` on success, or
  //         `RegisterError` on failure.
  RegisterInitialize(string email, string blindedMessage)
    => result<RegisterInitializeResult, RegisterError>;

  // Second step of the registration process.
  // `encryptedVerificationToken`: verification token from the backend,
  //                               locally encrypted with OSCrypt,
  //                               required by the underlying endpoint
  //                               to complete the step.
  // `serializedRecord`: final message produced by the OPAQUE library,
  //                     derived by unblinding `serializedResponse`,
  //                     containing cryptographic identifiers,
  //                     to be sent to the server.
  // Returns `RegisterFinalizeResult` on success, or
  //         `RegisterError` on failure.
  RegisterFinalize(string encryptedVerificationToken, string serializedRecord)
    => result<RegisterFinalizeResult, RegisterError>;
};
