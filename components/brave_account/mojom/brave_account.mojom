// Copyright (c) 2025 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// You can obtain one at https://mozilla.org/MPL/2.0/.

module brave_account.mojom;

struct RegisterInitializeResult {
  // Verification token from the backend, locally encrypted with OSCrypt.
  string encryptedVerificationToken;
  // Response generated by the backend from the client's blindedMessage.
  string serializedResponse;
};

struct RegisterFinalizeResult {
  // Currently empty, serves as a placeholder for success.
};

enum RegisterFailureReason {
  kInitializeBadRequest,   // /v2/accounts/password/init: 400
  kInitializeUnauthorized, // /v2/accounts/password/init: 401
  kInitializeServerError,  // /v2/accounts/password/init: 5XX
  kInitializeUnknown,
  kInitializeUnexpected,
  kFinalizeBadRequest,     // /v2/accounts/password/finalize: 400
  kFinalizeUnauthorized,   // /v2/accounts/password/finalize: 401
  kFinalizeForbidden,      // /v2/accounts/password/finalize: 403
  kFinalizeNotFound,       // /v2/accounts/password/finalize: 404
  kFinalizeServerError,    // /v2/accounts/password/finalize: 5XX
  kFinalizeUnknown,
  kFinalizeUnexpected,
};

// Interface for a two-step registration process
// with the backend to create a Brave Account.
interface Authentication {
  // First step of the registration process.
  // `email`: user's email address.
  // `blindedMessage`: initial blinded request
  //                   produced by the OPAQUE library,
  //                   to be sent to the server.
  // Returns `RegisterInitializeResult` on success, or
  //         `RegisterFailureReason` on failure.
  RegisterInitialize(string email, string blindedMessage)
    => result<RegisterInitializeResult, RegisterFailureReason>;

  // Second step of the registration process.
  // `encryptedVerificationToken`: verification token from the backend,
  //                               locally encrypted with OSCrypt,
  //                               required by the underlying endpoint
  //                               to complete the step.
  // `serializedRecord`: final message produced by the OPAQUE library,
  //                     derived by unblinding `serializedResponse`,
  //                     containing cryptographic identifiers,
  //                     to be sent to the server.
  // Returns `RegisterFinalizeResult` on success, or
  //         `RegisterFailureReason` on failure.
  RegisterFinalize(string encryptedVerificationToken, string serializedRecord)
    => result<RegisterFinalizeResult, RegisterFailureReason>;
};
