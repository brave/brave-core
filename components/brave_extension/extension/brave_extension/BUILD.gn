import("//build/config/locales.gni")

action("brave-extension") {
  # Need this to fire re-pack if changed, nevertheless extension is repacked on each 2nd build
  inputs = [
    "app/actions/cosmeticFilterActions.ts",
    "app/actions/runtimeActions.ts",
    "app/actions/shieldsPanelActions.ts",
    "app/actions/tabActions.ts",
    "app/actions/webNavigationActions.ts",
    "app/actions/windowActions.ts",
    "app/assets/img/shields-off.png",
    "app/assets/img/shields-off@2x.png",
    "app/assets/img/shields-off@3x.png",
    "app/assets/img/shields-on.png",
    "app/assets/img/shields-on@2x.png",
    "app/assets/img/shields-on@3x.png",
    "app/background.ts",
    "app/background/actions/cosmeticFilterActions.ts",
    "app/background/actions/runtimeActions.ts",
    "app/background/actions/shieldsPanelActions.ts",
    "app/background/actions/tabActions.ts",
    "app/background/actions/webNavigationActions.ts",
    "app/background/actions/windowActions.ts",
    "app/background/api/browserActionAPI.ts",
    "app/background/api/cosmeticFilterAPI.ts",
    "app/background/api/localeAPI.ts",
    "app/background/api/shieldsAPI.ts",
    "app/background/api/tabsAPI.ts",
    "app/background/events.ts",
    "app/background/events/cosmeticFilterEvents.ts",
    "app/background/events/runtimeEvents.ts",
    "app/background/events/shieldsEvents.ts",
    "app/background/events/tabsEvents.ts",
    "app/background/events/windowsEvents.ts",
    "app/background/reducers.ts",
    "app/background/reducers/cosmeticFilterReducer.ts",
    "app/background/reducers/runtimeReducer.ts",
    "app/background/reducers/shieldsPanelReducer.ts",
    "app/background/store.ts",
    "app/braveShieldsPanel.tsx",
    "app/components/braveShields/braveShields.tsx",
    "app/components/braveShields/footer.tsx",
    "app/components/braveShields/header.tsx",
    "app/components/braveShields/interfaceControls.tsx",
    "app/components/braveShields/privacyControls.tsx",
    "app/components/braveShields/blockedResources/blockedResources.tsx",
    "app/components/braveShields/blockedResources/scriptsList.tsx",
    "app/components/braveShields/blockedResources/staticList.tsx",
    "app/constants/cosmeticFilterTypes.ts",
    "app/constants/resourceIdentifiers.ts",
    "app/constants/runtimeActionTypes.ts",
    "app/constants/shieldsPanelTypes.ts",
    "app/constants/tabTypes.ts",
    "app/constants/webNavigationTypes.ts",
    "app/constants/windowTypes.ts",
    "app/containers/braveShields.tsx",
    "app/content.ts",
    "app/helpers/arrayUtils.ts",
    "app/helpers/urlUtils.ts",
    "app/helpers/shieldsUtils.ts",
    "app/state/shieldsPanelState.ts",
    "app/types/actions/cosmeticFilterActions.ts",
    "app/types/actions/index.ts",
    "app/types/actions/runtimeActions.ts",
    "app/types/actions/shieldsPanelActions.ts",
    "app/types/actions/tabActions.ts",
    "app/types/actions/webNavigationActions.ts",
    "app/types/actions/windowActions.ts",
    "app/types/adblock/adblockTypes.ts",
    "app/types/constants/cosmeticFilterTypes.ts",
    "app/types/constants/resourceIdentifiers.ts",
    "app/types/constants/shieldsPanelTypes.ts",
    "app/types/constants/tabTypes.ts",
    "app/types/constants/webNavigationTypes.ts",
    "app/types/constants/windowTypes.ts",
    "app/types/global/chrome.d.ts",
    "app/types/global/react-chrome-redux.d.ts",
    "app/types/global/tests.d.ts",
    "app/types/other/blockTypes.ts",
    "app/types/other/noScriptInfo.ts",
    "app/types/state/mainState.ts",
    "app/types/state/shieldsPannelState.ts",
  ]
  script = "py-scripts/build-brave-extension.py"

  build_dir = "${root_gen_dir}/brave_extension"

  args = [ "--output_dir", rebase_path("//brave/browser/resources/brave_extension"),
           "--brave_extension_dir", rebase_path("."),
           "--build_dir", rebase_path(build_dir) ]

  outputs = [
    "$build_dir/background.html",
    "$build_dir/manifest.json",
    "$build_dir/js/background.bundle.js",
    "$build_dir/js/content.bundle.js",
    "$build_dir/js/braveShieldsPanel.bundle.js",
    "$build_dir/braveShieldsPanel.html",
    "$build_dir/bravelizer.css",
    "$build_dir/removeEmptyElements.css",
    "$build_dir/siteHack-marketwatch.com.css",
    "$build_dir/siteHack-glennbeck.com.js",
    "$build_dir/siteHack-coinmarketcap.com.css",
    "$build_dir/img/icon-16.png",
    "$build_dir/img/icon-32.png",
    "$build_dir/img/icon-48.png",
    "$build_dir/img/icon-64.png",
    "$build_dir/img/icon-128.png",
    "$build_dir/img/icon-256.png",
    "$build_dir/img/shields-off.png",
    "$build_dir/img/shields-off@2x.png",
    "$build_dir/img/shields-off@3x.png",
    "$build_dir/img/shields-on.png",
    "$build_dir/img/shields-on@2x.png",
    "$build_dir/img/shields-on@3x.png",
    "$build_dir/_locales/en_US/messages.json",
  ]
}

if (is_mac) {
  group("brave_extension_framework_bundle_data") {
    deps = []
    foreach(locale, locales) {
      deps += [":brave_extension_framework_bundle_data_${locale}"]
    }
  }

  foreach(locale, locales) {
    bundle_data("brave_extension_framework_bundle_data_${locale}") {
      locale = string_replace(locale, "-", "_")
      locale = string_replace(locale, "nb", "no")
      sources = [
        "//brave/components/brave_extension/extension/brave-extension/app/_locales/$locale/messages.json"
      ]
      outputs = [
        "{{bundle_resources_dir}}/brave_extension/_locales/$locale/{{source_file_part}}"
      ]
    }
  }
} else {
  group("locales") {
    deps = []
    foreach(locale, locales) {
      deps += [":locales_${locale}"]
    }
  }
  foreach(locale, locales) {
    copy("locales_${locale}") {
      locale = string_replace(locale, "-", "_")
      locale = string_replace(locale, "nb", "no")
      sources = [
        "//brave/components/brave_extension/extension/brave-extension/_locales/${locale}/messages.json",
      ]
      outputs = [
        "$root_out_dir/resources/brave_extension/_locales/${locale}/{{source_file_part}}",
      ]
    }
  }
}
