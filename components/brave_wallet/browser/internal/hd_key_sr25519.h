// Copyright (c) 2025 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// You can obtain one at https://mozilla.org/MPL/2.0/.

#ifndef BRAVE_COMPONENTS_BRAVE_WALLET_BROWSER_INTERNAL_HD_KEY_SR25519_H_
#define BRAVE_COMPONENTS_BRAVE_WALLET_BROWSER_INTERNAL_HD_KEY_SR25519_H_

#include <array>

#include "base/containers/span.h"
#include "third_party/rust/cxx/v1/cxx.h"

namespace brave_wallet {

struct CxxSchnorrkelKeyPair;

// https://docs.rs/schnorrkel/0.11.4/schnorrkel/keys/index.html#constants
inline constexpr size_t kSr25519SeedSize = 32;
inline constexpr size_t kSr25519PublicKeySize = 32;
inline constexpr size_t kSr25519SignatureSize = 64;

// This class implements basic sr25519 functionality, which is a scheme for
// signing and key derivation using Schnorr signatures, using Ristretto as a
// means of creating elliptic curve groups.
// https://wiki.polkadot.com/learn/learn-cryptography/#keypairs-and-signing
// https://ristretto.group/ristretto.html
class HDKeySr25519 {
 public:
  HDKeySr25519(const HDKeySr25519&) = delete;
  HDKeySr25519& operator=(const HDKeySr25519&) = delete;

  HDKeySr25519(HDKeySr25519&&) noexcept;
  HDKeySr25519& operator=(HDKeySr25519&&) noexcept;

  ~HDKeySr25519();

  // Generate a keypair using the provided seed, which is generated by taking
  // the hmac<sha512> of the derived entropy, as seen here in the polkadot-sdk:
  // https://github.com/paritytech/polkadot-sdk/blob/13bc266c3f3cb337a36998cfdc5940ca559051c9/substrate/primitives/core/src/crypto.rs#L866-L883
  // https://github.com/paritytech/polkadot-sdk/blob/13bc266c3f3cb337a36998cfdc5940ca559051c9/substrate/utils/substrate-bip39/src/lib.rs#L34-L70
  static HDKeySr25519 GenerateFromSeed(
      base::span<const uint8_t, kSr25519SeedSize> seed);

  // Get the public key portion of the keypair as a simple 32-byte array.
  std::array<uint8_t, kSr25519PublicKeySize> GetPublicKey();

  // Sign the provided binary blob and get the 64-byte signature that can be
  // used for verification.
  std::array<uint8_t, kSr25519SignatureSize> SignMessage(
      base::span<const uint8_t> message);

  // Verify a given message using the provided signature and the internal public
  // key.
  [[nodiscard]] bool VerifyMessage(
      base::span<const uint8_t, kSr25519SignatureSize> signature,
      base::span<const uint8_t> message);

  // Hard-derive a child key from a provided "derive junction" which is a
  // SCALE-encoded path segment i.e. given "<mnemonic>//Alice", "Alice" is a
  // plaintext junction representing a hard derivation that is transformed in
  // line with:
  // https://github.com/paritytech/polkadot-sdk/blob/7304295748b1d85eb9fc2b598eba43d9f7971f22/substrate/primitives/core/src/crypto.rs#L138-L151
  // coded result is: { 20, 'A', 'l', 'i', 'c', 'e' }
  HDKeySr25519 DeriveHard(base::span<const uint8_t> derive_junction);

 private:
  explicit HDKeySr25519(rust::Box<CxxSchnorrkelKeyPair> keypair);

  rust::Box<CxxSchnorrkelKeyPair> keypair_;
};

}  // namespace brave_wallet

#endif  // BRAVE_COMPONENTS_BRAVE_WALLET_BROWSER_INTERNAL_HD_KEY_SR25519_H_
