// Copyright (c) 2024 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// You can obtain one at https://mozilla.org/MPL/2.0/.

#include "brave/components/brave_wallet/browser/internal/orchard_block_scanner.h"

#include "brave/components/brave_wallet/browser/internal/hd_key_zip32.h"
#include "brave/components/brave_wallet/browser/zcash/zcash_test_utils.h"
#include "brave/components/brave_wallet/common/buildflags.h"
#include "brave/components/brave_wallet/common/common_utils.h"
#include "brave/components/brave_wallet/common/hex_utils.h"
#include "brave/components/services/brave_wallet/public/mojom/zcash_decoder.mojom.h"
#include "testing/gtest/include/gtest/gtest.h"

static_assert(BUILDFLAG(ENABLE_ORCHARD));

namespace brave_wallet {

TEST(OrchardBlockScannerTest, DiscoverNewNotes) {
  auto scanner =
      OrchardBlockScanner(std::array<uint8_t, kOrchardFullViewKeySize>(
          {0x74, 0x0b, 0xbe, 0x5d, 0x05, 0x80, 0xb2, 0xca, 0xd4, 0x30, 0x18,
           0x0d, 0x02, 0xcc, 0x12, 0x8b, 0x9a, 0x14, 0x0d, 0x5e, 0x07, 0xc1,
           0x51, 0x72, 0x1d, 0xc1, 0x6d, 0x25, 0xd4, 0xe2, 0x0f, 0x15, 0x9f,
           0x2f, 0x82, 0x67, 0x38, 0x94, 0x5a, 0xd0, 0x1f, 0x47, 0xf7, 0x0d,
           0xb0, 0xc3, 0x67, 0xc2, 0x46, 0xc2, 0x0c, 0x61, 0xff, 0x55, 0x83,
           0x94, 0x8c, 0x39, 0xde, 0xa9, 0x68, 0xfe, 0xfd, 0x1b, 0x02, 0x1c,
           0xcf, 0x89, 0x60, 0x4f, 0x5f, 0x7c, 0xc6, 0xe0, 0x34, 0xb3, 0x2d,
           0x33, 0x89, 0x08, 0xb8, 0x19, 0xfb, 0xe3, 0x25, 0xfe, 0xe6, 0x45,
           0x8b, 0x56, 0xb4, 0xca, 0x71, 0xa7, 0xe4, 0x3d}));

  std::vector<zcash::mojom::CompactBlockPtr> blocks;

  // Block 1

  {
    auto block = zcash::mojom::CompactBlock::New();

    // First tx in the block
    {
      auto tx = zcash::mojom::CompactTx::New();

      // Incoming related note
      {
        auto action = zcash::mojom::CompactOrchardAction::New();
        action->nullifier = std::vector<uint8_t>(
            {0x21, 0xd1, 0xa7, 0x8d, 0xd3, 0xac, 0xe3, 0x0d, 0xe8, 0x3b, 0xb1,
             0xf6, 0xbd, 0xe2, 0xb1, 0xb1, 0xa3, 0x97, 0x2a, 0xfd, 0xef, 0x22,
             0xf9, 0x80, 0x78, 0x59, 0xb4, 0x12, 0x83, 0xa0, 0xff, 0x08});
        action->ciphertext = std::vector<uint8_t>(
            {0x9b, 0x0c, 0x8b, 0xd3, 0x7c, 0x2f, 0xdd, 0x34, 0xe0, 0xf4, 0x8b,
             0x24, 0x4c, 0x06, 0xc2, 0x27, 0x0a, 0xa0, 0x44, 0x9a, 0xdb, 0x89,
             0x28, 0x13, 0xf8, 0x91, 0x01, 0x00, 0x75, 0x8e, 0x8e, 0x71, 0x5c,
             0x37, 0x72, 0x10, 0xcd, 0x4d, 0x00, 0x4d, 0x49, 0xd9, 0xd7, 0x3b,
             0x95, 0xf6, 0x82, 0xb4, 0xf8, 0x62, 0xae, 0xcd});
        action->cmx = std::vector<uint8_t>(
            {0x6e, 0x09, 0x04, 0x19, 0x7b, 0x4a, 0xa8, 0x3e, 0x05, 0xf4, 0x01,
             0x3b, 0x31, 0x02, 0x0e, 0xb0, 0xe0, 0xe2, 0x56, 0xe3, 0xb9, 0xb0,
             0x96, 0x4e, 0xdc, 0x31, 0x93, 0x40, 0x10, 0x48, 0xd9, 0x38});
        action->ephemeral_key = std::vector<uint8_t>(
            {0x68, 0x8d, 0x6f, 0xc1, 0xc8, 0xce, 0xad, 0x3a, 0x28, 0x4a, 0xa9,
             0x25, 0xcf, 0x39, 0x60, 0xaa, 0x96, 0xb0, 0xd2, 0x56, 0xcf, 0xe0,
             0xfd, 0x3c, 0x84, 0x08, 0x9d, 0xae, 0xbc, 0x44, 0xf1, 0xaf});
        tx->orchard_actions.push_back(std::move(action));
      }

      // Incoming unrelated note
      {
        auto action = zcash::mojom::CompactOrchardAction::New();
        action->nullifier = std::vector<uint8_t>(
            {0xa6, 0x63, 0x13, 0x18, 0x64, 0xef, 0xee, 0x0d, 0x35, 0x55, 0x9f,
             0xc7, 0x5f, 0x3b, 0x6d, 0x96, 0x1b, 0x91, 0xca, 0x39, 0x31, 0x8b,
             0xde, 0x99, 0xde, 0x05, 0x3c, 0x1d, 0x48, 0x21, 0x19, 0x17});
        action->ciphertext = std::vector<uint8_t>(
            {0x60, 0xf6, 0xd2, 0xe0, 0xbe, 0xf5, 0x50, 0x25, 0x37, 0xce, 0xa3,
             0x68, 0xea, 0x5e, 0xa6, 0xd3, 0xa8, 0x7a, 0xe7, 0xe8, 0xc9, 0xf6,
             0x30, 0xb8, 0xb4, 0x1a, 0xb1, 0x88, 0xde, 0x05, 0x62, 0x02, 0xf7,
             0x52, 0x29, 0x27, 0xfc, 0x37, 0x6e, 0x84, 0xb8, 0x32, 0x3f, 0x24,
             0xf7, 0xf6, 0x23, 0x1f, 0x7e, 0x59, 0xdc, 0xe1});
        action->cmx = std::vector<uint8_t>(
            {0x6f, 0x1a, 0x86, 0x5a, 0x90, 0x3f, 0xf0, 0x16, 0xde, 0x61, 0xb4,
             0x96, 0x16, 0xcc, 0xf8, 0x01, 0x3f, 0x20, 0x12, 0xb2, 0xe6, 0xc6,
             0xf5, 0x78, 0x47, 0x16, 0x67, 0x18, 0x5d, 0xd4, 0x23, 0x3e});
        action->ephemeral_key = std::vector<uint8_t>(
            {0xba, 0x7e, 0x5f, 0xc8, 0x19, 0xf8, 0xcd, 0x3c, 0x2b, 0x5a, 0x02,
             0x52, 0x48, 0x11, 0x6a, 0xd3, 0x46, 0x27, 0xfb, 0xa0, 0x71, 0x5d,
             0x87, 0x76, 0x22, 0xb1, 0xe1, 0x2f, 0x5f, 0x24, 0x7b, 0xaa});
        tx->orchard_actions.push_back(std::move(action));
      }

      // Incoming related note
      {
        auto action = zcash::mojom::CompactOrchardAction::New();
        action->nullifier = std::vector<uint8_t>(
            {0xa6, 0x63, 0x13, 0x18, 0x64, 0xef, 0xee, 0x0d, 0x35, 0x55, 0x9f,
             0xc7, 0x5f, 0x3b, 0x6d, 0x96, 0x1b, 0x91, 0xca, 0x39, 0x31, 0x8b,
             0xde, 0x99, 0xde, 0x05, 0x3c, 0x1d, 0x48, 0x21, 0x19, 0x17});
        action->ciphertext = std::vector<uint8_t>(
            {0x0e, 0xcc, 0xc1, 0xc7, 0x1d, 0x47, 0xdb, 0xc8, 0x9d, 0x07, 0x2a,
             0x1c, 0xd9, 0xcb, 0x02, 0xbb, 0x55, 0x28, 0xdb, 0x09, 0x0e, 0x43,
             0xa0, 0xc2, 0x70, 0x18, 0x97, 0x86, 0xa7, 0xc7, 0xec, 0x2c, 0xed,
             0x69, 0x47, 0x67, 0x3c, 0x0c, 0x41, 0xb1, 0x50, 0xe8, 0xb2, 0x31,
             0x22, 0x6b, 0x74, 0x92, 0x8a, 0xe4, 0xf7, 0xc9});
        action->cmx = std::vector<uint8_t>(
            {0xc2, 0x90, 0x45, 0x63, 0x3e, 0x2f, 0xda, 0x2c, 0xae, 0xbf, 0x4e,
             0x52, 0x7f, 0x21, 0xf2, 0x35, 0xf6, 0xe9, 0x1d, 0x96, 0xf2, 0xbf,
             0xe8, 0xbd, 0xa0, 0x81, 0x33, 0x89, 0xce, 0x3a, 0x45, 0x26});
        action->ephemeral_key = std::vector<uint8_t>(
            {0x74, 0x07, 0x9e, 0x19, 0x93, 0x52, 0x9e, 0x49, 0xf1, 0x4d, 0xda,
             0xcd, 0x43, 0x49, 0xa5, 0xab, 0x36, 0x58, 0x0c, 0x8e, 0x0a, 0xaf,
             0xcb, 0x38, 0x70, 0x26, 0x0e, 0x37, 0xef, 0xb9, 0xe5, 0xa7});
        tx->orchard_actions.push_back(std::move(action));
      }
      block->vtx.push_back(std::move(tx));
    }

    {
      auto tx = zcash::mojom::CompactTx::New();
      {
        // Incoming related note
        auto action = zcash::mojom::CompactOrchardAction::New();
        action->nullifier = std::vector<uint8_t>(
            {0x06, 0x36, 0x31, 0x7d, 0xf5, 0xf5, 0x5b, 0xbe, 0x63, 0xef, 0xae,
             0x21, 0xcf, 0xd0, 0x30, 0x0d, 0x2e, 0xac, 0x07, 0xea, 0x30, 0xe1,
             0xa5, 0x88, 0x36, 0xcb, 0x1d, 0x35, 0x0b, 0xd8, 0x87, 0x06});
        action->ciphertext = std::vector<uint8_t>(
            {0x9f, 0x95, 0x64, 0xc2, 0x69, 0xae, 0x47, 0xce, 0xeb, 0xb7, 0xa2,
             0x2b, 0xfc, 0xc6, 0xfb, 0x9e, 0xe6, 0xde, 0x58, 0x82, 0x7a, 0x85,
             0xf1, 0x90, 0x98, 0xb0, 0x47, 0xca, 0x61, 0x74, 0x23, 0x6a, 0x64,
             0x83, 0x35, 0xac, 0x31, 0x88, 0xbf, 0x52, 0xf8, 0xf8, 0xd6, 0x94,
             0x12, 0xea, 0x04, 0xe2, 0xb9, 0x57, 0x8f, 0xbd});
        action->cmx = std::vector<uint8_t>(
            {0x84, 0x72, 0xe8, 0xd9, 0xe4, 0x9e, 0x1b, 0x7f, 0x6b, 0x62, 0xbd,
             0x58, 0xab, 0xc2, 0x63, 0xa4, 0x74, 0x18, 0x66, 0xcf, 0x6d, 0xdf,
             0xd2, 0xa5, 0x48, 0x16, 0x7e, 0x0e, 0x63, 0xf6, 0x1d, 0x3e});
        action->ephemeral_key = std::vector<uint8_t>(
            {0xed, 0xff, 0x78, 0x9b, 0x5b, 0x1e, 0xaf, 0x59, 0xde, 0xb2, 0x5c,
             0x8c, 0xa0, 0x1f, 0x7b, 0xb2, 0x76, 0x68, 0xca, 0x6f, 0x25, 0xb9,
             0x05, 0xf8, 0x19, 0x7b, 0xd0, 0xe0, 0xaa, 0xd3, 0xb8, 0x8a});
        tx->orchard_actions.push_back(std::move(action));
      }
      block->vtx.push_back(std::move(tx));
    }

    block->height = 10u;
    blocks.push_back(std::move(block));
  }

  // Block 2
  {
    auto block = zcash::mojom::CompactBlock::New();
    auto tx = zcash::mojom::CompactTx::New();
    auto action = zcash::mojom::CompactOrchardAction::New();
    // Incoming related note
    action->nullifier = std::vector<uint8_t>(
        {0x0b, 0xd1, 0x1d, 0xa8, 0x55, 0x7f, 0xa1, 0x9c, 0x8f, 0xf9, 0x44,
         0x6d, 0xd2, 0x09, 0x8c, 0x58, 0x7a, 0x0c, 0xf8, 0x96, 0x47, 0x3f,
         0xc8, 0x91, 0x4a, 0xe4, 0xb9, 0xfc, 0xd8, 0x18, 0x05, 0x13});
    action->ciphertext = std::vector<uint8_t>(
        {0x55, 0x6c, 0x89, 0xcf, 0xa4, 0xf7, 0x38, 0xa8, 0x1e, 0x9f, 0xce,
         0x54, 0x2b, 0x02, 0xf3, 0x44, 0xe3, 0xac, 0x9f, 0xaf, 0x80, 0xc1,
         0x0b, 0xa5, 0x9c, 0x67, 0x0f, 0x87, 0x8b, 0xb7, 0x44, 0xb6, 0xbb,
         0x62, 0xe2, 0xb9, 0x6d, 0xbe, 0xe1, 0xe2, 0x95, 0x27, 0x93, 0xb3,
         0x00, 0x31, 0x58, 0xbd, 0xc9, 0x92, 0xa7, 0x1d});
    action->cmx = std::vector<uint8_t>(
        {0x8e, 0xab, 0x45, 0xe9, 0x52, 0x44, 0x91, 0x8e, 0xe6, 0x7e, 0x8f,
         0x39, 0x15, 0x1f, 0x7d, 0x1b, 0x2d, 0x2f, 0x1d, 0xc8, 0x02, 0x80,
         0xc4, 0x53, 0x21, 0xfd, 0xe3, 0xc7, 0x27, 0x05, 0x83, 0x3f});
    action->ephemeral_key = std::vector<uint8_t>(
        {0xd7, 0x8e, 0xa2, 0x8f, 0x20, 0xd7, 0x8f, 0x9e, 0xbd, 0x1b, 0x92,
         0x95, 0xe6, 0xc1, 0xf8, 0x30, 0x81, 0xc1, 0xb4, 0x7d, 0x9a, 0xa8,
         0xf0, 0x81, 0xb6, 0xad, 0xe5, 0x20, 0x79, 0x6b, 0xda, 0xae});
    tx->orchard_actions.push_back(std::move(action));
    block->vtx.push_back(std::move(tx));

    block->height = 11u;
    blocks.push_back(std::move(block));
  }

  auto result = scanner.ScanBlocks({}, std::move(blocks));

  EXPECT_EQ(result.value().discovered_notes.size(), 4u);
  EXPECT_EQ(result.value().discovered_notes[0].block_id, 10u);
  EXPECT_EQ(result.value().discovered_notes[0].amount, 3625561528u);
  EXPECT_EQ(result.value().discovered_notes[1].block_id, 10u);
  EXPECT_EQ(result.value().discovered_notes[1].amount, 891903885u);
  EXPECT_EQ(result.value().discovered_notes[2].block_id, 10u);
  EXPECT_EQ(result.value().discovered_notes[2].amount, 1881904414u);
  EXPECT_EQ(result.value().discovered_notes[3].block_id, 11u);
  EXPECT_EQ(result.value().discovered_notes[3].amount, 2549979667u);

  EXPECT_EQ(result.value().spent_notes.size(), 0u);
}

TEST(OrchardBlockScannerTest, WrongInput) {
  auto hd_key =
      HDKeyZip32::GenerateFromSeed(
          std::vector<uint8_t>(
              {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
               0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
               0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f}))
          ->DeriveHardenedChild(kZip32Purpose)
          ->DeriveHardenedChild(static_cast<uint32_t>(mojom::CoinType::ZEC));

  auto scanner = OrchardBlockScanner(hd_key->GetFullViewKey());

  // Wrong nullifier size
  {
    std::vector<zcash::mojom::CompactBlockPtr> blocks;
    auto block = zcash::mojom::CompactBlock::New();
    auto tx = zcash::mojom::CompactTx::New();
    auto action = zcash::mojom::CompactOrchardAction::New();

    // Shorter nullifier
    action->nullifier =
        PrefixedHexStringToBytes(
            "0x1b32edbbe4d18f28876de262518ad31122701f8c0a52e98047a337876e7e")
            .value();
    action->ciphertext = std::vector<uint8_t>(kOrchardCipherTextSize, 0);
    PrefixedHexStringToBytes(
        "0x4502e339901e397717839167cbb4037e0ecf6813b51c81fe085a7b782f124228",
        &action->cmx);
    action->ephemeral_key = std::vector<uint8_t>(kOrchardEphemeralKeySize, 0);

    tx->orchard_actions.push_back(std::move(action));

    block->vtx.push_back(std::move(tx));
    block->height = 10u;

    blocks.push_back(std::move(block));

    auto result = scanner.ScanBlocks({}, std::move(blocks));
    EXPECT_FALSE(result.has_value());
  }

  // Wrong cmx size
  {
    std::vector<zcash::mojom::CompactBlockPtr> blocks;
    auto block = zcash::mojom::CompactBlock::New();
    auto tx = zcash::mojom::CompactTx::New();
    auto action = zcash::mojom::CompactOrchardAction::New();

    action->nullifier = PrefixedHexStringToBytes(
                            "0x1b32edbbe4d18f28876de262518ad31122701f8c0a52e980"
                            "47a337876e7eea19")
                            .value();
    action->ciphertext = std::vector<uint8_t>(kOrchardCipherTextSize, 0);
    // short cmx
    action->cmx =
        PrefixedHexStringToBytes(
            "0x4502e339901e397717839167cbb4037e0ecf6813b51c81fe085a7b782f1242")
            .value();
    action->ephemeral_key = std::vector<uint8_t>(kOrchardEphemeralKeySize, 0);
    tx->orchard_actions.push_back(std::move(action));

    block->vtx.push_back(std::move(tx));
    block->height = 10u;

    blocks.push_back(std::move(block));

    auto result = scanner.ScanBlocks({}, std::move(blocks));
    EXPECT_FALSE(result.has_value());
  }

  // Wrong ek size
  {
    std::vector<zcash::mojom::CompactBlockPtr> blocks;
    auto block = zcash::mojom::CompactBlock::New();
    auto tx = zcash::mojom::CompactTx::New();
    auto action = zcash::mojom::CompactOrchardAction::New();

    action->nullifier = PrefixedHexStringToBytes(
                            "0x1b32edbbe4d18f28876de262518ad31122701f8c0a52e980"
                            "47a337876e7eea19")
                            .value();
    action->ciphertext = std::vector<uint8_t>(kOrchardCipherTextSize, 0);
    // short cmx
    action->cmx = PrefixedHexStringToBytes(
                      "0x4502e339901e397717839167cbb4037e0ecf6813b51c81fe085a7b"
                      "782f124228")
                      .value();
    action->ephemeral_key =
        std::vector<uint8_t>(kOrchardEphemeralKeySize - 1, 0);
    tx->orchard_actions.push_back(std::move(action));

    block->vtx.push_back(std::move(tx));
    block->height = 10u;

    blocks.push_back(std::move(block));

    auto result = scanner.ScanBlocks({}, std::move(blocks));
    EXPECT_FALSE(result.has_value());
  }

  // Wrong ciphertext size
  {
    std::vector<zcash::mojom::CompactBlockPtr> blocks;
    auto block = zcash::mojom::CompactBlock::New();
    auto tx = zcash::mojom::CompactTx::New();
    auto action = zcash::mojom::CompactOrchardAction::New();

    action->nullifier = PrefixedHexStringToBytes(
                            "0x1b32edbbe4d18f28876de262518ad31122701f8c0a52e980"
                            "47a337876e7eea19")
                            .value();
    action->ciphertext = std::vector<uint8_t>(kOrchardCipherTextSize - 1, 0);
    // short cmx
    action->cmx = PrefixedHexStringToBytes(
                      "0x4502e339901e397717839167cbb4037e0ecf6813b51c81fe085a7b"
                      "782f124228")
                      .value();
    action->ephemeral_key = std::vector<uint8_t>(kOrchardEphemeralKeySize, 0);
    tx->orchard_actions.push_back(std::move(action));

    block->vtx.push_back(std::move(tx));
    block->height = 10u;

    blocks.push_back(std::move(block));

    auto result = scanner.ScanBlocks({}, std::move(blocks));
    EXPECT_FALSE(result.has_value());
  }
}

// Case when note is spent in the same scanning batch where it is was received
TEST(OrchardBlockScanner, FoundKnownNullifiers_SameBatch) {
  auto scanner =
      OrchardBlockScanner(std::array<uint8_t, kOrchardFullViewKeySize>(
          {0x74, 0x0b, 0xbe, 0x5d, 0x05, 0x80, 0xb2, 0xca, 0xd4, 0x30, 0x18,
           0x0d, 0x02, 0xcc, 0x12, 0x8b, 0x9a, 0x14, 0x0d, 0x5e, 0x07, 0xc1,
           0x51, 0x72, 0x1d, 0xc1, 0x6d, 0x25, 0xd4, 0xe2, 0x0f, 0x15, 0x9f,
           0x2f, 0x82, 0x67, 0x38, 0x94, 0x5a, 0xd0, 0x1f, 0x47, 0xf7, 0x0d,
           0xb0, 0xc3, 0x67, 0xc2, 0x46, 0xc2, 0x0c, 0x61, 0xff, 0x55, 0x83,
           0x94, 0x8c, 0x39, 0xde, 0xa9, 0x68, 0xfe, 0xfd, 0x1b, 0x02, 0x1c,
           0xcf, 0x89, 0x60, 0x4f, 0x5f, 0x7c, 0xc6, 0xe0, 0x34, 0xb3, 0x2d,
           0x33, 0x89, 0x08, 0xb8, 0x19, 0xfb, 0xe3, 0x25, 0xfe, 0xe6, 0x45,
           0x8b, 0x56, 0xb4, 0xca, 0x71, 0xa7, 0xe4, 0x3d}));

  std::vector<zcash::mojom::CompactBlockPtr> blocks;

  // Block 1
  {
    auto block = zcash::mojom::CompactBlock::New();
    // First tx in the block
    {
      auto tx = zcash::mojom::CompactTx::New();

      // Incoming related note
      {
        auto action = zcash::mojom::CompactOrchardAction::New();
        action->nullifier = std::vector<uint8_t>(
            {0x21, 0xd1, 0xa7, 0x8d, 0xd3, 0xac, 0xe3, 0x0d, 0xe8, 0x3b, 0xb1,
             0xf6, 0xbd, 0xe2, 0xb1, 0xb1, 0xa3, 0x97, 0x2a, 0xfd, 0xef, 0x22,
             0xf9, 0x80, 0x78, 0x59, 0xb4, 0x12, 0x83, 0xa0, 0xff, 0x08});
        action->ciphertext = std::vector<uint8_t>(
            {0x9b, 0x0c, 0x8b, 0xd3, 0x7c, 0x2f, 0xdd, 0x34, 0xe0, 0xf4, 0x8b,
             0x24, 0x4c, 0x06, 0xc2, 0x27, 0x0a, 0xa0, 0x44, 0x9a, 0xdb, 0x89,
             0x28, 0x13, 0xf8, 0x91, 0x01, 0x00, 0x75, 0x8e, 0x8e, 0x71, 0x5c,
             0x37, 0x72, 0x10, 0xcd, 0x4d, 0x00, 0x4d, 0x49, 0xd9, 0xd7, 0x3b,
             0x95, 0xf6, 0x82, 0xb4, 0xf8, 0x62, 0xae, 0xcd});
        action->cmx = std::vector<uint8_t>(
            {0x6e, 0x09, 0x04, 0x19, 0x7b, 0x4a, 0xa8, 0x3e, 0x05, 0xf4, 0x01,
             0x3b, 0x31, 0x02, 0x0e, 0xb0, 0xe0, 0xe2, 0x56, 0xe3, 0xb9, 0xb0,
             0x96, 0x4e, 0xdc, 0x31, 0x93, 0x40, 0x10, 0x48, 0xd9, 0x38});
        action->ephemeral_key = std::vector<uint8_t>(
            {0x68, 0x8d, 0x6f, 0xc1, 0xc8, 0xce, 0xad, 0x3a, 0x28, 0x4a, 0xa9,
             0x25, 0xcf, 0x39, 0x60, 0xaa, 0x96, 0xb0, 0xd2, 0x56, 0xcf, 0xe0,
             0xfd, 0x3c, 0x84, 0x08, 0x9d, 0xae, 0xbc, 0x44, 0xf1, 0xaf});
        tx->orchard_actions.push_back(std::move(action));
      }

      block->vtx.push_back(std::move(tx));
    }

    block->height = 10u;
    blocks.push_back(std::move(block));
  }

  // Block 2
  {
    auto block = zcash::mojom::CompactBlock::New();
    auto tx = zcash::mojom::CompactTx::New();
    auto action = zcash::mojom::CompactOrchardAction::New();
    // Tx which spends note from block 1
    action->nullifier = PrefixedHexStringToBytes(
                            "0x6588cc7fabfab2b2a4baa89d4dfafaa50cc89d22f96d10fb"
                            "7689461b921ad40d")
                            .value();
    action->ciphertext = std::vector<uint8_t>(
        {0x60, 0xf6, 0xd2, 0xe0, 0xbe, 0xf5, 0x50, 0x25, 0x37, 0xce, 0xa3,
         0x68, 0xea, 0x5e, 0xa6, 0xd3, 0xa8, 0x7a, 0xe7, 0xe8, 0xc9, 0xf6,
         0x30, 0xb8, 0xb4, 0x1a, 0xb1, 0x88, 0xde, 0x05, 0x62, 0x02, 0xf7,
         0x52, 0x29, 0x27, 0xfc, 0x37, 0x6e, 0x84, 0xb8, 0x32, 0x3f, 0x24,
         0xf7, 0xf6, 0x23, 0x1f, 0x7e, 0x59, 0xdc, 0xe1});
    action->cmx = std::vector<uint8_t>(
        {0x6f, 0x1a, 0x86, 0x5a, 0x90, 0x3f, 0xf0, 0x16, 0xde, 0x61, 0xb4,
         0x96, 0x16, 0xcc, 0xf8, 0x01, 0x3f, 0x20, 0x12, 0xb2, 0xe6, 0xc6,
         0xf5, 0x78, 0x47, 0x16, 0x67, 0x18, 0x5d, 0xd4, 0x23, 0x3e});
    action->ephemeral_key = std::vector<uint8_t>(
        {0xba, 0x7e, 0x5f, 0xc8, 0x19, 0xf8, 0xcd, 0x3c, 0x2b, 0x5a, 0x02,
         0x52, 0x48, 0x11, 0x6a, 0xd3, 0x46, 0x27, 0xfb, 0xa0, 0x71, 0x5d,
         0x87, 0x76, 0x22, 0xb1, 0xe1, 0x2f, 0x5f, 0x24, 0x7b, 0xaa});
    tx->orchard_actions.push_back(std::move(action));

    block->vtx.push_back(std::move(tx));

    block->height = 11u;
    blocks.push_back(std::move(block));
  }

  auto result = scanner.ScanBlocks({}, std::move(blocks));

  EXPECT_EQ(result.value().discovered_notes.size(), 1u);
  EXPECT_EQ(result.value().discovered_notes[0].block_id, 10u);
  EXPECT_EQ(result.value().discovered_notes[0].amount, 3625561528u);

  EXPECT_EQ(result.value().spent_notes.size(), 1u);
  EXPECT_EQ(result.value().spent_notes[0].block_id, 11u);
  EXPECT_EQ(
      std::vector<uint8_t>(result.value().spent_notes[0].nullifier.begin(),
                           result.value().spent_notes[0].nullifier.end()),
      PrefixedHexStringToBytes(
          "0x6588cc7fabfab2b2a4baa89d4dfafaa50cc89d22f96d10fb7689461b921ad40d")
          .value());
}

TEST(OrchardBlockScanner, FoundKnownNullifiers) {
  auto hd_key =
      HDKeyZip32::GenerateFromSeed(
          std::vector<uint8_t>(
              {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
               0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
               0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f}))
          ->DeriveHardenedChild(kZip32Purpose)
          ->DeriveHardenedChild(static_cast<uint32_t>(mojom::CoinType::ZEC));

  auto scanner = OrchardBlockScanner(hd_key->GetFullViewKey());
  std::vector<zcash::mojom::CompactBlockPtr> blocks;
  auto block = zcash::mojom::CompactBlock::New();
  auto tx = zcash::mojom::CompactTx::New();
  auto action = zcash::mojom::CompactOrchardAction::New();

  auto nullifier_bytes =
      PrefixedHexStringToBytes(
          "0x1b32edbbe4d18f28876de262518ad31122701f8c0a52e98047a337876e7eea19")
          .value();
  OrchardNullifier nf;
  std::copy(nullifier_bytes.begin(), nullifier_bytes.end(),
            nf.nullifier.begin());
  nf.block_id = 10;

  action->nullifier = nullifier_bytes;
  action->ciphertext = std::vector<uint8_t>(kOrchardCipherTextSize, 0);
  action->cmx =
      PrefixedHexStringToBytes(
          "0x4502e339901e397717839167cbb4037e0ecf6813b51c81fe085a7b782f124228")
          .value();
  action->ephemeral_key = std::vector<uint8_t>(kOrchardEphemeralKeySize, 0);

  tx->orchard_actions.push_back(std::move(action));

  block->vtx.push_back(std::move(tx));
  block->height = 10u;

  std::vector<OrchardNote> notes;
  OrchardNote note;
  note.block_id = 10;
  std::copy(nullifier_bytes.begin(), nullifier_bytes.end(),
            note.nullifier.begin());
  note.amount = 1;

  notes.push_back(note);
  blocks.push_back(std::move(block));

  auto result = scanner.ScanBlocks(std::move(notes), std::move(blocks));

  EXPECT_TRUE(result.has_value());
  EXPECT_EQ(result.value().spent_notes.size(), 1u);
  EXPECT_EQ(result.value().spent_notes[0], nf);
  EXPECT_EQ(result.value().discovered_notes.size(), 0u);
}

}  // namespace brave_wallet
