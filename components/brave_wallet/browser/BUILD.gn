# Copyright (c) 2019 The Brave Authors. All rights reserved.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at https://mozilla.org/MPL/2.0/.

import("//brave/build/config.gni")
import("//brave/components/ipfs/buildflags/buildflags.gni")
import("//build/config/features.gni")
import("//tools/json_schema_compiler/json_schema_api.gni")

declare_args() {
  sardine_client_id = ""
  sardine_client_secret = ""
}

if (is_official_build) {
  assert(sardine_client_id != "")
  assert(sardine_client_secret != "")
}

static_library("browser") {
  sources = [
    "asset_discovery_manager.cc",
    "asset_discovery_manager.h",
    "asset_ratio_response_parser.cc",
    "asset_ratio_response_parser.h",
    "asset_ratio_service.cc",
    "asset_ratio_service.h",
    "block_tracker.cc",
    "block_tracker.h",
    "blockchain_list_parser.cc",
    "blockchain_list_parser.h",
    "blockchain_registry.cc",
    "blockchain_registry.h",
    "brave_wallet_p3a.cc",
    "brave_wallet_p3a.h",
    "brave_wallet_p3a_private.cc",
    "brave_wallet_p3a_private.h",
    "brave_wallet_prefs.cc",
    "brave_wallet_prefs.h",
    "brave_wallet_provider_delegate.cc",
    "brave_wallet_provider_delegate.h",
    "brave_wallet_service.cc",
    "brave_wallet_service.h",
    "brave_wallet_service_delegate.cc",
    "brave_wallet_service_delegate.h",
    "ens_resolver_task.cc",
    "ens_resolver_task.h",
    "eth_abi_decoder.cc",
    "eth_abi_decoder.h",
    "eth_block_tracker.cc",
    "eth_block_tracker.h",
    "eth_data_builder.cc",
    "eth_data_builder.h",
    "eth_data_parser.cc",
    "eth_data_parser.h",
    "eth_gas_utils.cc",
    "eth_gas_utils.h",
    "eth_logs_tracker.cc",
    "eth_logs_tracker.h",
    "eth_nonce_tracker.cc",
    "eth_nonce_tracker.h",
    "eth_pending_tx_tracker.cc",
    "eth_pending_tx_tracker.h",
    "eth_requests.cc",
    "eth_requests.h",
    "eth_response_parser.cc",
    "eth_response_parser.h",
    "eth_topics_builder.cc",
    "eth_topics_builder.h",
    "eth_tx_manager.cc",
    "eth_tx_manager.h",
    "eth_tx_meta.cc",
    "eth_tx_meta.h",
    "eth_tx_state_manager.cc",
    "eth_tx_state_manager.h",
    "ethereum_provider_impl.cc",
    "ethereum_provider_impl.h",
    "fil_block_tracker.cc",
    "fil_block_tracker.h",
    "fil_nonce_tracker.cc",
    "fil_nonce_tracker.h",
    "fil_requests.cc",
    "fil_requests.h",
    "fil_response_parser.cc",
    "fil_response_parser.h",
    "fil_tx_manager.cc",
    "fil_tx_manager.h",
    "fil_tx_meta.cc",
    "fil_tx_meta.h",
    "fil_tx_state_manager.cc",
    "fil_tx_state_manager.h",
    "json_rpc_requests_helper.cc",
    "json_rpc_requests_helper.h",
    "json_rpc_response_parser.cc",
    "json_rpc_response_parser.h",
    "json_rpc_service.cc",
    "json_rpc_service.h",
    "keyring_service.cc",
    "keyring_service.h",
    "keyring_service_observer_base.h",
    "nft_metadata_fetcher.cc",
    "nft_metadata_fetcher.h",
    "nonce_tracker.cc",
    "nonce_tracker.h",
    "password_encryptor.cc",
    "password_encryptor.h",
    "sns_resolver_task.cc",
    "sns_resolver_task.h",
    "solana_account_meta.cc",
    "solana_account_meta.h",
    "solana_block_tracker.cc",
    "solana_block_tracker.h",
    "solana_instruction.cc",
    "solana_instruction.h",
    "solana_instruction_builder.cc",
    "solana_instruction_builder.h",
    "solana_instruction_data_decoder.cc",
    "solana_instruction_data_decoder.h",
    "solana_instruction_decoded_data.cc",
    "solana_instruction_decoded_data.h",
    "solana_message.cc",
    "solana_message.h",
    "solana_provider_impl.cc",
    "solana_provider_impl.h",
    "solana_requests.cc",
    "solana_requests.h",
    "solana_response_parser.cc",
    "solana_response_parser.h",
    "solana_transaction.cc",
    "solana_transaction.h",
    "solana_tx_manager.cc",
    "solana_tx_manager.h",
    "solana_tx_meta.cc",
    "solana_tx_meta.h",
    "solana_tx_state_manager.cc",
    "solana_tx_state_manager.h",
    "swap_request_helper.cc",
    "swap_request_helper.h",
    "swap_response_parser.cc",
    "swap_response_parser.h",
    "swap_service.cc",
    "swap_service.h",
    "tx_manager.cc",
    "tx_manager.h",
    "tx_meta.cc",
    "tx_meta.h",
    "tx_service.cc",
    "tx_service.h",
    "tx_state_manager.cc",
    "tx_state_manager.h",
    "unstoppable_domains_dns_resolve.cc",
    "unstoppable_domains_dns_resolve.h",
    "unstoppable_domains_multichain_calls.cc",
    "unstoppable_domains_multichain_calls.h",
    "wallet_data_files_installer.cc",
    "wallet_data_files_installer.h",
  ]
  if (enable_ipfs_local_node) {
    sources += [
      "brave_wallet_auto_pin_service.cc",
      "brave_wallet_auto_pin_service.h",
      "brave_wallet_pin_service.cc",
      "brave_wallet_pin_service.h",
    ]
  }
  deps = [
    ":constants",
    ":generated_json_rpc_responses",
    ":generated_swap_responses",
    ":hd_keyring",
    ":pref_names",
    ":transaction",
    ":utils",
    "//base",
    "//brave/components/api_request_helper",
    "//brave/components/brave_component_updater/browser",
    "//brave/components/brave_stats/browser",
    "//brave/components/brave_wallet/api",
    "//brave/components/brave_wallet/common",
    "//brave/components/brave_wallet/common:buildflags",
    "//brave/components/brave_wallet/common:common_constants",
    "//brave/components/brave_wallet/common:mojom",
    "//brave/components/brave_wallet/common:pref_names",
    "//brave/components/brave_wallet/common:solana_utils",
    "//brave/components/constants",
    "//brave/components/decentralized_dns/core",
    "//brave/components/filecoin/rs:cxx",
    "//brave/components/ipfs/buildflags",
    "//brave/components/json/rs:cxx",
    "//brave/components/p3a_utils",
    "//brave/components/resources:strings_grit",
    "//brave/components/time_period_storage",
    "//components/component_updater",
    "//components/content_settings/core/browser",
    "//components/keyed_service/core",
    "//components/prefs",
    "//components/sync_preferences",
    "//crypto",
    "//services/data_decoder/public/cpp",
    "//services/network/public/cpp",
    "//third_party/abseil-cpp:absl",
    "//third_party/boringssl",
    "//third_party/re2",
    "//tools/json_schema_compiler:generated_api_util",
    "//ui/base:base",
    "//url",
  ]

  if (enable_ipfs) {
    deps += [ "//brave/components/ipfs" ]
  }

  configs += [ ":sardine_config" ]
}

if (!is_ios) {
  static_library("permission_utils") {
    sources = [
      "permission_utils.cc",
      "permission_utils.h",
    ]

    deps = [
      ":utils",
      "//base",
      "//brave/components/brave_wallet/common:mojom",
      "//components/permissions:permissions_common",
      "//third_party/blink/public/common",
      "//third_party/re2",
      "//url",
    ]
  }
}

source_set("constants") {
  sources = [
    "brave_wallet_constants.cc",
    "brave_wallet_constants.h",
  ]

  deps = [
    "//base",
    "//brave/components/brave_wallet/common:mojom",
    "//brave/components/resources:strings_grit",
    "//ui/base:base",
  ]

  public_deps = [ "//brave/components/brave_wallet/common" ]
}

source_set("pref_names") {
  sources = [
    "pref_names.cc",
    "pref_names.h",
  ]
}

source_set("utils") {
  sources = [
    "brave_wallet_utils.cc",
    "brave_wallet_utils.h",
  ]

  deps = [
    ":constants",
    ":pref_names",
    "//base",
    "//brave/components/brave_wallet/common:buildflags",
    "//brave/components/brave_wallet/common:mojom",
    "//brave/components/version_info",
    "//brave/vendor/bip39wally-core-native:bip39wally-core",
    "//components/content_settings/core/common",
    "//components/prefs",
    "//crypto",
    "//net",
    "//third_party/abseil-cpp:absl",
    "//third_party/boringssl",
    "//url",
  ]

  public_deps = [ "//brave/components/brave_wallet/common" ]
}

source_set("hd_keyring") {
  sources = [
    "bitcoin_keyring.cc",
    "bitcoin_keyring.h",
    "ethereum_keyring.cc",
    "ethereum_keyring.h",
    "filecoin_keyring.cc",
    "filecoin_keyring.h",
    "hd_keyring.cc",
    "hd_keyring.h",
    "solana_keyring.cc",
    "solana_keyring.h",
  ]

  deps = [
    ":transaction",
    "internal:hd_key",
    "//base",
    "//brave/components/brave_wallet/common",
    "//brave/components/brave_wallet/common:common_constants",
    "//brave/components/brave_wallet/common:mojom",
    "//brave/components/brave_wallet/common:solana_utils",
    "//brave/components/filecoin/rs:cxx",
    "//crypto",
  ]

  public_deps = [ "//brave/components/brave_wallet/rust:cxx" ]
}

source_set("transaction") {
  sources = [
    "eip1559_transaction.cc",
    "eip1559_transaction.h",
    "eip2930_transaction.cc",
    "eip2930_transaction.h",
    "eth_transaction.cc",
    "eth_transaction.h",
    "fil_transaction.cc",
    "fil_transaction.h",
    "rlp_decode.cc",
    "rlp_decode.h",
    "rlp_encode.cc",
    "rlp_encode.h",
  ]

  deps = [
    "//base",
    "//brave/components/brave_wallet/common",
    "//brave/components/brave_wallet/common:mojom",
    "//brave/components/filecoin/rs:cxx",
    "//brave/components/json/rs:cxx",
  ]
}

generated_types("generated_json_rpc_responses") {
  sources = [ "json_rpc_responses.idl" ]
  root_namespace = "brave_wallet::%(namespace)s"
  deps = [ "//base" ]
  visibility = [
    ":browser",
    "test:brave_wallet_unit_tests",
  ]
}

generated_types("generated_swap_responses") {
  sources = [ "swap_responses.idl" ]
  root_namespace = "brave_wallet::%(namespace)s"
  deps = [ "//base" ]
  visibility = [
    ":browser",
    "test:brave_wallet_unit_tests",
  ]
}

config("sardine_config") {
  defines = [
    "SARDINE_CLIENT_ID=\"$sardine_client_id\"",
    "SARDINE_CLIENT_SECRET=\"$sardine_client_secret\"",
  ]
}
