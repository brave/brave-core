// Copyright (c) 2021 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// you can obtain one at http://mozilla.org/MPL/2.0/.

module brave_wallet.mojom;

import "mojo/public/mojom/base/time.mojom";
import "mojo/public/mojom/base/values.mojom";
import "url/mojom/origin.mojom";
import "url/mojom/url.mojom";

// Used to notify the renderer of provider information for use in
// window.ethereum events
interface EventsListener {
  // Fired when the current netowrk changes
  ChainChangedEvent(string chain_id);

  // Fired when the accounts have changed such as when the wallet locked, the
  // selected account changes, a new account is given permission, etc.
  AccountsChangedEvent(array<string> accounts);

  // Fired when there is a message from eth_subscribe
  MessageEvent(string subscription_id, mojo_base.mojom.Value result);
};

interface SolanaEventsListener {
  // base58 encoded account, account would be null when switching to an about to
  // be created account
  AccountChangedEvent(string? account);
  // Wallet initiated disconnect event. Ex. permission revoked
  DisconnectEvent();
};

// Pre-defined error codes specified in
// https://www.jsonrpc.org/specification#error_object
enum JsonRpcError {
  kParsingError = -32700,    // Parse error - Invalid JSON
  kInvalidRequest = -32600,  // JSON is not a valid request object
  kMethodNotFound = -32601,  // Method does not exist
  kInvalidParams = -32602,   // Invalid method parameters
  kInternalError = -32603,   // Internal JSON RPC error
};

// https://eips.ethereum.org/EIPS/eip-1193#provider-errors
// https://eips.ethereum.org/EIPS/eip-1474#error-codes
enum ProviderError {
  kSuccess = 0,  // No error

  kUserRejectedRequest = 4001,   // User rejected the request
  kUnauthorized = 4100,          // The requested account and/or method has not
                                 // been authorized by the user
  kUnsupportedMethod = 4200,     // The requested method is not supported by this
                                 // Ethereum provider
  kDisconnected = 4900,          // The provider is disconnected from all chains
  kChainDisconnected = 4901,     // The provider is disconnected from the
                                 // specified chain
  kUnknownChain = 4902,          // The provider doesn't know this chain

  // Pre-defined error codes specified in
  // https://www.jsonrpc.org/specification#error_object
  kParsingError = JsonRpcError.kParsingError,      // Parse error - Invalid JSON
  kInvalidRequest = JsonRpcError.kInvalidRequest,  // JSON is not a valid request object
  kMethodNotFound = JsonRpcError.kMethodNotFound,  // Method does not exist
  kInvalidParams = JsonRpcError.kInvalidParams,    // Invalid method parameters
  kInternalError = JsonRpcError.kInternalError,    // Internal JSON RPC error

  // Implementation-defined server-errors
  kInvalidInput = -32000,        // Missing or invalid parameters
  kResourceNotFound = -32001,    // Requested resource not found
  kResourceUnavailable = -32002, // Requested resource not available
  kTransactionRejected = -32003, // Transaction creation failed
  kMethodNotSupported = -32004,  // Method is not implemented
  kLimitExceeded = -32005,       // Request exceeds defined limit
  kVersionNotSupported = -32006, // Version of JSON-RPC protocol is not supported

  kUnknown = -1                 // Unknown error
};

enum FilecoinProviderError {
  kSuccess = ProviderError.kSuccess,  // No error
  kUnknown = ProviderError.kUnknown,
  kActorNotFound = 1, // Actor not found for given address
  // Pre-defined error codes specified in
  // https://www.jsonrpc.org/specification#error_object
  kParsingError = JsonRpcError.kParsingError,      // Parse error - Invalid JSON
  kInvalidRequest = JsonRpcError.kInvalidRequest,  // JSON is not a valid request object
  kMethodNotFound = JsonRpcError.kMethodNotFound,  // Method does not exist
  kInvalidParams = JsonRpcError.kInvalidParams,    // Invalid method parameters
  kInternalError = JsonRpcError.kInternalError,    // Internal JSON RPC error
};

enum SolanaProviderError {
  kSuccess = ProviderError.kSuccess,  // No error
  kUnknown =  ProviderError.kUnknown,

  kUserRejectedRequest = ProviderError.kUserRejectedRequest,
  kUnauthorized = ProviderError.kUnauthorized,
  kResourceUnavailable = ProviderError.kResourceUnavailable,

  // Pre-defined error codes specified in
  // https://www.jsonrpc.org/specification#error_object
  kParsingError = JsonRpcError.kParsingError,      // Parse error - Invalid JSON
  kInvalidRequest = JsonRpcError.kInvalidRequest,  // JSON is not a valid request object
  kMethodNotFound = JsonRpcError.kMethodNotFound,  // Method does not exist
  kInvalidParams = JsonRpcError.kInvalidParams,    // Invalid method parameters
  kInternalError = JsonRpcError.kInternalError,    // Internal JSON RPC error

  // Implementation defined RPC server errors
  // https://docs.rs/solana-client/1.9.9/src/solana_client/rpc_custom_error.rs.html
  kBlockCleanedUp = -32001,
  kSendTransactionPreflightFailure = -32002,
  kTransactionSignatureVerificationFailure = -32003,
  kBlockNotAvailable = -32004,
  kNodeUnhealthy = -32005,
  kTransactionPrecompileVerificationFailure = -32006,
  kSlotSkipped = -32007,
  kNoSnapshot = -32008,
  kLongTermStorageSlotSkipped = -32009,
  kKeyExcludedFromSecondaryIndex = -32010,
  kTransactionHistoryNotAvailable = -32011,
  kScanError = -32012,
  kTransactionSignatureLenMismatch = -32013,
  kBlockStatusNotAvailableYet = -32014
};

enum BitcoinProviderError {
  kSuccess = ProviderError.kSuccess,  // No error
  kUnknown = ProviderError.kUnknown,
  kInternalError = JsonRpcError.kInternalError,
};

union ProviderErrorUnion {
  ProviderError provider_error;
  SolanaProviderError solana_provider_error;
  FilecoinProviderError filecoin_provider_error;
  BitcoinProviderError bitcoin_provider_error;
};

// There is one EthereumProvider per renderer, the renderer communicates
// with this for window.ethereum usage.
interface EthereumProvider {
  // Initializes an EventsListener
  Init(pending_remote<EventsListener> events_listener);

  // Corresponds to window.ethereum.request
  Request(mojo_base.mojom.Value input) => (mojo_base.mojom.Value id, mojo_base.mojom.Value formed_response,bool reject, string first_allowed_account, bool update_bind_js_properties);

  // Corresponds to window.ethereum.enable and eth_requestAccounts
  Enable() => (mojo_base.mojom.Value id, mojo_base.mojom.Value formed_response,bool reject, string first_allowed_account, bool update_bind_js_properties);
  Send(string method, mojo_base.mojom.Value params) => (mojo_base.mojom.Value id, mojo_base.mojom.Value formed_response,bool reject, string first_allowed_account, bool update_bind_js_properties);
  SendAsync(mojo_base.mojom.Value input) => (mojo_base.mojom.Value id, mojo_base.mojom.Value formed_response, bool reject, string first_allowed_account, bool update_bind_js_properties);

  // Used for the connect event
  GetChainId() => (string chain_id);

  // Determines if the keyring is locked.
  IsLocked() => (bool isLocked);
};

// https://github.com/solana-labs/solana-web3.js/blob/6482d0d/src/transaction.ts#L126
struct SignaturePubkeyPair {
  array<uint8>? signature;
  string public_key;
};

struct SolanaSignTransactionParam {
  string encoded_serialized_msg;
  array<SignaturePubkeyPair> signatures;
};

interface SolanaProvider {
  // Initializes an SolanaEventsListener
  Init(pending_remote<SolanaEventsListener> events_listener);

  // Optional {onlyIfTrusted: true}, when that flag is enable, we will only
  // connect and emit a connect event if the application is trusted.
  // It will returns base58 encoded public key when success
  Connect(mojo_base.mojom.DictionaryValue? arg)
    => (SolanaProviderError error, string error_message, string public_key);
  Disconnect();
  [Sync]
  IsConnected() => (bool is_connected);
  // return base58 encoded public key
  [Sync]
  GetPublicKey() => (string public_key);
  // It takes a base58 encoded serialized Message and return a serialized
  // Transaction with signature in wire format.
  SignTransaction(SolanaSignTransactionParam param)
    => (SolanaProviderError error, string error_message,
        array<uint8> serialized_tx,
        SolanaMessageVersion version);
  SignAllTransactions(array<SolanaSignTransactionParam> params)
    => (SolanaProviderError error, string error_message,
        array<array<uint8>> serialized_txs,
        array<SolanaMessageVersion> versions);
  // It takes a base58 encoded serialized Message and return an object
  // containing both base58 encoded public key and signature as
  // { publicKey: <base58 encoded string>,
  //   signature:  <base58 encoded string>
  // }
  // Optional argument send_options:
  //   { maxRetries?: <number>,
  //     preflightCommitment?: <string>,
  //     skipPreflight?: <boolean>
  //   }
  SignAndSendTransaction(
      SolanaSignTransactionParam param,
      mojo_base.mojom.DictionaryValue? send_options)
    => (SolanaProviderError error, string error_message,
        mojo_base.mojom.DictionaryValue result);
  // It takes a byte array and an optional display encoding for
  // users and returns an object as
  // { publicKey: <base58 encoded string>,
  //   signature:  <base58 encoded string>
  // }
  SignMessage(array<uint8> blob_msg, string? display_encoding)
    => (SolanaProviderError error, string error_message,
        mojo_base.mojom.DictionaryValue result);

  // Arg is {method: <string>, params: {...}}
  // returns a dictionary result to be converted into a v8 object
  Request(mojo_base.mojom.DictionaryValue arg)
    => (SolanaProviderError error, string error_message,
        mojo_base.mojom.DictionaryValue result);
};

enum WalletPinServiceErrorCode {
  // Token not supported for pinning
  ERR_WRONG_TOKEN = 1,
  // Token metadata has non-ipfs url
  ERR_NON_IPFS_TOKEN_URL = 2,
  // Fetching metadata has failed
  ERR_FETCH_METADATA_FAILED = 3,
  ERR_WRONG_METADATA_FORMAT = 4,
  ERR_ALREADY_PINNED = 5,
  ERR_NOT_PINNED = 6,
  ERR_PINNING_FAILED = 7,
  ERR_MEDIA_TYPE_UNSUPPORTED = 8
};

enum TokenPinStatusCode {
  STATUS_NOT_PINNED = 1,
  STATUS_PINNED = 2,
  STATUS_PINNING_IN_PROGRESS = 3,
  STATUS_PINNING_FAILED = 4,
  STATUS_UNPINNING_IN_PROGRESS = 5,
  STATUS_UNPINNING_FAILED = 6,
  STATUS_PINNING_PENDING = 7,
  STATUS_UNPINNING_PENDING = 8
};

struct PinError {
  WalletPinServiceErrorCode error_code;
  string message;
};

struct TokenPinStatus {
  // Actual token status
  TokenPinStatusCode code;
  // Token error related to the pin status. May be null.
  PinError? error;
  // Last time token was validated(checked that data is pinned correctly)
  mojo_base.mojom.Time validate_time;
};

struct TokenPinOverview {
  // Token status for the local pin backend.
  TokenPinStatus? local;
  // Token statuses for remote pin backends.
  map<string, TokenPinStatus> remotes;
};

// Observers state of the BraveWalletPinService
interface BraveWalletPinServiceObserver {
  OnTokenStatusChanged(string? service, BlockchainToken token,
                       TokenPinStatus status);
  OnLocalNodeStatusChanged(bool running);
};

enum TokenValidationResult {
  // All is ok
  kValidationPassed,
  // Token should be repinned
  kValidationFailed,
  // Should retry validation later
  kValidationError,
  // Token is unsupported
  kValidationIgnored
};

// Low-level interface for token pinning.
// String service argument is used to select on which pinning
// service operation should be performed.
// At the moment we have only local pinning, so use null.
interface WalletPinService {
  AddObserver(pending_remote<BraveWalletPinServiceObserver> observer);

  // Launches pinning for provided token.
  // At the moment only local pinning is supported so use null "service" argument.
  AddPin(BlockchainToken token, string? service) =>(bool result,
                                                    PinError? error);
  // Unpins token.
  RemovePin(BlockchainToken token, string? service) => (bool result,
                                                        PinError? response);
  // Returns overview for provided token.
  GetTokenStatus(BlockchainToken token) => (TokenPinOverview? status,
                                            PinError? error);
  // Checks whether token is pinned correctly.
  Validate(BlockchainToken token, string? service) => (TokenValidationResult result);
  // Returns whether IPFS localnode is currently running.
  IsLocalNodeRunning() => (bool result);

  // Returns whether token is supported for pinning.
  // Note: You should manually check token metadata url to have ipfs:// url.
  IsTokenSupported(BlockchainToken token) => (bool result);
};

interface WalletAutoPinServiceObserver {
  OnAutoPinStatusChanged(bool enabled);
};

// Listens for added user tokens and automatically pins them.
interface WalletAutoPinService {
  AddObserver(pending_remote<WalletAutoPinServiceObserver> observer);

  // Enables autopinning, so old and new user tokens may be pinned.
  SetAutoPinEnabled(bool enabled);
  IsAutoPinEnabled() => (bool enabled);
};

// Used by the WebUI page to bootstrap bidirectional communication.
interface PanelHandlerFactory {
  // The WebUI calls this method when the page is first initialized.
  CreatePanelHandler(pending_remote<Page> page,
                     pending_receiver<PanelHandler> panel_handler,
                     pending_receiver<WalletHandler> wallet_handler,
                     pending_receiver<JsonRpcService> json_rpc_service,
                     pending_receiver<BitcoinWalletService> bitcoin_wallet_service,
                     pending_receiver<SwapService> swap_service,
                     pending_receiver<SimulationService> simulation_service,
                     pending_receiver<AssetRatioService> asset_ratio_service,
                     pending_receiver<KeyringService> keyring_service,
                     pending_receiver<BlockchainRegistry> blockchain_registry,
                     pending_receiver<TxService> tx_service,
                     pending_receiver<EthTxManagerProxy> eth_tx_manager_proxy,
                     pending_receiver<SolanaTxManagerProxy> solana_tx_manager_proxy,
                     pending_receiver<FilTxManagerProxy> fil_tx_manager_proxy,
                     pending_receiver<BraveWalletService> brave_wallet_service,
                     pending_receiver<BraveWalletP3A> brave_wallet_p3a,
                     pending_receiver<WalletPinService>
                         brave_wallet_pin_service,
                     pending_receiver<WalletAutoPinService>
                         brave_wallet_auto_pin_service,
                     pending_receiver<IpfsService>
                         brave_wallet_ipfs_service_receiver);
};

interface PageHandlerFactory {
  // The WebUI calls this method when the page is first initialized.
  CreatePageHandler(pending_remote<Page> page,
                    pending_receiver<PageHandler> page_handler,
                    pending_receiver<WalletHandler> wallet_handler,
                    pending_receiver<JsonRpcService> json_rpc_service,
                    pending_receiver<BitcoinWalletService> bitcoin_wallet_service,
                    pending_receiver<SwapService> swap_service,
                    pending_receiver<AssetRatioService> asset_ratio_service,
                    pending_receiver<KeyringService> keyring_service,
                    pending_receiver<BlockchainRegistry> blockchain_registry,
                    pending_receiver<TxService> tx_service,
                    pending_receiver<EthTxManagerProxy> eth_tx_manager_proxy,
                    pending_receiver<SolanaTxManagerProxy> solana_tx_manager_proxy,
                    pending_receiver<FilTxManagerProxy> fil_tx_manager_proxy,
                    pending_receiver<BraveWalletService> brave_wallet_service,
                    pending_receiver<BraveWalletP3A> brave_wallet_p3a,
                    pending_receiver<WalletPinService> brave_wallet_pin_service,
                    pending_receiver<WalletAutoPinService>
                        brave_wallet_auto_pin_service,
                    pending_receiver<IpfsService> brave_wallet_ipfs_service);
};

// Lifetime option in sync with CreatePermissionLifetimeOptions()
enum PermissionLifetimeOption {
  kPageClosed = 0,
  k24Hours = 1,
  k7Days = 2,
  kForever = 3
};

// Browser-side handler for requests from WebUI page.
interface PanelHandler {
  // Notify the backend that the UI is ready to be shown.
  ShowUI();

  // Notify the backend that the dialog should be closed.
  CloseUI();

  ConnectToSite(array<string> accounts, PermissionLifetimeOption option);
  CancelConnectToSite();
  SetCloseOnDeactivate(bool close);
  Focus();

  IsSolanaAccountConnected(string account) => (bool connected);
};

// Browser-side handler for requests from WebUI page.
interface PageHandler {
  // Used by the brave://wallet page to open up the approval panel
  ShowApprovePanelUI();
};

// TODO(apaymyshev): remove favorite apps ui
struct AppItem {
  string description;
  string icon;
  string name;
  string url;
};

enum AssetPriceTimeframe {
  Live,
  OneDay,
  OneWeek,
  OneMonth,
  ThreeMonths,
  OneYear,
  All
};

struct AssetTimePrice {
  mojo_base.mojom.TimeDelta date;
  string price;
};

struct AssetPrice {
  string from_asset;
  string to_asset;
  string price;
  string asset_timeframe_change;
};

struct CoinMarket {
  string id;
  string symbol;
  string name;
  string image;
  double market_cap;
  uint32 market_cap_rank;
  double current_price;
  double price_change_24h;
  double price_change_percentage_24h;
  double total_volume;
};

struct Dapp {
  uint32 id; // Assigned by DappRadar
  string name;
  string description;
  string logo;
  string website;
  array<string> chains;
  array<string> categories;
  uint32 transactions;
  uint32 uaw;
  double volume;
  double balance;
  string range;
};

// Structs to model 0x (swap) HTTP API interactions
// Docs: https://docs.0x.org/0x-api-swap
struct SwapParams {
  string taker_address;
  string sell_amount;
  string buy_amount;
  string buy_token;
  string sell_token;
  double slippage_percentage;
  string gas_price;
};

struct ZeroExSource {
  string name;
  string proportion;
};

struct ZeroExFee {
  string fee_type;
  string fee_token;
  string fee_amount;
  string billing_type;
};

struct ZeroExFees {
  ZeroExFee? zero_ex_fee;
};

struct SwapResponse {
  string price;
  string guaranteed_price; // Unused for price quote response
  string to;   // Unused for price quote response
  string data; // Unused for price quote response
  string value;
  string gas;
  string estimated_gas;
  string gas_price;
  string protocol_fee;
  string minimum_protocol_fee;
  string buy_token_address;
  string sell_token_address;
  string buy_amount;
  string sell_amount;
  string allowance_target;
  string sell_token_to_eth_rate;
  string buy_token_to_eth_rate;
  string estimated_price_impact;
  array<ZeroExSource> sources;
  ZeroExFees fees;
};

struct SwapErrorResponseItem {
  string field;
  int32 code;
  string reason;
};

struct SwapErrorResponse {
  int32 code;
  string reason;
  array<SwapErrorResponseItem> validation_errors;
  bool is_insufficient_liquidity;
};

// Structs to model Jupiter (swap) HTTP API interactions
// Swagger spec: https://quote-api.jup.ag/docs/static/index.html
//
// Note that amount field is incorrectly modelled as number in spec,
// but it has been fixed here.
struct JupiterFee {
  uint64 amount;
  string mint;
  double pct;
};

struct JupiterMarketInfo {
  string id;
  string label;
  string input_mint;
  string output_mint;
  bool not_enough_liquidity;
  uint64 in_amount;
  uint64 out_amount;
  double price_impact_pct;
  JupiterFee lp_fee;
  JupiterFee platform_fee;
};

struct JupiterRoute {
  uint64 in_amount;
  uint64 out_amount;
  uint64 amount;
  uint64 other_amount_threshold;
  string swap_mode;
  double price_impact_pct;
  int32 slippage_bps;
  array<JupiterMarketInfo> market_infos;
};

struct JupiterQuote {
  array<JupiterRoute> routes;
};

struct JupiterQuoteParams {
  string input_mint;
  string output_mint;
  string amount;
  int32 slippage_bps;
  string user_public_key;
};

struct JupiterSwapParams {
  JupiterRoute route;
  string user_public_key;
  string input_mint;
  string output_mint;
};

struct JupiterSwapTransactions {
  string swap_transaction;
};

struct JupiterErrorResponse {
  string status_code;
  string error;
  string message;
  bool is_insufficient_liquidity;
};

enum DiscountCode {
  // No discount
  kNone = 0,

  // 100% discount is offered because of our inability to collect fees
  // for the given output token.
  //
  // Applicable for Jupiter swaps only.
  kUnknownJupiterOutputMint = 1,
};

struct BraveSwapFeeParams {
  string chain_id;
  string input_token;
  string output_token;
  string taker;
};

struct BraveSwapFeeResponse {
  string fee_param;
  string protocol_fee_pct;
  string brave_fee_pct;
  string discount_on_brave_fee_pct;
  string effective_fee_pct;
  DiscountCode discount_code;
  bool has_brave_fee;
};

const string kLedgerHardwareVendor = "Ledger";
const string kTrezorHardwareVendor = "Trezor";

enum KeyringId {
  kDefault = 0,
  kSolana = 1,
  kFilecoin = 2,
  kFilecoinTestnet = 3,
  kBitcoin84 = 4,
  kBitcoin84Testnet = 5,
  kZCashMainnet = 6,
  kZCashTestnet = 7,
};

const string kP3ACountTestNetworksSwitch = "p3a-count-wallet-test-networks";
const string kP3ACountTestNetworksLoadTimeKey = "braveWalletP3ACountTestNetworks";

enum FilecoinAddressProtocol {
  SECP256K1 = 1, // Represents the address SECP256K1 protocol
  BLS = 3, // Represents the address BLS protocol
  DELEGATED = 4
};

struct HardwareWalletAccount {
  string address;
  string derivation_path;
  string name;
  string hardware_vendor;
  string device_id;
  CoinType coin;
  KeyringId keyring_id;
};

struct HardwareInfo {
  string path;
  string vendor;
  string device_id;
};

enum AccountKind {
  kDerived,
  kImported,
  kHardware
};

struct AccountId {
  CoinType coin;
  // TODO(apaymyshev): that should be different keyrings for different kinds.
  KeyringId keyring_id;
  AccountKind kind;
  // TODO(apaymyshev): should be an index within keyring.
  string address;
  uint32 bitcoin_account_index;

  // Two `AccountIds` equal iff their `unique_key` fields equal. Use this to
  // check AccountIds for equality or to store as string keys. Persist with
  // caution as format may change.
  string unique_key;
};

struct AccountInfo {
  AccountId account_id;
  string address;
  string name;
  HardwareInfo? hardware;
};

struct AllAccountsInfo {
  array<AccountInfo> accounts;
  // `selected_account` is null only when there is no accounts at all which
  // happens in tests.
  AccountInfo? selected_account;
  AccountInfo? eth_dapp_selected_account;
  AccountInfo? sol_dapp_selected_account;
};

struct KeyringInfo {
  KeyringId id;
  bool is_keyring_created;
  bool is_locked;
  bool is_backed_up;
  array<AccountInfo> account_infos;
};

struct WalletInfo {
  bool is_wallet_created;
  bool is_wallet_locked;
  bool is_wallet_backed_up;
  bool is_filecoin_enabled;
  bool is_solana_enabled;
  bool is_bitcoin_enabled;
  bool is_nft_pinning_feature_enabled;
  bool is_panel_v2_feature_enabled;
};

// Browser-side handler for common panel / page things
interface WalletHandler {
  // Obtains basic information about the wallet that is needed for first render
  GetWalletInfo() => (WalletInfo walletInfo);
};

struct BlockchainToken {
  // TODO(jocelyn): contract_address should be renamed to address to be a
  // general naming for different coin type. Currently it's token mint address
  // in Solana's context.
  string contract_address;
  string name;
  string logo;
  bool is_erc20;
  bool is_erc721;
  bool is_erc1155;
  bool is_nft;
  bool is_spam;
  string symbol;
  int32 decimals;
  bool visible = true;
  string token_id = "";  // Ethereum only, non-empty for ERC721 tokens.
  string coingecko_id = "";
  string chain_id;
  CoinType coin;
};

struct AllowanceInfo {
  string chain_id;
  string contract_address;
  string approver_address;
  string spender_address;
  string amount;
};

// WebUI-side handler for requests from the browser.
interface Page {
};

interface KeyringServiceObserver {
  // Fired when a keyring is created
  KeyringCreated(KeyringId keyring_id);

  // Fired when a keyring is restored
  KeyringRestored(KeyringId keyring_id);

  // Fired when a keyring is reset
  KeyringReset();

  // Fired when a keyring is locked
  Locked();

  // Fired when a keyring is unlocked
  Unlocked();

  // Fired when a keyring is backed up
  BackedUp();

  // Fired when the accounts list changes
  AccountsChanged();

  // Fired when accounts are added
  AccountsAdded(array<AccountInfo> added_accounts);

  // Fired when the autolock setting changes
  AutoLockMinutesChanged();

  // Fired when the selected wallet account setting changes
  SelectedWalletAccountChanged(AccountInfo account);

  // Fired when the selected dapp account setting changes
  SelectedDappAccountChanged(CoinType coin, AccountInfo? account);
};

enum OnRampProvider {
  kRamp = 0,
  kSardine = 1,
  kTransak = 2,
  kStripe = 3,
  kCoinbase = 4
};

enum OffRampProvider {
  kRamp = 1
};

// List of tokens and coins that are supported.
// is_nft property in the returned registry tokens is not reliable, the value is based
// on the value of is_erc721 only and doesn't consider Solana NFTs and ERC1155 NFTs.
interface BlockchainRegistry {
  // Obtains token information by an address lookup.
  GetTokenByAddress(string chain_id, CoinType coin, string address) => (BlockchainToken? token);

  // Obtains token information by a symbol lookup.
  GetTokenBySymbol(string chain_id, CoinType coin, string symbol) => (BlockchainToken? token);

  // Obtains all tokens Send/Swap UI
  GetAllTokens(string chain_id, CoinType coin) => (array<BlockchainToken> tokens);

  // Below APIs are Ethereum only for the moment.
  // Obtains all tokens for a single provider for the Buy UI
  GetBuyTokens(OnRampProvider provider, string chain_id) => (array<BlockchainToken> tokens);
  // Obtains all tokens for multiple providers for the Buy UI
  GetProvidersBuyTokens(array<OnRampProvider> providers, string chain_id) => (array<BlockchainToken> tokens);

  // Obtains all tokens for the Sell UI
  GetSellTokens(OffRampProvider provider, string chain_id) => (array<BlockchainToken> tokens);

  // Get currencies list
  GetOnRampCurrencies() => (array<OnRampCurrency> currencies);

  // Returns list of prepopulated networks.
  GetPrepopulatedNetworks() => (array<NetworkInfo> networks);

  // Returns lists of top dapps
  GetTopDapps(string chain_id, CoinType coin) => (array<Dapp> dapps);

  // Returns the Coincecko ID for a given chain id and contract address
  GetCoingeckoId(string chain_id, string contract_address)
    => (string? coingecko_id);
};

// Implements the HD wallet, Ledger & Trezor integration, account management,
// and signing.
interface KeyringService {
  // Creates a new wallet and encrypts it using the specified password
  CreateWallet(string password) => (string mnemonic);

  // Obtains the mnemonic code words for an already existing wallet
  // TODO(darkdh): make result optional instead of using empty string indicated
  // failure
  GetMnemonicForDefaultKeyring(string password) => (string mnemonic);

  // Restores a wallet with the specified mnemonic and encrypts it with the
  // new password provided. isLegacyBraveWallet can be used to restore the
  // wallet using Brave's legacy derivation paths.
  RestoreWallet(string mnemonic, string password, bool isLegacyBraveWallet)
    => (bool isValidMnemonic);

  // Locks the keyring.
  Lock();

  // Unlocks the keyring.
  Unlock(string password) => (bool success);

  // Determines if the keyring is locked.
  IsLocked() => (bool isLocked);

  // Adds an account to the keyring.
  AddAccount(CoinType coin, KeyringId keyring_id, string account_name) => (AccountInfo? account_info);

  // Encodes the private key for exporting.
  EncodePrivateKeyForExport(AccountId account_id, string password)
    => (string privateKey);

  // Imports an account with a specific private key to the corresponding keyring
  // privateKey can be coin preferred encoding, ex. hex or base58
  // For filecoin strictly use ImportFilecoinAccount.
  ImportAccount(string accountName, string privateKey, CoinType coin)
    => (AccountInfo? account);

  // Imports a filecoin account with a specific private key and network
  ImportFilecoinAccount(string accountName, string privateKey, string network)
      => (AccountInfo? account);

  // Imports an account via JSON
  ImportAccountFromJson(string accountName, string password, string json)
    => (AccountInfo? account);

  // Determines if the keyring has been backed up
  IsWalletBackedUp() => (bool backed_up);

  // Informs the keyring that the wallet has been backed up
  NotifyWalletBackupComplete();

  // TODO(apaymyshev): remove that one:

  // DEPREACATED and to be removed soon. Do not use.
  // Obtains the keyring information
  GetKeyringInfo(KeyringId keyring_id) => (KeyringInfo keyring);

  // Adds a KeyringServiceObserver
  AddObserver(pending_remote<KeyringServiceObserver> observer);

  // Sets the account name for a derived account
  SetAccountName(AccountId account_id, string name) => (bool success);

  // Adds hardware accounts
  AddHardwareAccounts(array<HardwareWalletAccount> info) => (array<AccountInfo>? account_infos);

  // Removes imported or hardware account
  RemoveAccount(AccountId account_id, string password) => (bool success);

  // Informs the user that user interaction occurred so auto-lock doesn't occur
  NotifyUserInteraction();

  // Returns collection of all accounts and dapp/wallet selected ones.
  GetAllAccounts() => (AllAccountsInfo all_accounts);

  // Sets the selected account
  SetSelectedAccount(AccountId account_id) => (bool success);

  // Obtains the number of minutes that the keyring will auto-lock in
  GetAutoLockMinutes() => (int32 minutes);

  // Sets the number of minutes for keyring auto-lock
  // Must be within the inclusive range [kAutoLockMinutesMin, kAutoLockMinutesMax]
  SetAutoLockMinutes(int32 minutes) => (bool success);

  // Returned result is true if the password is considered a strong password.
  // We define a strong password to have:
  // - At least one letter
  // - At least one number
  // - At least 7 characters
  // - At least one non-alphanumeric character
  IsStrongPassword(string password) => (bool result);

  // Validate password for default keyring.
  ValidatePassword(string password) => (bool result);

  // Get the checksume'd EthAddress for the specified address
  GetChecksumEthAddress(string address) => (string checksum_address);

  // Obtains if there's a pending unlock request
  // Note that there is no need for an API to notify unlocked
  // because the KeyringServiceObserver Unlocked event can be used for that.
  HasPendingUnlockRequest() => (bool pending);
};

// Used for cryptocurrency prices over time.
interface AssetRatioService {
  // Obtains the URL for buying assets specifying currency
  GetBuyUrlV1(OnRampProvider provider, string chain_id, string address, string symbol, string amount, string currencyCode) => (string url, string? error);

  // Obtains the URL for selling assets specifying currency
  GetSellUrl(OffRampProvider provider, string chain_id, string address, string symbol, string amount, string currencyCode) => (string url, string? error);

  // Obtains the prices from a list of assets to a list of assets
  // Each from asset is represented in the to asset and includes the timeframe
  // change as well.
  GetPrice(array<string> from_assets, array<string> to_assets, AssetPriceTimeframe timeframe) =>
      (bool success, array<AssetPrice> values);

  // Obtains the price history for a specific asset
  GetPriceHistory(string asset, string vs_asset,
      AssetPriceTimeframe timeframe) =>
          (bool success, array<AssetTimePrice> values);

  // Obtain token info via contract address through etherscan API.
  // This is only for Ethereum mainnet.
  // Note: The is_nft property of the token is not reliable because
  // the value is based on the value of is_erc721 only and doesn't
  // consider Solana NFTs and ERC1155 NFTs.
  GetTokenInfo(string contract_address) => (BlockchainToken? token);

  // Obtain list of top currencies and their market data
  GetCoinMarkets(string vs_asset, uint8 limit) => (bool success, array<CoinMarket> values);
};

// Implements swapping related functionality through the 0x API.
interface SwapService {
  // Obtains a price quote for a swap
  GetPriceQuote(SwapParams params) =>
      (SwapResponse? response, SwapErrorResponse? error_response, string error_string);

  // Obtains transaction payload data for a swap
  GetTransactionPayload(SwapParams params) =>
      (SwapResponse? response, SwapErrorResponse? error_response, string error_string);

  // Obtains a price quote from Jupiter for a Solana swap
  GetJupiterQuote(JupiterQuoteParams params) =>
      (JupiterQuote? response, JupiterErrorResponse? error_response, string error_string);

  // Get the serialized transactions to perform the swap
  GetJupiterSwapTransactions(JupiterSwapParams params) =>
      (JupiterSwapTransactions? response, JupiterErrorResponse? error_response, string error_string);

  // Obtains whether the given chain id supports swap
  IsSwapSupported(string chain_id) => (bool result);

  GetBraveFee(BraveSwapFeeParams params) =>
      (BraveSwapFeeResponse? response, string error_string);
};

interface IpfsService {
  GetNFTGatewayURL() => (string? url);
  GetGatewayURL() => (string? url);

  SetGateway(string url) => (bool result);
  SetNFTGateway(string url) => (bool result);

  TranslateToGatewayURL(string url) => (string? translated_url);
  TranslateToNFTGatewayURL(string url) => (string? translated_url);
  ExtractIPFSUrlFromGatewayLikeUrl(string url) => (string? ipfs_url);

  ContentHashToCIDv1URL(array<uint8> content_hash) => (string? url);
};

interface JsonRpcServiceObserver {
  // Fired when the selected network changes
  ChainChangedEvent(string chain_id, CoinType coin, url.mojom.Origin? origin);

  // Fired when a wallet_addEthereumChain request is completed
  OnAddEthereumChainRequestCompleted(string chain_id, string error);

  // Fired when a chain ID's 1559 status changes
  OnIsEip1559Changed(string chain_id, bool is_eip1559);
};

struct TxData {
  string nonce;
  string gas_price;
  string gas_limit;
  string to;
  string value;
  array<uint8> data;
  bool sign_only;
  string? signed_transaction;
};

struct GasEstimation1559 {
  string slow_max_priority_fee_per_gas;
  string slow_max_fee_per_gas;
  string avg_max_priority_fee_per_gas;
  string avg_max_fee_per_gas;
  string fast_max_priority_fee_per_gas;
  string fast_max_fee_per_gas;
  string base_fee_per_gas;
};

struct TxData1559 {
  TxData base_data;
  string chain_id;
  string max_priority_fee_per_gas;
  string max_fee_per_gas;
  GasEstimation1559? gas_estimation;
};

const string kSolanaSystemProgramId = "11111111111111111111111111111111";
const string kSolanaTokenProgramId = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
const string kSolanaAssociatedTokenProgramId = "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL";
const string kSolanaSysvarRentProgramId = "SysvarRent111111111111111111111111111111111";
const string kSolanaMetadataProgramId = "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s";
const string kSolanaConfigProgramId =
  "Config1111111111111111111111111111111111111";
const string kSolanaStakeProgramId =
  "Stake11111111111111111111111111111111111111";
const string kSolanaVoteProgramId =
  "Vote111111111111111111111111111111111111111";
const string kSolanaBPFLoaderUpgradeableProgramId =
  "BPFLoaderUpgradeab1e11111111111111111111111";
const string kSolanaEd25519SigVerifyProgramId =
  "Ed25519SigVerify111111111111111111111111111";
const string kSolanaKeccakSecp256kProgramId =
  "KeccakSecp256k11111111111111111111111111111";

// It is required to keep these chain IDs lowercase ASCII
const string kMainnetChainId = "0x1";
const string kGoerliChainId = "0x5";
const string kSepoliaChainId = "0xaa36a7";
const string kLocalhostChainId = "0x539";
const string kPolygonMainnetChainId = "0x89";
const string kBinanceSmartChainMainnetChainId = "0x38";
const string kAvalancheMainnetChainId = "0xa86a"; // Avalanche C-Chain
const string kFantomMainnetChainId = "0xfa"; // Fantom Opera
const string kCeloMainnetChainId = "0xa4ec";
const string kOptimismMainnetChainId = "0xa";
const string kAuroraMainnetChainId = "0x4e454152";
const string kArbitrumMainnetChainId = "0xa4b1";
const string kNeonEVMMainnetChainId = "0xe9ac0d6";
const string kFilecoinEthereumMainnetChainId = "0x13a";  // Filecoin eth mainnet
const string kFilecoinEthereumTestnetChainId = "0x4cb2f";  // Filecoin eth calibration
const string kSolanaMainnet = "0x65";
const string kSolanaTestnet = "0x66";
const string kSolanaDevnet = "0x67";
const string kFilecoinTestnet = "t";
const string kFilecoinMainnet = "f";
const string kBitcoinMainnet = "bitcoin_mainnet";
const string kBitcoinTestnet = "bitcoin_testnet";
const string kZCashMainnet = "zcash_mainnet";
const string kZCashTestnet = "zcash_testnet";
const string kArbitrumNovaChainId = "0xa4ba";
const string kGnosisChainId = "0x64";
const string kGodwokenChainId = "0x116ea";
const string kPalmChainId = "0x2a15c308d";
const string kPolygonZKEVMChainId = "0x44d";
const string kZkSyncEraChainId = "0x144";
const string kBaseMainnetChainId = "0x2105";

// https://github.com/satoshilabs/slips/blob/master/slip-0044.md
enum CoinType {
  BTC = 0,
  ETH = 60,
  FIL = 461,
  SOL = 501
};

struct NetworkInfo {
  string chain_id;
  string chain_name;
  array<string> block_explorer_urls;
  array<string> icon_urls;
  int32 active_rpc_endpoint_index;
  array<url.mojom.Url> rpc_endpoints;
  string symbol;
  string symbol_name;
  int32 decimals;
  CoinType coin;
  array<KeyringId> supported_keyrings;
  bool is_eip1559; // only for ETH.
};

struct OriginInfo {
  string origin_spec;
  string e_tld_plus_one;
};

struct AddChainRequest {
  OriginInfo origin_info;
  NetworkInfo network_info;
};

struct SwitchChainRequest {
  string request_id;
  OriginInfo origin_info;
  string chain_id;
};

struct GetEncryptionPublicKeyRequest {
  string request_id;
  OriginInfo origin_info;
  AccountId account_id;
};

struct DecryptRequest {
  string request_id;
  OriginInfo origin_info;
  AccountId account_id;
  string unsafe_message;
};

struct OptionalMaxRetries {
  uint64 max_retries;
};

struct OptionalSkipPreflight {
  bool skip_preflight;
};

struct SolanaSendTransactionOptions {
  OptionalMaxRetries? max_retries;
  string? preflight_commitment;
  OptionalSkipPreflight? skip_preflight;
};

struct ERC20BalanceResult {
  string contract_address;
  string? balance;
};

struct SPLTokenAmount {
  string mint;
  string amount;
  int32 decimals;
  string ui_amount;
};

enum ResolveMethod {
   kAsk = 0,
   kDisabled = 1,
   kEnabled = 2,
};

// Deals with the ETH JSON RPC API, as well as things like the user's current
// network.
interface JsonRpcService {
  // Checks the chain ID for an ethereum chain that should be added
  AddChain(NetworkInfo chain) => (string chain_id, ProviderError error, string error_message);
  AddEthereumChainRequestCompleted(string chain_id, bool approved);
  RemoveChain(string chain_id, CoinType coin) => (bool success);
  GetPendingAddChainRequests() => (array<AddChainRequest> requests);

  // This is used for UI notifying native when the user approves or
  // rejects SwitchChainRequest
  NotifySwitchChainRequestProcessed(string request_id, bool approved);
  GetPendingSwitchChainRequests() => (array<SwitchChainRequest> requests);

  SetNetwork(string chain_id, CoinType coin, url.mojom.Origin? origin)
    => (bool success);
  GetNetwork(CoinType coin, url.mojom.Origin? origin) => (NetworkInfo network);
  GetAllNetworks(CoinType coin) => (array<NetworkInfo> networks);
  GetCustomNetworks(CoinType coin) => (array<string> chain_ids);
  GetKnownNetworks(CoinType coin) => (array<string> chain_ids);
  GetHiddenNetworks(CoinType coin) => (array<string> chain_ids);
  AddHiddenNetwork(CoinType coin, string chain_id) => (bool success);
  RemoveHiddenNetwork(CoinType coin, string chain_id) => (bool success);

  // Obtains the default network's chain ID when there is no origin info
  // available. Ex. wallet page.
  GetDefaultChainId(CoinType coin) => (string chain_id);
  // Obtains the selected network's chain ID for origin.
  GetChainIdForOrigin(CoinType coin, url.mojom.Origin origin) => (string chain_id);

  // Obtains the current network's URL
  GetNetworkUrl(CoinType coin, url.mojom.Origin? origin)
    => (string network_url);

  // Obtains the native balance (e.g. ETH for Ethereum) for the address
  GetBalance(string address, CoinType coin, string chain_id) => (string balance, ProviderError error, string error_message);

  // Obtains the associated bytecode for the contract
  GetCode(string address, CoinType coin, string chain_id) => (string bytecode, ProviderError error, string error_message);

  // Obtains the contract's ERC20 compatible balance for an address
  // Supported by all EVM chains.
  GetERC20TokenBalance(string contract,
                       string address,
                       string chain_id) => (string balance, ProviderError error, string error_message);

  // Fetches the balances of multiple ERC20 tokens for an address. Requires a
  // BalanceScanner contract to be deployed on that network. See
  // GetEthBalanceScannerContractAddresses() in brave_wallet_constants.cc for
  // the list of supported chains.
  GetERC20TokenBalances(array<string> contracts,
                        string address,
                        string chain_id) => (array<ERC20BalanceResult> balances,
                                             ProviderError error,
                                             string error_message);

  // Obtains the contract's ERC20 allowance for an owner and a spender
  GetERC20TokenAllowance(string contract,
                         string owner_address,
                         string spender_address, string chain_id)
    => (string allowance, ProviderError error, string error_message);

  // Obtains the metadata JSON for a token ID of an ERC721 contract
  GetERC721Metadata(string contract, string token_id, string chain_id) => (string token_url, string response, ProviderError error, string error_message);

  // Obtains the metadata JSON for a token ID of an ERC1155 contract
  GetERC1155Metadata(string contract, string token_id, string chain_id) => (string token_url, string response, ProviderError error, string error_message);

  GetUnstoppableDomainsResolveMethod() => (ResolveMethod method);
  GetEnsResolveMethod() => (ResolveMethod method);
  GetEnsOffchainLookupResolveMethod() => (ResolveMethod method);
  GetSnsResolveMethod() => (ResolveMethod method);

  // Calling these setters should be approved by privacy review.
  SetUnstoppableDomainsResolveMethod(ResolveMethod method);
  SetEnsResolveMethod(ResolveMethod method);
  SetEnsOffchainLookupResolveMethod(ResolveMethod method);
  SetSnsResolveMethod(ResolveMethod method);

  // ENS lookups
  EnsGetEthAddr(string domain) => (string address, bool require_offchain_consent, ProviderError error, string error_message);

  // ENS Domain lookups
  EnsGetContentHash(string domain) => (array<uint8> content_hash,
                                       bool require_offchain_consent,
                                       ProviderError error,
                                       string error_message);

  // SNS lookups
  SnsGetSolAddr(string domain) => (string address, SolanaProviderError error, string error_message);

  // SNS Domain lookups
  SnsResolveHost(string domain) => (url.mojom.Url? url, SolanaProviderError error, string error_message);

  // Unstoppable Domains lookups
  UnstoppableDomainsGetWalletAddr(string domain, BlockchainToken? token) => (string address, ProviderError error, string error_message);
  UnstoppableDomainsResolveDns(string domain) => (url.mojom.Url? url, ProviderError error, string error_message);

  // Used for making requests to the currently selected EVM compatible node for
  // coin ETH and other nodes with corresponding coin types
  Request(string chain_id, string json_payload,
          bool auto_retry_on_network_change,
          mojo_base.mojom.Value id, CoinType coin) =>
      (mojo_base.mojom.Value id, mojo_base.mojom.Value formed_response,
        bool reject, string first_allowed_account,
        bool update_bind_js_properties);

  // Adds an observer for the events of JsonRpcService
  AddObserver(pending_remote<JsonRpcServiceObserver> observer);

  // Obtains the owner of a contract's ERC721 token ID
  GetERC721OwnerOf(string contract, string token_id, string chain_id) => (string owner_address, ProviderError error, string error_message);

  // Obtains the balance of a contract's ERC721 token ID for an address
  // Balance is 0x1 if current selected account is the same as token owner's
  // address, otherwise balance is 0x0.
  GetERC721TokenBalance(string contract_address, string token_id, string account_address, string chain_id) => (string balance, ProviderError error, string error_message);

  // Obtains the quantity of ERC1155 tokens a user has
  GetERC1155TokenBalance(string contract_address, string token_id, string account_address, string chain_id) => (string balance, ProviderError error, string error_message);

  // Fetches symbol of an ERC20 or ERC721 token.
  GetEthTokenSymbol(string contract_address,
                    string chain_id) => (string symbol,
                                         ProviderError error,
                                         string error_message);

  // Fetches decimals of an ERC20 or ERC721 token.
  GetEthTokenDecimals(string contract_address,
                      string chain_id) => (string decimals,
                                           ProviderError error,
                                           string error_message);
  // Solana JSON RPCs
  // https://docs.solana.com/developing/clients/jsonrpc-api

  // Returns the balance of the account of provided Pubkey.
  GetSolanaBalance(string pubkey, string chain_id) =>
      (uint64 balance, SolanaProviderError error, string error_message);
  // Returns the token balance of an SPL Token account.
  GetSPLTokenAccountBalance(string wallet_address,
                            string token_mint_address, string chain_id) =>
      (string amount, uint8 decimals, string uiAmountString,
       SolanaProviderError error, string error_message);
  // Returns the metadata json associated with the NFT account address
  GetSolTokenMetadata(string chain_id, string token_mint_address)
    => (string token_url, string response, SolanaProviderError error,
        string error_message);

  // Returns whether a blockhash is still valid or not for a given chain.
  IsSolanaBlockhashValid(string chain_id, string blockhash, string? commitment)
    => (bool is_valid, SolanaProviderError error, string error_message);

  // Fetches balances of all SPL tokens held by an address.
  GetSPLTokenBalances(string pubkey,
                      string chain_id) => (array<SPLTokenAmount> balances,
                                           SolanaProviderError error,
                                           string error_message);
};

struct BitcoinKeyId {
  uint32 account;
  uint32 change;
  uint32 index;
};

struct ZCashKeyId {
  uint32 account;
  uint32 change;
  uint32 index;
};

struct BitcoinUnspentOutput {
  array<uint8> txid;
  uint32 vout;
  uint64 value;
};

struct BitcoinAddressInfo {
  BitcoinKeyId key_id;
  string address_string;
  uint64 balance;
  array<BitcoinUnspentOutput>? utxo_list;
};

struct BitcoinAccountInfo {
  string name;
  array<BitcoinAddressInfo> address_infos;
  uint64 balance;
};

struct BitcoinBalance {
  uint64 total_balance;
  map<string, uint64> balances;  // address -> balance of that address(sum of all related utxos)
};

interface BitcoinWalletService {
  // Fetches BitcoinBalance struct for all addresses associated with account_id.
  // Now includes both confirmed and mempool utxos.
  GetBalance(string network_id, AccountId account_id) => (BitcoinBalance? balance, string? error_message);
  GetBitcoinAccountInfo(string network_id, AccountId account_id) => (BitcoinAccountInfo? account_info);
  SendTo(string network_id, AccountId account_id, string address_to, uint64 amount, uint64 fee) => (string txid, string error);
};

enum TransactionStatus {
  Unapproved = 0,
  Approved = 1,
  Rejected = 2,
  Submitted = 3,
  Confirmed = 4,
  Error = 5,
  Dropped = 6,
  Signed = 7 // dapps will submit the transaction
};

enum TransactionType {
  ETHSend = 0,
  ERC20Transfer = 1,
  ERC20Approve = 2,
  ERC721TransferFrom = 3,
  ERC721SafeTransferFrom = 4,
  Other = 5,
  SolanaSystemTransfer = 6,  // transferring SOL
  SolanaSPLTokenTransfer = 7,
  SolanaSPLTokenTransferWithAssociatedTokenAccountCreation = 8,
  ERC1155SafeTransferFrom = 9,
  ETHSwap = 10,
  SolanaDappSignAndSendTransaction = 11,
  SolanaDappSignTransaction = 12,
  SolanaSwap = 13,
  ETHFilForwarderTransfer = 14, // Used to send from FEVM to FVM
};

struct FilTxData {
  string nonce;
  string gas_premium;
  string gas_fee_cap;
  string gas_limit;
  string max_fee;
  string to;
  string value;
};

struct BtcTxInput {
  string address;
  uint64 value;
};

struct BtcTxOutput {
  string address;
  uint64 value;
};

struct BtcTxData {
  string to;
  uint64 amount;
  uint64 fee;
  array<BtcTxInput> inputs;
  array<BtcTxOutput> outputs;
};

union TxDataUnion {
  TxData eth_tx_data;
  TxData1559 eth_tx_data_1559;
  SolanaTxData solana_tx_data;
  FilTxData fil_tx_data;
  BtcTxData btc_tx_data;
};

struct TransactionInfo {
  string id;
  string? from_address; // Filled with account address for ETH, SOL and FIL.
  AccountId from_account_id;
  string tx_hash;
  TxDataUnion tx_data_union;
  TransactionStatus tx_status;
  TransactionType tx_type;
  array<string> tx_params;
  array<string> tx_args;
  mojo_base.mojom.TimeDelta created_time;
  mojo_base.mojom.TimeDelta submitted_time;
  mojo_base.mojom.TimeDelta confirmed_time;
  OriginInfo? origin_info;
  string chain_id;
  // Currently only available for ETH and FIL
  // Represent effective recipient of the transaction
  // For example, a transaction may be ERC20 transaction, so
  // "To" field represents the address of some smart contract.
  // In this case, the recipient field is resolved from params
  // and represents the final beneficiary of the transaction.
  // TODO(cypt4): Add for SOL
  string? effective_recipient;
};

interface TxServiceObserver {
  // Fired when a new unapproved transaction is encountered
  OnNewUnapprovedTx(TransactionInfo tx_info);

  // Fired when an unapproved transaction is updated, such as the gas
  // properties change
  OnUnapprovedTxUpdated(TransactionInfo tx_info);

  // Fired when a transaction is updated
  OnTransactionStatusChanged(TransactionInfo tx_info);

  // Fired when service is reset
  OnTxServiceReset();
};

// For transaction management such as creation, broadcasting, and storing
// transactions.
interface TxService {
  AddUnapprovedTransaction(TxDataUnion tx_data_union, AccountId from)
    => (bool success, string tx_meta_id, string error_message);

  // Used to approve a transaction
  ApproveTransaction(CoinType coin_type, string chain_id, string tx_meta_id)
    => (bool status, ProviderErrorUnion error_union, string error_message);

  // Used to reject a transaction
  RejectTransaction(CoinType coin_type, string chain_id, string tx_meta_id)
    => (bool status);

  // Used to get transaction info
  GetTransactionInfo(CoinType coin_type, string chain_id, string tx_meta_id)
    => (TransactionInfo? transaction_info);

  // Obtains a list of all transactions from an address.
  // This returns different data depending on which network is currently selected in JsonRpcService
  GetAllTransactionInfo(CoinType coin_type, string? chain_id, AccountId? from)
    => (array<TransactionInfo> transaction_infos);

  // Used to speed-up or cancel a transaction
  SpeedupOrCancelTransaction(CoinType coin_type,
                             string chain_id, string tx_meta_id, bool cancel)
    => (bool success, string tx_meta_id, string error_message);

  // Used to retry a transaction
  RetryTransaction(CoinType coin_type, string chain_id, string tx_meta_id)
    => (bool success, string tx_meta_id, string error_message);

  GetTransactionMessageToSign(CoinType coin_type,
                              string chain_id, string tx_meta_id)
    => (MessageToSignUnion? message);

  // Adds an observer for TxService
  AddObserver(pending_remote<TxServiceObserver> observer);

  // Returns number of pending transactions
  GetPendingTransactionsCount() => (uint32 count);

  // Resets the keyring and the related preferences
  Reset();
};

union MessageToSignUnion {
  string message_str;
  array<uint8> message_bytes;
};

// Transaction related APIs specific to EVM.
interface EthTxManagerProxy {
  // Used for modifying transaction data
  SetGasPriceAndLimitForUnapprovedTransaction(
    string chain_id, string tx_meta_id, string gas_price, string gas_limit)
    => (bool success);
  SetGasFeeAndLimitForUnapprovedTransaction(
    string chain_id, string tx_meta_id, string max_priority_fee_per_gas,
    string max_fee_per_gas, string gas_limit) => (bool success);
  SetDataForUnapprovedTransaction(
    string chain_id, string tx_meta_id, array<uint8> data) => (bool success);
  SetNonceForUnapprovedTransaction(
    string chain_id, string tx_meta_id, string nonce) => (bool success);

  // Used for creating transaction data
  MakeERC20TransferData(string to_address, string amount) => (bool success, array<uint8> data);
  MakeERC20ApproveData(string spender_address, string amount) => (bool success, array<uint8> data);
  MakeERC721TransferFromData(string from, string to, string token_id, string contract_address) => (bool success, array<uint8> data);
  MakeERC1155TransferFromData(string from, string to, string token_id, string value, string contract_address) => (bool success, array<uint8> data);
  MakeFilForwarderTransferData(string to_address_fil) => (bool success, array<uint8> data);

  // Gas estimation API via eth_feeHistory API
  GetGasEstimation1559(string chain_id) => (GasEstimation1559? estimation);

  GetNonceForHardwareTransaction(string chain_id, string tx_meta_id)
    => (string? nonce);
  ProcessHardwareSignature(
    string chain_id, string tx_meta_id, string v, string r, string s)
    => (bool status, ProviderError error, string error_message);
};

interface SolanaTxManagerProxy {
  // Get transaction data for transfering SOL.
  MakeSystemProgramTransferTxData(string from, string to, uint64 lamports)
      => (SolanaTxData? tx_data, SolanaProviderError error, string error_message);

  ProcessSolanaHardwareSignature(
      string chain_id,
      string tx_meta_id,
      array<uint8> signature_bytes)
      => (bool status, ProviderErrorUnion error_union, string error_message);

  // Get transaction data for transfering SPL tokens from one associated token
  // account to another.
  //
  // If the receiving associated token account exists on the chain, the created
  // transaction will have one instruction which is the transfer instruction.
  // If the receiving associated token account is not created yet, the created
  // transaction will have two instructions, the first one is the instruction
  // to create the associated token account for the recipient, and the second
  // instruction is the transfer instruction. Note that sender will fund the
  // creation (an additional cost) with the minimum balance for the new account
  // to be rent exempt. `chain_id` is needed here because we need to check if
  // the receiving associated token account exists on the specific chain via
  // `GetSolanaAccountInfo` which requires chain_id.
  MakeTokenProgramTransferTxData(
      string chain_id,
      string spl_token_mint_address,
      string from_wallet_address,
      string to_wallet_address,
      uint64 amount)
      => (SolanaTxData? tx_data, SolanaProviderError error, string error_message);

  GetEstimatedTxFee(string chain_id, string tx_meta_id)
    => (uint64 fee, SolanaProviderError error, string error_message);

  // Get transaction data from transaction bytes encoded in base64 format.
  //
  // The client must set a TransactionType using the tx_type parameter, and
  // optionally pass standard Solana send options.
  MakeTxDataFromBase64EncodedTransaction(
      string encoded_transaction,
      TransactionType tx_type,
      SolanaSendTransactionOptions? send_options)
      => (SolanaTxData? tx_data, SolanaProviderError error, string error_message);
};

interface FilTxManagerProxy {
  // Publishes signed transaction.
  ProcessFilHardwareSignature(
    string chain_id, string tx_meta_id, string signed_message)
    => (bool status, ProviderErrorUnion error_union, string error_message);
};

interface BraveWalletServiceObserver {
  // Fired when the active origin is changed along with its eTLD+1
  OnActiveOriginChanged(OriginInfo origin_info);

  // Fired when the default Ethereum wallet setting changes
  OnDefaultEthereumWalletChanged(DefaultWallet wallet);

  // Fired when the default Solana wallet setting changes
  OnDefaultSolanaWalletChanged(DefaultWallet wallet);

  // Fired when the default base currency changes (e.g. USD -> CAD)
  OnDefaultBaseCurrencyChanged(string currency);

  // Fired when the default base currency changes (e.g. BTC -> ETH)
  OnDefaultBaseCryptocurrencyChanged(string cryptocurrency);

  // Fired when the list of networks changes
  OnNetworkListChanged();

  // Fired when asset discovery starts
  OnDiscoverAssetsStarted();

  // Fired when asset discovery completes
  OnDiscoverAssetsCompleted(array<BlockchainToken> discovered_assets);

  // Fired when wallet service is being reset
  OnResetWallet();
};

interface BraveWalletServiceTokenObserver {
  OnTokenAdded(BlockchainToken token);
  OnTokenRemoved(BlockchainToken token);
};

// https://eips.ethereum.org/EIPS/eip-191
struct EthStandardSignData {
  // message for display
  string message;
};

struct CowSwapOrder {
  string sell_token;
  string sell_amount;
  string buy_token;
  string buy_amount;
  string receiver;
  string deadline;
};

union EthSignTypedDataMeta {
  CowSwapOrder cow_swap_order;
};

// https://eips.ethereum.org/EIPS/eip-712
struct EthSignTypedData {
  // message for display
  string message;
  string domain;
  // These fields are for hardware eip712 signing
  string? domain_hash;
  string? primary_hash;

  EthSignTypedDataMeta? meta;
};

// https://eips.ethereum.org/EIPS/eip-4361
struct SIWEMessage {
  url.mojom.Origin origin;
  string address;
  string? statement;
  url.mojom.Url uri;
  uint32 version;
  uint64 chain_id;
  string nonce;
  // These ISO 8601 format strings are only used for displaying, no need to
  // convert it to base::Time
  string issued_at;
  string? expiration_time;
  string? not_before;
  string? request_id;
  array<url.mojom.Url>? resources;
};

struct SolanaSignData {
  // message for display
  string message;
  // This will be passed for Solana, in hardware keyring case, it will be used
  // to sign.
  array<uint8>? message_bytes;
};

union SignDataUnion {
  EthStandardSignData eth_standard_sign_data;
  EthSignTypedData eth_sign_typed_data;
  SIWEMessage eth_siwe_data;
  SolanaSignData solana_sign_data;
};

struct SignMessageRequest {
  OriginInfo origin_info;
  int32 id;
  AccountId account_id;
  SignDataUnion sign_data;
  CoinType coin;
  string chain_id;
};

enum SignMessageErrorType {
  kChainIdMismatched,
  kAccountMismatched,
  kDomainMismatched
};

struct SignMessageError {
  string id;
  OriginInfo origin_info;
  SignMessageErrorType type;
  // Localized error message for UI display
  string localized_err_msg;
  // It contains value only when type is kChainIdMismatched
  string? chain_id;
};

struct SignTransactionRequest {
  OriginInfo origin_info;
  int32 id;
  AccountId from_account_id;
  string from_address;
  TxDataUnion tx_data;
  ByteArrayStringUnion raw_message;
  CoinType coin;
  string chain_id;
};

struct SignAllTransactionsRequest {
  OriginInfo origin_info;
  int32 id;
  AccountId from_account_id;
  string from_address;
  array<TxDataUnion> tx_datas;
  array<ByteArrayStringUnion> raw_messages;
  CoinType coin;
  string chain_id;
};

enum ExternalWalletType {
  CryptoWallets,
  MetaMask
};

struct AddSuggestTokenRequest {
  OriginInfo origin;
  BlockchainToken token;
};

union ByteArrayStringUnion {
  array<uint8> bytes;
  string str;
};

// For default wallet setting, user assets, permission checks, importing
// functionality and much more.
interface BraveWalletService {
  // Adds an observer for BraveWalletService
  AddObserver(pending_remote<BraveWalletServiceObserver> observer);

  AddTokenObserver(pending_remote<BraveWalletServiceTokenObserver> observer);

  // Obtains all the user assets.
  GetAllUserAssets() => (array<BlockchainToken> tokens);

  // Obtains the user assets for the specified chain ID and coin type.
  GetUserAssets(string chain_id, CoinType coin) => (array<BlockchainToken> tokens);

  // Adds a user asset to the user asset list pref.
  // This asset could be a token from BlockchainRegistry or a custom token.
  AddUserAsset(BlockchainToken token) => (bool success);

  // Removes a user asset from the user asset list pref.
  // This asset could be a token from BlockchainRegistry or a custom token.
  RemoveUserAsset(BlockchainToken token) => (bool success);

  // Sets whether or not an asset is visible.
  // This asset could be a token from BlockchainRegistry or a custom token.
  SetUserAssetVisible(BlockchainToken token, bool visible) => (bool success);

  // Sets the spam status of a token
  SetAssetSpamStatus(BlockchainToken token, bool status) => (bool success);

  // Check if the external wallet is installed (Only check installation state
  // regardless of internal state)
  IsExternalWalletInstalled(ExternalWalletType type) => (bool installed);

  // Check if the external wallet is initialized (Used for knowing for knowing
  // to present UI). If a external wallet is not installed, hence it is not
  // initialized.
  IsExternalWalletInitialized(ExternalWalletType type) => (bool initialized);

  // Import from the external wallet
  ImportFromExternalWallet(ExternalWalletType type,
                           string password,
                           string newPassword)
    => (bool success, string? errorMessage);

  // Obtains the default wallet setting
  GetDefaultEthereumWallet() => (DefaultWallet default_wallet);
  GetDefaultSolanaWallet() => (DefaultWallet default_wallet);

  // Modifies the default wallet setting
  SetDefaultEthereumWallet(DefaultWallet default_wallet);
  SetDefaultSolanaWallet(DefaultWallet default_wallet);

  // Obtains the default base currency
  GetDefaultBaseCurrency() => (string currency);

  // Sets the default base currency
  SetDefaultBaseCurrency(string currency);

  // Obtains the default base cryptocurrency
  GetDefaultBaseCryptocurrency() => (string cryptocurrency);

  // Sets the default base cryptocurrency
  SetDefaultBaseCryptocurrency(string cryptocurrency);

  // This selects account which supports coin and chain_id pair. Nothing is
  // changed if such account is already selected. Returns null if no such
  // suitable account could be found.
  EnsureSelectedAccountForChain(CoinType coin, string chain_id) => (AccountId? account_id);
  // These will automatically fetch active origin for caller to set/get
  // chain_id properly according to the origin. Setting chain_id fails if
  // currently selected account does not support it.
  GetNetworkForSelectedAccountOnActiveOrigin() => (NetworkInfo? network);
  SetNetworkForSelectedAccountOnActiveOrigin(string chain_id) => (bool success);

  // Adds the permission for the account on active origin.
  AddPermission(AccountId account_id)
    => (bool success);

  // Filters accounts with permissions on active origin.
  HasPermission(array<AccountId> accounts)
    => (bool success, array<AccountId> accounts_with_permission);

  // Resets the permission of coin for the account on active origin.
  ResetPermission(AccountId account_id)
    => (bool success);

  // Check if permission is denied for the active origin.
  IsPermissionDenied(CoinType coin) => (bool denied);

  // Obtains the active origin info.
  GetActiveOrigin() => (OriginInfo origin_info);

  // Gets all websites with a permission of coin
  GetWebSitesWithPermission(CoinType coin) => (array<string> web_sites);
  // Resets the permission of coin for the formed website
  ResetWebSitePermission(CoinType coin, string formed_website)
    => (bool success);

  // TODO(darkdh): Move these bridging methods into EthereumProviderService when
  // we split EthereumProviderImpl into EthereumProviderHost and
  // EthereumProviderService https://github.com/brave/brave-browser/issues/32313

  // These are used for UI notifying native when the user approve/reject SignMessage[Hardware]Request
  NotifySignMessageRequestProcessed(bool approved, int32 id, ByteArrayStringUnion? signature, string? error);
  // Obtains the pending sign message requests
  GetPendingSignMessageRequests() => (array<SignMessageRequest> requests);

  GetPendingSignMessageErrors() => (array<SignMessageError> errors);
  // Used for UI notifying native when the error has been displayed to users
  NotifySignMessageErrorProcessed(string error_id);

  GetPendingSignTransactionRequests() => (array<SignTransactionRequest> requests);
  // Used for UI notifying native when the user approve/reject sign
  // transaction request.
  NotifySignTransactionRequestProcessed(bool approved, int32 id, ByteArrayStringUnion? signature, string? error);

  GetPendingSignAllTransactionsRequests() => (array<SignAllTransactionsRequest> requests);
  // Used for UI notifying native when the user approve/reject sign all
  // transactions request.
  NotifySignAllTransactionsRequestProcessed(bool approved, int32 id,
      array<ByteArrayStringUnion>? signatures, string? error);

  // Used for UI notifying native when the user approve/reject add suggest
  // token requests.
  NotifyAddSuggestTokenRequestsProcessed(bool approved, array<string> contract_addresses);
  // Obtain the pending add suggest token requests for current chain, will be
  // cleared when user switch networks.
  GetPendingAddSuggestTokenRequests() => (array<AddSuggestTokenRequest> requests);

  // This is used for UI notifying native when the user approves or
  // rejects getting the public key for an origin
  NotifyGetPublicKeyRequestProcessed(string request_id, bool approved);
  GetPendingGetEncryptionPublicKeyRequests() => (array<GetEncryptionPublicKeyRequest> requests);

  // This is used for UI notifying native when the user approves or
  // rejects decrypting data for an origin
  NotifyDecryptRequestProcessed(string request_id, bool approved);
  GetPendingDecryptRequests() => (array<DecryptRequest> requests);

  IsBase58EncodedSolanaPubkey(string key) => (bool result);

  Base58Encode(array<array<uint8>> addresses) => (array<string> addresses);

  DiscoverAssetsOnAllSupportedChains();

  GetNftDiscoveryEnabled() => (bool enabled);

  // Calling this setter should be approved by privacy review.
  SetNftDiscoveryEnabled(bool enabled);

  // Returns a list of chain_ids for which GetERC20TokenBalances
  // is supported
  GetBalanceScannerSupportedChains() => (array<string> chain_ids);

  // Fetches NFTs labeled as spam by SimpleHash
  GetSimpleHashSpamNFTs(string wallet_address,
                        array<string> chain_ids,
                        CoinType coin,
                        string? cursor)
    => (array<BlockchainToken> tokens, string? cursor);

  // Resets the keyring and the related preferences
  Reset();

  // Used for UI to trigger the allowance discovery
  DiscoverEthAllowances() => (array<AllowanceInfo> allowances);

  // Converts a set of ETH addresses to FIL delegated addresses
  ConvertFEVMToFVMAddress(bool is_mainnet, array<string> fevm_addresses) => (map<string, string> result);
};

// For reporting wallet related P3A metrics.
interface BraveWalletP3A {
  // Called when the wallet provider type is evaluated after page load.
  ReportJSProvider(JSProviderType provider_type, CoinType coin_type, bool allow_provider_overwrite);

  // Called when a Wallet onboarding action is performed.
  ReportOnboardingAction(OnboardingAction onboarding_action);

  // Called when a mainnet transaction is sent.
  ReportTransactionSent(CoinType coin, bool new_send);

  // Called to report an active wallet count for P3A
  RecordActiveWalletCount(int32 count, CoinType coin_type);

  // Called to report displayed NFT count upon viewing the NFT gallery 
  RecordNFTGalleryView(int32 nft_count);
};

enum OnboardingAction {
  Shown = 0,
  LegalAndPassword = 1,
  RecoverySetup = 2,
  Complete = 3,
  CompleteRecoverySkipped = 4,
  StartRestore = 5
};

enum JSProviderType {
  None = 0,
  ThirdParty = 1,
  Native = 2
};

enum DefaultWallet {
  AskDeprecated = 0,
  None = 1,
  CryptoWallets = 2,
  BraveWalletPreferExtension = 3,
  BraveWallet = 4
};

struct EncryptionKeyRequest {
  string origin;
  string address;
  string? message;
};

struct OptionalUint8 {
  uint8 val;
};

struct SolanaAccountMeta {
  // Account's address or lookup table address.
  string pubkey;
  // Index of the account address in the address lookup table.
  OptionalUint8? addr_table_lookup_index;
  bool is_signer;
  bool is_writable;
};

// https://docs.rs/solana-program/latest/solana_program/system_instruction/enum.SystemInstruction.html
enum SolanaSystemInstruction {
  kCreateAccount = 0,
  kAssign = 1,
  kTransfer = 2,
  kCreateAccountWithSeed = 3,
  kAdvanceNonceAccount = 4,
  kWithdrawNonceAccount = 5,
  kInitializeNonceAccount = 6,
  kAuthorizeNonceAccount = 7,
  kAllocate = 8,
  kAllocateWithSeed = 9,
  kAssignWithSeed = 10,
  kTransferWithSeed = 11,
  kUpgradeNonceAccount = 12,
};

// https://docs.rs/spl-token/latest/spl_token/instruction/enum.TokenInstruction.html
enum SolanaTokenInstruction {
  kInitializeMint = 0,
  kInitializeAccount = 1,
  kInitializeMultisig = 2,
  kTransfer = 3,
  kApprove = 4,
  kRevoke = 5,
  kSetAuthority = 6,
  kMintTo = 7,
  kBurn = 8,
  kCloseAccount = 9,
  kFreezeAccount = 10,
  kThawAccount = 11,
  kTransferChecked = 12,
  kApproveChecked = 13,
  kMintToChecked = 14,
  kBurnChecked = 15,
  kInitializeAccount2 = 16,
  kSyncNative = 17,
  kInitializeAccount3 = 18,
  kInitializeMultisig2 = 19,
  kInitializeMint2 = 20,
};

// Solana instruction parameter names shared between C++ backend and UI.
// Note: UI can add names they need here, and please update
// solana_instruction_data_decoder.cc to use the same constant.
const string kLamports = "lamports";
const string kAmount = "amount";
const string kDecimals = "decimals";
const string kFromAccount = "from_account";
const string kToAccount = "to_account";
const string kSigners = "signers";
const string kNonceAccount = "nonce_account";
const string kNewAccount = "new_account";

enum SolanaInstructionParamType {
  kUint8 = 0,
  kUint32 = 1,
  kUint64 = 2,
  kPublicKey = 3,
  kOptionalPublicKey = 4,
  kString = 5,
  kAuthorityType = 6,
  kUnknown = -1,
};

struct SolanaInstructionParam {
  string name;
  string localized_name;  // For UI display.
  string value;
  SolanaInstructionParamType type = SolanaInstructionParamType.kUnknown;
};

struct SolanaInstructionAccountParam {
  string name;
  string localized_name;  // For UI display.
};

struct DecodedSolanaInstructionData {
  uint32 instruction_type;  // Should be converted to either
                            // SolanaSystmeInstruction or SolanaTokenInstruction
                            // based on program ID.

  // Parameter names of the account meta array.
  array<SolanaInstructionAccountParam> account_params;
  // Parameters encoded in the instruction data array.
  array<SolanaInstructionParam> params;
};

struct SolanaInstruction {
  string program_id;
  array<SolanaAccountMeta> account_metas;
  array<uint8> data;
  DecodedSolanaInstructionData? decoded_data;
};

enum SolanaMessageVersion {
  kLegacy = 0,
  kV0 = 1,
};

struct SolanaMessageAddressTableLookup {
  string account_key;
  array<uint8> write_indexes;
  array<uint8> read_indexes;
};

struct SolanaMessageHeader {
  uint8 num_required_signatures;
  uint8 num_readonly_signed_accounts;
  uint8 num_readonly_unsigned_accounts;
};

struct SolanaTxData {
  string recent_blockhash;
  uint64 last_valid_block_height;
  string fee_payer;
  string to_wallet_address;
  string spl_token_mint_address;
  uint64 lamports;
  uint64 amount;
  TransactionType tx_type;
  array<SolanaInstruction> instructions;

  SolanaMessageVersion version;
  SolanaMessageHeader message_header;
  array<string> static_account_keys;
  array<SolanaMessageAddressTableLookup> address_table_lookups;

  // Currently it might be specified by solana.signAndSendTransaction provider
  // API as the options to be passed to sendTransaction RPC call.
  SolanaSendTransactionOptions? send_options;
  // Passed by dApp when calling signAndSendTransaction, signTransaction,
  // signAllTransactions provider APIs, which includes serialized message and
  // signatures from partial_sign.
  SolanaSignTransactionParam? sign_transaction_param;
};

// This is used by BraveWalletProviderDelegate::RequestPermissions for us to
// auto generate same enum between c++ and obj-c
enum RequestPermissionsError {
  kNone = 0,
  kRequestInProgress = 1,
  kInternal = 2
};

struct OnRampCurrency {
  string currency_code;
  string currency_name;
  array<OnRampProvider> providers;
};

union SolanaTransactionRequestUnion {
  SignTransactionRequest sign_transaction_request;
  SignAllTransactionsRequest sign_all_transactions_request;
  TransactionInfo transaction_info;
};

// Common Blowfish types for both EVM and Solana.
struct BlowfishPrice {
  string source;
  string last_updated_at;
  string dollar_value_per_token;
};

struct BlowfishWarning {
  string severity;
  string kind;
  string message;
};

// Blowfish types specific to EVM.
struct BlowfishEVMError {
  string kind;
  string human_readable_error;
};

struct BlowfishEVMContract {
  string address;
  string kind;
};

struct BlowfishEVMAmount {
  string before;
  string after;
};

struct BlowfishEVMAsset {
  string address;
  string symbol;
  string name;
  int32 decimals;
  bool verified;
  array<string> lists;
  string? image_url;
  BlowfishPrice? price;
};

struct BlowfishEVMMetadata {
  string raw_image_url;
};

struct BlowfishERC20TransferData {
  BlowfishEVMContract contract;
  BlowfishEVMAmount amount;
  BlowfishEVMAsset asset;
};

struct BlowfishERC20ApprovalData {
  BlowfishEVMContract contract;
  BlowfishEVMContract owner;
  BlowfishEVMContract spender;
  BlowfishEVMAmount amount;
  BlowfishEVMAsset asset;
};

struct BlowfishNativeAssetTransferData {
  BlowfishEVMAmount amount;
  BlowfishEVMAsset asset;
  BlowfishEVMContract contract;
};

struct BlowfishERC721TransferData {
  BlowfishEVMAmount amount;
  BlowfishEVMContract contract;
  BlowfishEVMMetadata metadata;
  string name;
  string symbol;
  string? token_id;
  BlowfishPrice? asset_price;
};

struct BlowfishERC721ApprovalData {
  BlowfishEVMAmount amount;
  BlowfishEVMContract contract;
  BlowfishEVMMetadata metadata;
  string name;
  BlowfishEVMContract owner;
  BlowfishEVMContract spender;
  string symbol;
  string? token_id;
  BlowfishPrice? asset_price;
};

struct BlowfishERC721ApprovalForAllData {
  BlowfishEVMAmount amount;
  BlowfishEVMContract contract;
  string name;
  BlowfishEVMContract owner;
  BlowfishEVMContract spender;
  string symbol;
  BlowfishPrice? asset_price;
};

struct BlowfishERC1155TransferData {
  BlowfishEVMAmount amount;
  BlowfishEVMContract contract;
  BlowfishEVMMetadata metadata;
  string name;
  string? token_id;
  BlowfishPrice? asset_price;
};

struct BlowfishERC1155ApprovalForAllData {
  BlowfishEVMAmount amount;
  BlowfishEVMContract contract;
  BlowfishEVMContract owner;
  BlowfishEVMContract spender;
  BlowfishPrice? asset_price;
};

union BlowfishEVMStateChangeRawInfoDataUnion {
  BlowfishERC20TransferData erc20_transfer_data;
  BlowfishERC20ApprovalData erc20_approval_data;
  BlowfishNativeAssetTransferData native_asset_transfer_data;
  BlowfishERC721TransferData erc721_transfer_data;
  BlowfishERC721ApprovalData erc721_approval_data;
  BlowfishERC721ApprovalForAllData erc721_approval_for_all_data;
  BlowfishERC1155TransferData erc1155_transfer_data;
  BlowfishERC1155ApprovalForAllData erc1155_approval_for_all_data;
};

struct BlowfishEVMStateChangeRawInfo {
  string kind;
  BlowfishEVMStateChangeRawInfoDataUnion data;
};

struct BlowfishEVMStateChange {
  string human_readable_diff;
  BlowfishEVMStateChangeRawInfo raw_info;
};

struct EVMSimulationResults {
  BlowfishEVMError? error;
  array<BlowfishEVMStateChange> expected_state_changes;
};

struct EVMSimulationResponse {
  string action;
  EVMSimulationResults simulation_results;
  array<BlowfishWarning> warnings;
};

// Blowfish types specific to Solana.
struct BlowfishSolanaError {
  string kind;
  string human_readable_error;
};

struct BlowfishSolanaDiff {
  string sign;
  uint64 digits;
};

struct BlowfishSolanaStakeAuthorities {
  string staker;
  string withdrawer;
};

struct BlowfishSOLTransferData {
  string symbol;
  string name;
  int32 decimals;
  BlowfishSolanaDiff diff;
};

struct BlowfishSPLTransferData {
  string symbol;
  string name;
  string mint;
  int32 decimals;
  BlowfishSolanaDiff diff;
  uint64 supply;
  string metaplex_token_standard;
  BlowfishPrice? asset_price;
};

struct BlowfishSPLApprovalData {
  string delegate;
  string mint;
  string symbol;
  string name;
  int32 decimals;
  BlowfishSolanaDiff diff;
  uint64 supply;
  string metaplex_token_standard;
  BlowfishPrice? asset_price;
};

struct BlowfishSOLStakeAuthorityChangeData {
  string stake_account;
  BlowfishSolanaStakeAuthorities curr_authorities;
  BlowfishSolanaStakeAuthorities future_authorities;
  string symbol;
  string name;
  int32 decimals;
  uint64 sol_staked;
};

union BlowfishSolanaStateChangeRawInfoDataUnion {
  BlowfishSOLTransferData sol_transfer_data;
  BlowfishSPLTransferData spl_transfer_data;
  BlowfishSPLApprovalData spl_approval_data;
  BlowfishSOLStakeAuthorityChangeData sol_stake_authority_change_data;
};

struct BlowfishSolanaStateChangeRawInfo {
  string kind;
  BlowfishSolanaStateChangeRawInfoDataUnion data;
};

struct BlowfishSolanaStateChange {
  string human_readable_diff;
  string suggested_color;
  BlowfishSolanaStateChangeRawInfo raw_info;
};

struct SolanaSimulationResults {
  bool is_recent_blockhash_expired;
  array<BlowfishSolanaStateChange> expected_state_changes;
  BlowfishSolanaError? error;
};

struct SolanaSimulationResponse {
  string action;
  array<BlowfishWarning> warnings;
  SolanaSimulationResults simulation_results;
};

// Implements transaction and message scanning functionality through the
// Blowfish API.
interface SimulationService {
  HasTransactionScanSupport(string chain_id, CoinType coin) => (bool result);

  HasMessageScanSupport(string chain_id, CoinType coin) => (bool result);

  // Scans an EVM transaction to obtain simulation results.
  //
  // language indicates the language to use in the returned human-readable
  // warnings and simulation results. Use navigator.language or equivalent
  // on the client-side.
  //
  // error_response contains errors parsed from the Blowfish API response
  // in case of a non-ok HTTP status.
  //
  // error_string contains internal errors generated in brave-core.
  ScanEVMTransaction(TransactionInfo tx_info, string language)
    => (EVMSimulationResponse? response, string error_response, string error_string);

  // Scans a Solana transaction to obtain simulation results.
  //
  // request contains the transaction to scan, and must be one of three types:
  //   1. TransactionInfo: mostly transactions originating from the wallet.
  //   2. SignTransactionRequest: dapp request to sign a single transaction.
  //   3. SignAllTransactionsRequest: dapp request to sign multiple
  //      transactions.
  //
  // language indicates the language to use in the returned human-readable
  // warnings and simulation results. Use navigator.language or equivalent
  // on the client-side.
  //
  // error_response contains errors parsed from the Blowfish API response
  // in case of a non-ok HTTP status.
  //
  // error_string contains internal errors generated in brave-core.
  ScanSolanaTransaction(SolanaTransactionRequestUnion request,
                        string language)
    => (SolanaSimulationResponse? response, string error_response, string error_string);
};
