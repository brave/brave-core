// Copyright (c) 2021 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// you can obtain one at http://mozilla.org/MPL/2.0/.

module brave_wallet.mojom;

import "mojo/public/mojom/base/time.mojom";
import "mojo/public/mojom/base/values.mojom";
import "url/mojom/url.mojom";

// Used to notify the renderer of provider information for use in
// window.ethereum events
interface EventsListener {
  // Fired when the current netowrk changes
  ChainChangedEvent(string chain_id);

  // Fired when the accounts have changed such as when the wallet locked, the
  // selected account changes, a new account is given permission, etc.
  AccountsChangedEvent(array<string> accounts);
};

// https://eips.ethereum.org/EIPS/eip-1193#provider-errors
// https://eips.ethereum.org/EIPS/eip-1474#error-codes
enum ProviderError {
  kSuccess = 0,                 // No error
  kUserRejectedRequest = 4001,  // User rejected the request
  kUnauthorized = 4100,         // The requested account and/or method has not
                                // been authorized by the user
  kUnsupportedMethod = 4200,    // The requested method is not supported by this
                                // Ethereum provider
  kDisconnected = 4900,         // The provider is disconnected from all chains
  kChainDisconnected = 4901,    // The provider is disconnected from the
                                // specified chain
  kUnknownChain = 4902,         // The provider doesn't know this chain
  kInvalidParams = -32602,      // Invalid method parameters
  kInternalError = -32603,      // Internal JSON-RPC error

  kUnknown = -1                 // Unknown error
};

// There is one BraveWalletProvider per renderer, the renderer communicates
// with this for window.ethereum usage.
interface BraveWalletProvider {
  // Initializes an EventsListener
  Init(pending_remote<EventsListener> events_listener);

  // Corresponds to window.ethereum.request
  Request(string json_payload, bool auto_retry_on_network_change) => (int32 http_code, string response, map<string, string> headers);

  // Corresponds to window.ethereum.enable and eth_requestAccounts
  RequestEthereumPermissions() => (array<string> accounts, ProviderError error, string message);

  // Used for wallet_addEthereumChain method requests
  AddEthereumChain(string json_payload) => (ProviderError error, string message);

  // Used for wallet_switchEthereumChain method requests
  SwitchEthereumChain(string chain_id) => (ProviderError error, string message);

  // Used for eth_sendTransaction method requests without 1559 gas data
  AddAndApproveTransaction(TxData tx_data, string from) => (string tx_hash, ProviderError error, string error_message);

  // Used for eth_sendTransaction method requests with 1559 gas data
  AddAndApprove1559Transaction(TxData1559 tx_data, string from) => (string tx_hash, ProviderError error, string error_message);

  // Used for eth_sign and personal_sign
  SignMessage(string address, string message) => (string signature, ProviderError error, string error_message);

  // Used for personal_ecRecover
  RecoverAddress(string message, string signature) => (string address, ProviderError error, string error_message);

  // Used for eth_signTypedData
  // message is for displaying the sign request to users
  // message_to_sign is the hex representation without 0x for eip712 hash
  // domain is the domain separator defined in eip712
  SignTypedMessage(string address, string message, string message_to_sign,
                   mojo_base.mojom.DictionaryValue domain)
    => (string signature, ProviderError error, string error_message);

  // Used for the connect event
  GetChainId() => (string chain_id);

  // Used for getting current network and keyring information.
  GetNetworkAndDefaultKeyringInfo() => (EthereumChain network,
                                        KeyringInfo keyring_info);

  // Used for eth_accounts method requests and as part of RequestEthereumPermissions
  GetAllowedAccounts(bool include_accounts_when_locked) => (array<string> accounts, ProviderError error, string message);

  // Determines if the keyring is locked.
  IsLocked() => (bool isLocked);

  // Used for wallet_watchAsset.
  // It will prompt an UI for user to confirm, and add the token into user's
  // visible asset list if user approves.
  // Note that we will use the token data from ERCTokenRegistry (for
  // mainnet) or from user asset list if there is an existing token with the
  // same contract address, instead of the token data in the request.
  AddSuggestToken(ERCToken token) => (bool approved, ProviderError error, string error_message);
};

// Used by the WebUI page to bootstrap bidirectional communication.
interface PanelHandlerFactory {
  // The WebUI calls this method when the page is first initialized.
  CreatePanelHandler(pending_remote<Page> page,
                     pending_receiver<PanelHandler> panel_handler,
                     pending_receiver<WalletHandler> wallet_handler,
                     pending_receiver<EthJsonRpcController> eth_json_rpc_controller,
                     pending_receiver<SwapController> swap_controller,
                     pending_receiver<AssetRatioController> asset_ratio_controller,
                     pending_receiver<KeyringController> keyring_controller,
                     pending_receiver<ERCTokenRegistry> erc_token_registry,
                     pending_receiver<EthTxController> eth_tx_controller,
                     pending_receiver<BraveWalletService> brave_wallet_service);
};

interface PageHandlerFactory {
  // The WebUI calls this method when the page is first initialized.
  CreatePageHandler(pending_remote<Page> page,
                    pending_receiver<PageHandler> page_handler,
                    pending_receiver<WalletHandler> wallet_handler,
                    pending_receiver<EthJsonRpcController> eth_json_rpc_controller,
                    pending_receiver<SwapController> swap_controller,
                    pending_receiver<AssetRatioController> asset_ratio_controller,
                    pending_receiver<KeyringController> keyring_controller,
                    pending_receiver<ERCTokenRegistry> erc_token_registry,
                    pending_receiver<EthTxController> eth_tx_controller,
                    pending_receiver<BraveWalletService> brave_wallet_service);

};

// Browser-side handler for requests from WebUI page.
interface PanelHandler {
  // Notify the backend that the UI is ready to be shown.
  ShowUI();

  // Notify the backend that the dialog should be closed.
  CloseUI();

  ConnectToSite(array<string> accounts, string origin);
  CancelConnectToSite(string origin);
  SetCloseOnDeactivate(bool close);
};

// Browser-side handler for requests from WebUI page.
interface PageHandler {
  // Used by the brave://wallet page to open up the approval panel
  ShowApprovePanelUI();
};

struct AppItem {
  string description;
  string icon;
  string name;
  string url;
};

enum AssetPriceTimeframe {
  Live,
  OneDay,
  OneWeek,
  OneMonth,
  ThreeMonths,
  OneYear,
  All
};

struct AssetTimePrice {
  mojo_base.mojom.TimeDelta date;
  string price;
};

struct AssetPrice {
  string from_asset;
  string to_asset;
  string price;
  string asset_timeframe_change;
};

struct SwapParams {
  string taker_address;
  string sell_amount;
  string buy_amount;
  string buy_token;
  string sell_token;
  double slippage_percentage;
  string gas_price;
};

struct SwapResponse {
  string price;
  string guaranteed_price; // Unused for price quote response
  string to;   // Unused for price quote response
  string data; // Unused for price quote response
  string value;
  string gas;
  string estimated_gas;
  string gas_price;
  string protocol_fee;
  string minimum_protocol_fee;
  string buy_token_address;
  string sell_token_address;
  string buy_amount;
  string sell_amount;
  string allowance_target;
  string sell_token_to_eth_rate;
  string buy_token_to_eth_rate;
  // Note we could also expose "sources" later
};

const string kLedgerHardwareVendor = "Ledger";
const string kTrezorHardwareVendor = "Trezor";

const string kFilecoinTestnet = "t";
const string kFilecoinMainnet = "f";

enum FilecoinAddressProtocol {
  SECP256K1 = 1, // Represents the address SECP256K1 protocol
  BLS = 3 // Represents the address BLS protocol
};

struct HardwareWalletAccount {
  string address;
  string derivation_path;
  string name;
  string hardware_vendor;
  string device_id;
};

struct HardwareInfo {
  string path;
  string vendor;
  string device_id;
};

struct AccountInfo {
  string address;
  string name;
  bool is_imported;
  HardwareInfo? hardware;
};

struct KeyringInfo {
  bool is_default_keyring_created;
  bool is_locked;
  bool is_backed_up;
  array<AccountInfo> account_infos;
};

// Browser-side handler for common panel / page things
interface WalletHandler {
  // Obtains basic information about the wallet that is needed for first render
  GetWalletInfo() => (bool isWalletCreated, bool isWalletLocked,
                      array<AppItem> favoriteApps,
                      bool isWalletBackedUp,
                      array<AccountInfo> accountInfos);

  // Adds a favorite app to the apps list
  AddFavoriteApp(AppItem appItem);

  // Removes a favorite app to the apps list
  RemoveFavoriteApp(AppItem appItem);
};

struct ERCToken {
  string contract_address;
  string name;
  string logo;
  bool is_erc20;
  bool is_erc721;
  string symbol;
  int32 decimals;
  bool visible = true;
  string token_id = "";  // Non-empty for ERC721 tokens.
};

// WebUI-side handler for requests from the browser.
interface Page {
};

interface KeyringControllerObserver {
  // Fired when a keyring is created
  KeyringCreated();

  // Fired when a keyring is restored
  KeyringRestored();

  // Fired when a keyring is locked
  Locked();

  // Fired when a keyring is unlocked
  Unlocked();

  // Fired when a keyring is backed up
  BackedUp();

  // Fired when the accounts list changes
  AccountsChanged();

  // Fired when the autolock setting changes
  AutoLockMinutesChanged();

  // Fired when the selected account setting changes
  SelectedAccountChanged();
};

// List of tokens and coins that are supported.
interface ERCTokenRegistry {
  // Obtains token information by a contract lookup
  GetTokenByContract(string contract) => (ERCToken? token);

  // Obtains token information by a symbol lookup
  GetTokenBySymbol(string symbol) => (ERCToken? token);

  // Obtains all tokens Send/Swap UI
  GetAllTokens() => (array<ERCToken> tokens);

  // Obtains all tokens for the Buy UI
  GetBuyTokens() => (array<ERCToken> tokens);

  // Obtains the URL used for buying assets
  GetBuyUrl(string address, string symbol, string amount) => (string url);
};

// Implements the HD wallet, Ledger & Trezor integration, account management,
// and signing.
interface KeyringController {
  // Creates a new wallet and encrypts it using the specified password
  CreateWallet(string password) => (string mnemonic);

  // Obtains the mnemonic code words for an already existing wallet
  GetMnemonicForDefaultKeyring() => (string mnemonic);

  // Restores a wallet with the specified mnemonic and encrypts it with the
  // new password provided. isLegacyBraveWallet can be used to restore the
  // wallet using Brave's legacy derivation paths.
  RestoreWallet(string mnemonic, string password, bool isLegacyBraveWallet)
    => (bool isValidMnemonic);

  // Locks the keyring.
  Lock();

  // Unlocks the keyring.
  Unlock(string password) => (bool success);

  // Determines if the keyring is locked.
  IsLocked() => (bool isLocked);

  // Adds an account to the keyring.
  AddAccount(string accountName) => (bool success);

  // Obtains the private key for the keyring.
  GetPrivateKeyForDefaultKeyringAccount(string address)
    => (bool success, string privateKey);

  // Imports an account with a specific private key to the keyring
  ImportAccount(string accountName, string privateKey)
    => (bool success, string address);

  [EnableIf=filecoin_enabled]
  ImportFilecoinSECP256K1Account(string accountName, string privateKey, string network)
    => (bool success, string address);

  [EnableIf=filecoin_enabled]
  ImportFilecoinBLSAccount(string accountName, string privateKey, string publicKey, string network)
    => (bool success, string address);

  // Imports an account via JSON
  ImportAccountFromJson(string accountName, string password, string json)
    => (bool success, string address);

  // Obtains the private key for an imported account
  GetPrivateKeyForImportedAccount(string address)
    => (bool success, string privateKey);

  // Removes an imported account
  RemoveImportedAccount(string address) => (bool success);

  // Determines if the keyring has been backed up
  IsWalletBackedUp() => (bool backed_up);

  // Informs the keyring that the wallet has been backed up
  NotifyWalletBackupComplete();

  // Obtains the keyring information
  GetDefaultKeyringInfo() => (KeyringInfo keyring);
  // Obtains the keyring information
  GetKeyringInfo(string keyringId) => (KeyringInfo keyring);
  // Resets the keyring and all preferences
  Reset();

  // Adds a KeyringControllerObserver
  AddObserver(pending_remote<KeyringControllerObserver> observer);

  // Sets the account name for a derived account
  SetDefaultKeyringDerivedAccountName(string address, string name) => (bool success);

  // Sets the account name for an imported account
  SetDefaultKeyringImportedAccountName(string address, string name) => (bool success);

  // Sets the account name for a hardware account
  SetDefaultKeyringHardwareAccountName(string address, string name) => (bool success);

  // Adds hardware accounts
  AddHardwareAccounts(array<HardwareWalletAccount> info);

  // Removes a hardware account
  RemoveHardwareAccount(string address);

  // Informs the user that user interaction occurred so auto-lock doesn't occur
  NotifyUserInteraction();

  // Obtains the selected account
  GetSelectedAccount() => (string? address);

  // Sets the selected account
  SetSelectedAccount(string address) => (bool success);

  // Obtains the number of minutes that the keyring will auto-lock in
  GetAutoLockMinutes() => (int32 minutes);

  // Sets the number of minutes for keyring auto-lock
  // Must be within the inclusive range [kAutoLockMinutesMin, kAutoLockMinutesMax]
  SetAutoLockMinutes(int32 minutes) => (bool success);

  // Returned result is true if the password is considered a strong password.
  // We define a strong password to have:
  // - At least one letter
  // - At least one number
  // - At least 7 characters
  // - At least one non-alphanumeric character
  IsStrongPassword(string password) => (bool result);

  // Get the checksume'd EthAddress for the specified address
  GetChecksumEthAddress(string address) => (string checksum_address);

  // Obtains if there's a pending unlock request
  // Note that there is no need for an API to notify unlocked
  // because the KeyringControllerObserver Unlocked event can be used for that.
  HasPendingUnlockRequest() => (bool pending);
};

// Used for cryptocurrency prices over time.
interface AssetRatioController {
  // Obtains the prices from a list of assets to a list of assets
  // Each from asset is represented in the to asset and includes the timeframe
  // change as well.
  GetPrice(array<string> from_assets, array<string> to_assets, AssetPriceTimeframe timeframe) =>
      (bool success, array<AssetPrice> values);

  // Obtains the price history for a specific asset
  GetPriceHistory(string asset, string vs_asset,
      AssetPriceTimeframe timeframe) =>
          (bool success, array<AssetTimePrice> values);

  // Gas estimation APIs
  GetEstimatedTime(string gas_price /* decimal string in wei */) =>
      (bool success, string seconds);
  GetGasOracle() => (GasEstimation1559? estimation);

  // Obtain token info via contract address through etherscan API.
  GetTokenInfo(string contract_address) => (ERCToken? token);
};

// Implements swapping related functionality through the 0x API.
interface SwapController {
  // Obtains a price quote for a swap
  GetPriceQuote(SwapParams params) =>
      (bool success, SwapResponse? response, string? error_response);

  // Obtains transaction payload data for a swap
  GetTransactionPayload(SwapParams params) =>
      (bool success, SwapResponse? response, string? error_response);
};

interface EthJsonRpcControllerObserver {
  // Fired when the selected network changes
  ChainChangedEvent(string chain_id);

  // Fired when a wallet_addEthereumChain request is completed
  OnAddEthereumChainRequestCompleted(string chain_id, string error);

  // Fired when a chain ID's 1559 status changes
  OnIsEip1559Changed(string chain_id, bool is_eip1559);
};

struct TxData {
  string nonce;
  string gas_price;
  string gas_limit;
  string to;
  string value;
  array<uint8> data;
};

struct GasEstimation1559 {
  string slow_max_priority_fee_per_gas;
  string slow_max_fee_per_gas;
  string avg_max_priority_fee_per_gas;
  string avg_max_fee_per_gas;
  string fast_max_priority_fee_per_gas;
  string fast_max_fee_per_gas;
  string base_fee_per_gas;
};

struct TxData1559 {
  TxData base_data;
  string chain_id;
  string max_priority_fee_per_gas;
  string max_fee_per_gas;
  GasEstimation1559? gas_estimation;
};

const string kMainnetChainId = "0x1";
const string kRinkebyChainId = "0x4";
const string kRopstenChainId = "0x3";
const string kGoerliChainId = "0x5";
const string kKovanChainId = "0x2a";
const string kLocalhostChainId = "0x539";

struct EthereumChain {
  string chain_id;
  string chain_name;
  array<string> block_explorer_urls;
  array<string> icon_urls;
  array<string> rpc_urls;
  string symbol;
  string symbol_name;
  int32 decimals;
  bool is_eip1559;
};

struct SwitchChainRequest {
  url.mojom.Url origin;
  string chain_id;
};

// Deals with the ETH JSON RPC API, as well as things like the user's current
// network.
interface EthJsonRpcController {
  // Checks the chain ID for an ethereum chain that should be added
  AddEthereumChain(EthereumChain chain, url.mojom.Url origin) => (string chain_id, bool accepted);
  AddEthereumChainRequestCompleted(string chain_id, bool approved);
  GetPendingChainRequests() => (array<EthereumChain> networks);

  // This is used for UI notifying native when the user approves or
  // rejects SwitchChainRequest
  NotifySwitchChainRequestProcessed(bool approved, url.mojom.Url origin);
  GetPendingSwitchChainRequests() => (array<SwitchChainRequest> requests);

  SetNetwork(string chain_id) => (bool success);
  GetNetwork() => (EthereumChain network);
  GetAllNetworks() => (array<EthereumChain> networks);

  // Obtains the current network's chain ID
  GetChainId() => (string chain_id);

  // Obtains the current network's block tracker URL
  GetBlockTrackerUrl() => (string block_tracker_url);

  // Obtains the current network's URL
  GetNetworkUrl() => (string network_url);

  // Obtains the native balance (e.g. ETH for Ethereum) for the address
  GetBalance(string address) => (bool success, string balance);

  // Obtains the contract's ERC20 compatible balance for an address
  GetERC20TokenBalance(string contract,
                       string address) => (bool success, string balance);

  // Obtains the contract's ERC20 allowance for an owner and a spender
  GetERC20TokenAllowance(string contract,
                         string owner_address, string spender_address) => (bool success, string allowance);

  // ENS lookups
  EnsGetEthAddr(string domain) => (bool success, string address);

  // Unstoppable Domains lookups
  UnstoppableDomainsGetEthAddr(string domain) => (bool success, string address);

  // Used for making requests to the currently selected EVM compatible node
  Request(string json_payload, bool auto_retry_on_network_change) => (int32 http_code, string response, map<string, string> headers);

  // Adds an observer for the events of EthJsonRpcController
  AddObserver(pending_remote<EthJsonRpcControllerObserver> observer);

  // Sets a custom network for testing
  SetCustomNetworkForTesting(string chain_id, url.mojom.Url provider_url);

  // Obtains the owner of a contract's ERC721 token ID
  GetERC721OwnerOf(string contract, string token_id) => (bool success, string owner_address);

  // Obtains the balance of a contract's ERC721 token ID for an address
  // Balance is 0x1 if current selected account is the same as token owner's
  // address, otherwise balance is 0x0.
  GetERC721TokenBalance(string contract_address, string token_id, string account_address) => (bool success, string balance);
};

enum TransactionStatus {
  Unapproved,
  Approved,
  Rejected,
  Submitted,
  Confirmed,
  Error
};

enum TransactionType {
  ETHSend,
  ERC20Transfer,
  ERC20Approve,
  ERC721TransferFrom,
  ERC721SafeTransferFrom,
  Other
};

struct TransactionInfo {
  string id;
  string from_address;
  string tx_hash;
  TxData1559 tx_data;
  TransactionStatus tx_status;
  TransactionType tx_type;
  array<string> tx_params;
  array<string> tx_args;
  mojo_base.mojom.TimeDelta created_time;
  mojo_base.mojom.TimeDelta submitted_time;
  mojo_base.mojom.TimeDelta confirmed_time;
};

interface EthTxControllerObserver {
  // Fired when a new unapproved transaction is encountered
  OnNewUnapprovedTx(TransactionInfo tx_info);

  // Fired when an unapproved transaction is updated, such as the gas
  // properties change
  OnUnapprovedTxUpdated(TransactionInfo tx_info);

  // Fired when a transaction is updated
  OnTransactionStatusChanged(TransactionInfo tx_info);
};

// For transaction management such as creation, broadcasting, and storing
// transactions.
interface EthTxController {
  // Used to add a transaction
  AddUnapprovedTransaction(TxData tx_data, string from) => (bool success, string tx_meta_id, string error_message);

  // Used to add an EIP 1559 transaction
  AddUnapproved1559Transaction(TxData1559 tx_data, string from) => (bool success, string tx_meta_id, string error_message);

  // Used to approve a transaction
  ApproveTransaction(string tx_meta_id) => (bool status);

  // Used to reject a transaction
  RejectTransaction(string tx_meta_id) => (bool status);

  // Used for modifying transaction data
  SetGasPriceAndLimitForUnapprovedTransaction(string tx_meta_id, string gas_price, string gas_limit) => (bool success);
  SetGasFeeAndLimitForUnapprovedTransaction(string tx_meta_id, string max_priority_fee_per_gas, string max_fee_per_gas, string gas_limit) => (bool success);
  SetDataForUnapprovedTransaction(string tx_meta_id, array<uint8> data) => (bool success);

  // Used for creating transaction data
  MakeERC20TransferData(string to_address, string amount) => (bool success, array<uint8> data);
  MakeERC20ApproveData(string spender_address, string amount) => (bool success, array<uint8> data);
  MakeERC721TransferFromData(string from, string to, string token_id, string contract_address) => (bool success, array<uint8> data);

  // Obtains a list of all transactions from an address.
  // This returns different data depending on which network is currently selected in EthJsonRpcController
  GetAllTransactionInfo(string from) => (array<TransactionInfo> transaction_infos);

  // Adds an observer for EthTxController
  AddObserver(pending_remote<EthTxControllerObserver> observer);

  // Used to speed-up or cancel a transaction
  SpeedupOrCancelTransaction(string tx_meta_id, bool cancel) => (bool success, string tx_meta_id, string error_message);

  // Used to retry a transaction
  RetryTransaction(string tx_meta_id) => (bool success, string tx_meta_id, string error_message);
  GetNonceForHardwareTransaction(string tx_meta_id) => (string? nonce);
  GetTransactionMessageToSign(string tx_meta_id) => (string? message);
  ProcessHardwareSignature(string tx_meta_id, string v, string r, string s) => (bool status);
};

interface BraveWalletServiceObserver {
  // Fired when the active origin is changed
  OnActiveOriginChanged(string origin);

  // Fired when the default wallet setting changes
  OnDefaultWalletChanged(DefaultWallet wallet);

  // Fired when the default base currency changes (e.g. USD -> CAD)
  OnDefaultBaseCurrencyChanged(string currency);

  // Fired when the default base currency changes (e.g. BTC -> ETH)
  OnDefaultBaseCryptocurrencyChanged(string cryptocurrency);

  // Fired when the list of networks changes
  OnNetworkListChanged();
};

struct SignMessageRequest {
  int32 id;
  string address;
  string message;
};

enum ExternalWalletType {
  CryptoWallets,
  MetaMask
};

struct AddSuggestTokenRequest {
  ERCToken token;
};

// For default wallet setting, user assets, permission checks, importing
// functionality and much more.
interface BraveWalletService {
  // Adds an observer for BraveWalletService
  AddObserver(pending_remote<BraveWalletServiceObserver> observer);

  // Obtains the user assets for the specified chain ID
  GetUserAssets(string chain_id) => (array<ERCToken> tokens);

  // Adds a user asset to the user asset list pref for the specified chain ID.
  // This asset could be a token from ERCTokenRegistry or a custom token.
  AddUserAsset(ERCToken token, string chain_id) => (bool success);

  // Removes a user asset from the user asset list pref for the specified chain
  // ID. This asset could be a token from ERCTokenRegistry or a custom token.
  RemoveUserAsset(ERCToken token, string chain_id) => (bool success);

  // Sets whether or not an asset is visible for the specified chain ID.
  // This asset could be a token from ERCTokenRegistry or a custom token.
  SetUserAssetVisible(ERCToken token, string chain_id, bool visible) => (bool success);

  // Check if the external wallet is installed (Only check installation state
  // regardless of internal state)
  IsExternalWalletInstalled(ExternalWalletType type) => (bool installed);

  // Check if the external wallet is initialized (Used for knowing for knowing
  // to present UI). If a external wallet is not installed, hence it is not
  // initialized.
  IsExternalWalletInitialized(ExternalWalletType type) => (bool initialized);

  // Import from the external wallet
  ImportFromExternalWallet(ExternalWalletType type,
                           string password,
                           string newPassword)
    => (bool success, string? errorMessage);

  // Obtains the default wallet setting
  GetDefaultWallet() => (DefaultWallet default_wallet);

  // Modifies the default wallet setting
  SetDefaultWallet(DefaultWallet default_wallet);

  // Obtains the default base currency
  GetDefaultBaseCurrency() => (string currency);

  // Sets the default base currency
  SetDefaultBaseCurrency(string currency);

  // Obtains the default base cryptocurrency
  GetDefaultBaseCryptocurrency() => (string cryptocurrency);

  // Sets the default base cryptocurrency
  SetDefaultBaseCryptocurrency(string cryptocurrency);

  // Adds the Ethereum permission for the account
  AddEthereumPermission(string origin, string account) => (bool success);

  // Checks if the Ethereum permission is allowed for the origin on the account
  HasEthereumPermission(string origin, string account) => (bool success, bool has_permission);

  // Resets the Ethereum permission for the account
  ResetEthereumPermission(string origin, string account) => (bool success);

  // Obtains the active origin
  GetActiveOrigin() => (string origin);

  // These are used for UI notifying native when the user approve/reject SignMessage[Hardware]Request
  NotifySignMessageRequestProcessed(bool approved, int32 id);
  // Obtains the pending sign message requests
  GetPendingSignMessageRequests() => (array<SignMessageRequest> requests);
  NotifySignMessageHardwareRequestProcessed(bool approved, int32 id, string signature, string error);

  // Used for UI notifying native when the user apprrove/reject add suggest
  // token requests.
  NotifyAddSuggestTokenRequestsProcessed(bool approved, array<string> contract_addresses);
  // Obtain the pending add suggest token requests for current chain, will be
  // cleared when user switch networks.
  GetPendingAddSuggestTokenRequests() => (array<AddSuggestTokenRequest> requests);
};

enum DefaultWallet {
  AskDeprecated,
  None,
  CryptoWallets,
  BraveWalletPreferExtension,
  BraveWallet
};
