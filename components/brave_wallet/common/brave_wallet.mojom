// Copyright (c) 2021 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// you can obtain one at http://mozilla.org/MPL/2.0/.

module brave_wallet.mojom;

import "mojo/public/mojom/base/time.mojom";
import "mojo/public/mojom/base/values.mojom";
import "url/mojom/url.mojom";

interface EventsListener {
  ChainChangedEvent(string chain_id);
  AccountsChangedEvent(array<string> accounts);
};

interface BraveWalletProvider {
  Init(pending_remote<EventsListener> events_listener);
  Request(string json_payload, bool auto_retry_on_network_change) => (int32 http_code, string response, map<string, string> headers);
  RequestEthereumPermissions() => (bool success, array<string> accounts);
  AddEthereumChain(string json_payload) => (int32 error, string message);
  SwitchEthereumChain(string chain_id) => (int32 error, string message);
  AddAndApproveTransaction(TxData tx_data, string from) => (bool success, string tx_hash, string error_message);
  AddAndApprove1559Transaction(TxData1559 tx_data, string from) => (bool success, string tx_hash, string error_message);
  // error will be 0 when success
  SignMessage(string address, string message) => (string signature, int32 error, string error_message);
  GetChainId() => (string chain_id);
  GetAllowedAccounts() => (bool success, array<string> accounts);
};

// Used by the WebUI page to bootstrap bidirectional communication.
interface PanelHandlerFactory {
  // The WebUI calls this method when the page is first initialized.
  CreatePanelHandler(pending_remote<Page> page,
                     pending_receiver<PanelHandler> panel_handler,
                     pending_receiver<WalletHandler> wallet_handler,
                     pending_receiver<EthJsonRpcController> eth_json_rpc_controller,
                     pending_receiver<SwapController> swap_controller,
                     pending_receiver<AssetRatioController> asset_ratio_controller,
                     pending_receiver<KeyringController> keyring_controller,
                     pending_receiver<ERCTokenRegistry> erc_token_registry,
                     pending_receiver<EthTxController> eth_tx_controller,
                     pending_receiver<BraveWalletService> brave_wallet_service);
};

interface PageHandlerFactory {
  // The WebUI calls this method when the page is first initialized.
  CreatePageHandler(pending_remote<Page> page,
                    pending_receiver<PageHandler> page_handler,
                    pending_receiver<WalletHandler> wallet_handler,
                    pending_receiver<EthJsonRpcController> eth_json_rpc_controller,
                    pending_receiver<SwapController> swap_controller,
                    pending_receiver<AssetRatioController> asset_ratio_controller,
                    pending_receiver<KeyringController> keyring_controller,
                    pending_receiver<ERCTokenRegistry> erc_token_registry,
                    pending_receiver<EthTxController> eth_tx_controller,
                    pending_receiver<BraveWalletService> brave_wallet_service);

};

// Browser-side handler for requests from WebUI page.
interface PanelHandler {
  // Notify the backend that the UI is ready to be shown.
  ShowUI();

  // Notify the backend that the dialog should be closed.
  CloseUI();

  ConnectToSite(array<string> accounts, string origin, int32 tab_id);
  CancelConnectToSite(string origin, int32 tab_id);
  ClosePanelOnDeactivate(bool close);
};

// Browser-side handler for requests from WebUI page.
interface PageHandler {
  ShowApprovePanelUI();
};

struct AppItem {
  string description;
  string icon;
  string name;
  string url;
};

enum AssetPriceTimeframe {
  Live,
  OneDay,
  OneWeek,
  OneMonth,
  ThreeMonths,
  OneYear,
  All
};

struct AssetTimePrice {
  mojo_base.mojom.TimeDelta date;
  string price;
};

struct AssetPrice {
  string from_asset;
  string to_asset;
  string price;
  string asset_timeframe_change;
};

struct SwapParams {
  string taker_address;
  string sell_amount;
  string buy_amount;
  string buy_token;
  string sell_token;
  double slippage_percentage;
  string gas_price;
};

struct SwapResponse {
  string price;
  string guaranteed_price; // Unused for price quote response
  string to;   // Unused for price quote response
  string data; // Unused for price quote response
  string value;
  string gas;
  string estimated_gas;
  string gas_price;
  string protocol_fee;
  string minimum_protocol_fee;
  string buy_token_address;
  string sell_token_address;
  string buy_amount;
  string sell_amount;
  string allowance_target;
  string sell_token_to_eth_rate;
  string buy_token_to_eth_rate;
  // Note we could also expose "sources" later
};

const string kLedgerHardwareVendor = "Ledger";

struct HardwareWalletAccount {
  string address;
  string derivation_path;
  string name;
  string hardware_vendor;
  string device_id;
};

struct HardwareInfo {
  string path;
  string vendor;
  string device_id;
};

struct AccountInfo {
  string address;
  string name;
  bool is_imported;
  HardwareInfo? hardware;
};

struct KeyringInfo {
  bool is_default_keyring_created;
  bool is_locked;
  bool is_backed_up;
  array<AccountInfo> account_infos;
};

// Browser-side handler for common panel / page things
interface WalletHandler {
  GetWalletInfo() => (bool isWalletCreated, bool isWalletLocked,
                      array<AppItem> favoriteApps,
                      bool isWalletBackedUp,
                      array<AccountInfo> accountInfos);
  AddFavoriteApp(AppItem appItem);
  RemoveFavoriteApp(AppItem appItem);
};

struct ERCToken {
  string contract_address;
  string name;
  string logo;
  bool is_erc20;
  bool is_erc721;
  string symbol;
  int32 decimals;
  bool visible = true;
  string token_id = "";  // Non-empty for ERC721 tokens.
};

// WebUI-side handler for requests from the browser.
interface Page {
};

interface KeyringControllerObserver {
  KeyringCreated();
  KeyringRestored();
  Locked();
  Unlocked();
  BackedUp();
  AccountsChanged();
  AutoLockMinutesChanged();
  SelectedAccountChanged();
};

interface ERCTokenRegistry {
  GetTokenByContract(string contract) => (ERCToken? token);
  GetTokenBySymbol(string symbol) => (ERCToken? token);
  GetAllTokens() => (array<ERCToken> tokens);
  GetBuyTokens() => (array<ERCToken> tokens);
  GetBuyUrl(string address, string symbol, string amount) => (string url);
};

interface KeyringController {
  CreateWallet(string password) => (string mnemonic);
  GetMnemonicForDefaultKeyring() => (string mnemonic);
  RestoreWallet(string mnemonic, string password, bool isLegacyBraveWallet)
    => (bool isValidMnemonic);
  Lock();
  Unlock(string password) => (bool success);
  IsLocked() => (bool isLocked);
  AddAccount(string accountName) => (bool success);
  GetPrivateKeyForDefaultKeyringAccount(string address)
    => (bool success, string privateKey);
  ImportAccount(string accountName, string privateKey)
    => (bool success, string address);
  ImportAccountFromJson(string accountName, string password, string json)
    => (bool success, string address);
  GetPrivateKeyForImportedAccount(string address)
    => (bool success, string privateKey);
  RemoveImportedAccount(string address) => (bool success);
  IsWalletBackedUp() => (bool backed_up);
  NotifyWalletBackupComplete();
  GetDefaultKeyringInfo() => (KeyringInfo keyring);
  Reset();
  AddObserver(pending_remote<KeyringControllerObserver> observer);
  SetDefaultKeyringDerivedAccountName(string address, string name) => (bool success);
  SetDefaultKeyringImportedAccountName(string address, string name) => (bool success);
  SetDefaultKeyringHardwareAccountName(string address, string name) => (bool success);
  AddHardwareAccounts(array<HardwareWalletAccount> info);
  RemoveHardwareAccount(string address);
  NotifyUserInteraction();
  GetSelectedAccount() => (string? address);
  SetSelectedAccount(string address) => (bool success);
  GetAutoLockMinutes() => (int32 minutes);
  // Must be within the inclusive range [kAutoLockMinutesMin, kAutoLockMinutesMax]
  SetAutoLockMinutes(int32 minutes) => (bool success);
};

interface AssetRatioController {
  GetPrice(array<string> from_assets, array<string> to_assets, AssetPriceTimeframe timeframe) =>
      (bool success, array<AssetPrice> values);
  GetPriceHistory(string asset, AssetPriceTimeframe timeframe) =>
      (bool success, array<AssetTimePrice> values);

  // Gas estimation APIs
  GetEstimatedTime(string gas_price /* decimal string in wei */) =>
      (bool success, string seconds);
  GetGasOracle() => (GasEstimation1559? estimation);
};

interface SwapController {
  GetPriceQuote(SwapParams params) =>
      (bool success, SwapResponse? response, string? error_response);
  GetTransactionPayload(SwapParams params) =>
      (bool success, SwapResponse? response, string? error_response);
};

interface EthJsonRpcControllerObserver {
  ChainChangedEvent(string chain_id);
  OnAddEthereumChainRequestCompleted(string chain_id, string error);
  OnIsEip1559Changed(string chain_id, bool is_eip1559);
};

struct TxData {
  string nonce;
  string gas_price;
  string gas_limit;
  string to;
  string value;
  array<uint8> data;
};

struct GasEstimation1559 {
  string slow_max_priority_fee_per_gas;
  string slow_max_fee_per_gas;
  string avg_max_priority_fee_per_gas;
  string avg_max_fee_per_gas;
  string fast_max_priority_fee_per_gas;
  string fast_max_fee_per_gas;
  string base_fee_per_gas;
};

struct TxData1559 {
  TxData base_data;
  string chain_id;
  string max_priority_fee_per_gas;
  string max_fee_per_gas;
  GasEstimation1559? gas_estimation;
};

const string kMainnetChainId = "0x1";
const string kRinkebyChainId = "0x4";
const string kRopstenChainId = "0x3";
const string kGoerliChainId = "0x5";
const string kKovanChainId = "0x2a";
const string kLocalhostChainId = "0x539";

struct EthereumChain {
  string chain_id;
  string chain_name;
  array<string> block_explorer_urls;
  array<string> icon_urls;
  array<string> rpc_urls;
  string symbol;
  string symbol_name;
  int32 decimals;
  bool is_eip1559;
};

interface EthJsonRpcController {
  AddEthereumChain(EthereumChain chain, url.mojom.Url origin) => (string chain_id, bool accepted);
  AddEthereumChainRequestCompleted(string chain_id, bool approved);
  GetPendingChainRequests() => (array<EthereumChain> networks);
  SetNetwork(string chain_id) => (bool success);
  GetAllNetworks() => (array<EthereumChain> networks);
  GetChainId() => (string chain_id);
  GetBlockTrackerUrl() => (string block_tracker_url);
  GetNetworkUrl() => (string network_url);
  GetBalance(string address) => (bool success, string balance);
  GetERC20TokenBalance(string contract,
                       string address) => (bool success, string balance);
  GetERC20TokenAllowance(string contract,
                         string owner_address, string spender_address) => (bool success, string allowance);
  EnsGetEthAddr(string domain) => (bool success, string address);
  UnstoppableDomainsGetEthAddr(string domain) => (bool success, string address);
  Request(string json_payload, bool auto_retry_on_network_change) => (int32 http_code, string response, map<string, string> headers);
  AddObserver(pending_remote<EthJsonRpcControllerObserver> observer);
  SetCustomNetworkForTesting(string chain_id, url.mojom.Url provider_url);
  GetERC721OwnerOf(string contract, string token_id) => (bool success, string owner_address);
  // Balance is 0x1 if current selected account is the same as token owner's
  // address, otherwise balance is 0x0.
  GetERC721TokenBalance(string contract_address, string token_id, string account_address) => (bool success, string balance);
};

enum TransactionStatus {
  Unapproved,
  Approved,
  Rejected,
  Submitted,
  Confirmed,
  Error
};

enum TransactionType {
  ETHSend,
  ERC20Transfer,
  ERC20Approve,
  ERC721TransferFrom,
  ERC721SafeTransferFrom,
  Other
};

struct TransactionInfo {
  string id;
  string from_address;
  string tx_hash;
  TxData1559 tx_data;
  TransactionStatus tx_status;
  TransactionType tx_type;
  array<string> tx_params;
  array<string> tx_args;
  mojo_base.mojom.TimeDelta created_time;
  mojo_base.mojom.TimeDelta submitted_time;
  mojo_base.mojom.TimeDelta confirmed_time;
};

interface EthTxControllerObserver {
  OnNewUnapprovedTx(TransactionInfo tx_info);
  OnUnapprovedTxUpdated(TransactionInfo tx_info);
  OnTransactionStatusChanged(TransactionInfo tx_info);
};

interface EthTxController {
  AddUnapprovedTransaction(TxData tx_data, string from) => (bool success, string tx_meta_id, string error_message);
  AddUnapproved1559Transaction(TxData1559 tx_data, string from) => (bool success, string tx_meta_id, string error_message);
  ApproveTransaction(string tx_meta_id) => (bool status);
  RejectTransaction(string tx_meta_id) => (bool status);
  SetGasPriceAndLimitForUnapprovedTransaction(string tx_meta_id, string gas_price, string gas_limit) => (bool success);
  SetGasFeeAndLimitForUnapprovedTransaction(string tx_meta_id, string max_priority_fee_per_gas, string max_fee_per_gas, string gas_limit) => (bool success);
  SetDataForUnapprovedTransaction(string tx_meta_id, array<uint8> data) => (bool success);
  MakeERC20TransferData(string to_address, string amount) => (bool success, array<uint8> data);
  MakeERC20ApproveData(string spender_address, string amount) => (bool success, array<uint8> data);
  MakeERC721TransferFromData(string from, string to, string token_id, string contract_address) => (bool success, array<uint8> data);
  // This returns different data depending on which network is currently selected in EthJsonRpcController
  GetAllTransactionInfo(string from) => (array<TransactionInfo> transaction_infos);
  AddObserver(pending_remote<EthTxControllerObserver> observer);
  SpeedupOrCancelTransaction(string tx_meta_id, bool cancel) => (bool success, string tx_meta_id, string error_message);
  RetryTransaction(string tx_meta_id) => (bool success, string tx_meta_id, string error_message);
  ApproveHardwareTransaction(string tx_meta_id) => (bool success);
  GetTransactionInfo(string tx_meta_id) => (TransactionInfo? info);
  GetTransactionMessageToSign(string tx_meta_id) => (string message);
  ProcessHardwareSignature(string tx_meta_id, string v, string r, string s) => (bool status);
};

interface BraveWalletServiceObserver {
  OnActiveOriginChanged(string origin);
  OnDefaultWalletChanged(DefaultWallet wallet);
};

struct SignMessageRequest {
  int32 id;
  string address;
  string message;
};

interface BraveWalletService {
  AddObserver(pending_remote<BraveWalletServiceObserver> observer);
  GetUserAssets(string chain_id) => (array<ERCToken> tokens);
  AddUserAsset(ERCToken token, string chain_id) => (bool success);
  RemoveUserAsset(ERCToken token, string chain_id) => (bool success);
  SetUserAssetVisible(ERCToken token, string chain_id, bool visible) => (bool success);
  IsCryptoWalletsInstalled() => (bool installed);
  IsMetaMaskInstalled() => (bool installed);
  ImportFromCryptoWallets(string password, string newPassword) => (bool success,
  string? errorMessage);
  ImportFromMetaMask(string password, string newPassword) => (bool success,
  string? errorMessage);
  GetDefaultWallet() => (DefaultWallet default_wallet);
  SetDefaultWallet(DefaultWallet default_wallet);
  HasEthereumPermission(string origin, string account) => (bool success, bool has_permission);
  ResetEthereumPermission(string origin, string account) => (bool success);
  GetActiveOrigin() => (string origin);
  GetPendingSignMessageRequests() => (array<SignMessageRequest> requests);
  // UI to native
  NotifySignMessageRequestProcessed(bool approved, int32 id);
  NotifySignMessageHardwareRequestProcessed(bool approved, int32 id, string signature, string error);
};

enum DefaultWallet {
  AskDeprecated,
  None,
  CryptoWallets,
  BraveWalletPreferExtension,
  BraveWallet
};
