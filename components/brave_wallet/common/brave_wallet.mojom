// Copyright (c) 2021 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// you can obtain one at http://mozilla.org/MPL/2.0/.

module brave_wallet.mojom;

import "mojo/public/mojom/base/time.mojom";
import "mojo/public/mojom/base/values.mojom";
import "url/mojom/url.mojom";

interface EventsListener {
  ChainChangedEvent(string chain_id);
};

interface BraveWalletProvider {
  Init(pending_remote<EventsListener> events_listener);
  Request(string json_payload, bool auto_retry_on_network_change) => (int32 http_code, string response, map<string, string> headers);
  RequestEthereumPermissions() => (bool success, array<string> accounts);
  GetChainId() => (string chain_id);
  GetAllowedAccounts() => (bool success, array<string> accounts);
};

// Used by the WebUI page to bootstrap bidirectional communication.
interface PanelHandlerFactory {
  // The WebUI calls this method when the page is first initialized.
  CreatePanelHandler(pending_remote<Page> page,
                     pending_receiver<PanelHandler> panel_handler,
                     pending_receiver<WalletHandler> wallet_handler,
                     pending_receiver<EthJsonRpcController> eth_json_rpc_controller,
                     pending_receiver<SwapController> swap_controller,
                     pending_receiver<AssetRatioController> asset_ratio_controller,
                     pending_receiver<KeyringController> keyring_controller,
                     pending_receiver<ERCTokenRegistry> erc_token_registry,
                     pending_receiver<EthTxController> eth_tx_controller);
};

interface PageHandlerFactory {
  // The WebUI calls this method when the page is first initialized.
  CreatePageHandler(pending_remote<Page> page,
                    pending_receiver<PageHandler> page_handler,
                    pending_receiver<WalletHandler> wallet_handler,
                    pending_receiver<EthJsonRpcController> eth_json_rpc_controller,
                    pending_receiver<SwapController> swap_controller,
                    pending_receiver<AssetRatioController> asset_ratio_controller,
                    pending_receiver<KeyringController> keyring_controller,
                    pending_receiver<ERCTokenRegistry> erc_token_registry,
                     pending_receiver<EthTxController> eth_tx_controller);

};

// Browser-side handler for requests from WebUI page.
interface PanelHandler {
  // Notify the backend that the UI is ready to be shown.
  ShowUI();

  // Notify the backend that the dialog should be closed.
  CloseUI();

  AddEthereumChainApproved(string network, int32 tab_id);
  AddEthereumChainCanceled(string EthereumChain, int32 tab_id);

  ConnectToSite(array<string> accounts, string origin, int32 tab_id);
  CancelConnectToSite(string origin, int32 tab_id);
};

// Browser-side handler for requests from WebUI page.
interface PageHandler {
};

struct AppItem {
  string description;
  string icon;
  string name;
  string url;
};

enum AssetPriceTimeframe {
  Live,
  OneDay,
  OneWeek,
  OneMonth,
  ThreeMonths,
  OneYear,
  All
};

struct AssetTimePrice {
  mojo_base.mojom.TimeDelta date;
  string price;
};

struct AssetPrice {
  string from_asset;
  string to_asset;
  string price;
  string asset_timeframe_change;
};

struct SwapParams {
  string taker_address;
  string sell_amount;
  string buy_amount;
  string buy_token;
  string sell_token;
  double buy_token_percentage_fee;
  double slippage_percentage;
  string fee_recipient;
  string gas_price;
};

struct SwapResponse {
  string price;
  string guaranteed_price; // Unused for price quote response
  string to;   // Unused for price quote response
  string data; // Unused for price quote response
  string value;
  string gas;
  string estimated_gas;
  string gas_price;
  string protocol_fee;
  string minimum_protocol_fee;
  string buy_token_address;
  string sell_token_address;
  string buy_amount;
  string sell_amount;
  string allowance_target;
  string sell_token_to_eth_rate;
  string buy_token_to_eth_rate;
  // Note we could also expose "sources" later
};

struct AccountInfo {
  string address;
  string name;
};

struct KeyringInfo {
  bool is_default_keyring_created;
  bool is_locked;
  bool is_backed_up;
  array<AccountInfo> account_infos;
};

// Browser-side handler for common panel / page things
interface WalletHandler {
  GetWalletInfo() => (bool isWalletCreated, bool isWalletLocked,
                      array<AppItem> favoriteApps,
                      bool isWalletBackedUp,
                      array<AccountInfo> accountInfos);
  AddFavoriteApp(AppItem appItem);
  RemoveFavoriteApp(AppItem appItem);
};

struct ERCToken {
  string contract_address;
  string name;
  bool is_erc20;
  bool is_erc721;
  string symbol;
  int32 decimals;
};

// WebUI-side handler for requests from the browser.
interface Page {
};

interface KeyringControllerObserver {
  KeyringCreated();
  KeyringRestored();
  Locked();
  Unlocked();
  BackedUp();
  AccountsChanged();
};

interface ERCTokenRegistry {
  GetTokenByContract(string contract) => (ERCToken? token);
  GetTokenBySymbol(string symbol) => (ERCToken? token);
  GetAllTokens() => (array<ERCToken> tokens);
};

interface KeyringController {
  CreateWallet(string password) => (string mnemonic);
  GetMnemonicForDefaultKeyring() => (string mnemonic);
  RestoreWallet(string mnemonic, string password) => (bool isValidMnemonic);
  Lock();
  Unlock(string password) => (bool success);
  IsLocked() => (bool isLocked);
  AddAccount(string accountName) => (bool success);
  IsWalletBackedUp() => (bool backed_up);
  NotifyWalletBackupComplete();
  GetDefaultKeyringInfo() => (KeyringInfo keyring);
  Reset();
  AddObserver(pending_remote<KeyringControllerObserver> observer);
};

interface AssetRatioController {
  GetPrice(array<string> from_assets, array<string> to_assets, AssetPriceTimeframe timeframe) =>
      (bool success, array<AssetPrice> values);
  GetPriceHistory(string asset, AssetPriceTimeframe timeframe) =>
      (bool success, array<AssetTimePrice> values);
};

interface SwapController {
  GetPriceQuote(SwapParams params) =>
      (bool success, SwapResponse response);
  GetTransactionPayload(SwapParams params) =>
      (bool success, SwapResponse response);
};

struct KnownNetwork {
  string chain_id;
  string chainName;
  string subdomain;
  string block_tracker_url;
};

interface EthJsonRpcControllerObserver {
  ChainChangedEvent(string chain_id);
};

struct TxData {
  string nonce;
  string gas_price;
  string gas_limit;
  string to;
  string value;
  array<uint8> data;
};

struct TxData1559 {
  TxData base_data;
  string chain_id;
  string max_priority_fee_per_gas;
  string max_fee_per_gas;
}

struct NativeCurrency {
  string symbol;
  string name;
  int32 decimals;
};

struct EthereumChain {
  string chainId;
  string chainName;
  array<string>? blockExplorerUrls;
  array<string>? iconUrls;
  array<string> rpcUrls;
  NativeCurrency? currency;
};

interface EthJsonRpcController {
  SetNetwork(string chain_id);
  GetAllNetworks() => (array<EthereumChain> networks);
  GetChainId() => (string chainId);
  GetBlockTrackerUrl() => (string blockTrackerUrl);
  GetNetworkUrl() => (string networkUrl);
  GetBalance(string address) => (bool success, string balance);
  GetERC20TokenBalance(string contract,
                       string address) => (bool success, string balance);
  UnstoppableDomainsProxyReaderGetMany(string contract_address, string domain, array<string> keys) => (bool status, string result);
  EnsProxyReaderGetResolverAddress(string contract_address, string domain) => (bool status, string result);
  Request(string json_payload, bool auto_retry_on_network_change) => (int32 http_code, string response, map<string, string> headers);
  AddObserver(pending_remote<EthJsonRpcControllerObserver> observer);
  SetCustomNetworkForTesting(string chain_id, url.mojom.Url provider_url);
};

interface EthTxController {
  AddUnapprovedTransaction(TxData tx_data, string from) => (bool success, string tx_meta_id);
  AddUnapproved1559Transaction(TxData1559 tx_data, string from) => (bool success, string tx_meta_id);
  ApproveTransaction(string tx_meta_id) => (bool status);
  RejectTransaction(string tx_meta_id) => (bool status);
  MakeERC20TransferData(string to_address, string amount) => (bool success, array<uint8> data);
};
