# Copyright (c) 2022 The Brave Authors. All rights reserved.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at https://mozilla.org/MPL/2.0/.

import("//brave/build/config.gni")
import("//brave/components/brave_wallet/common/config.gni")
import("//build/buildflag_header.gni")
import("//mojo/public/tools/bindings/mojom.gni")
import("//testing/test.gni")
import("//tools/grit/preprocess_if_expr.gni")
import("//tools/json_schema_compiler/json_schema_api.gni")

preprocess_folder = "preprocessed"
preprocess_mojo_manifest = "preprocessed_mojo_manifest.json"

if (is_official_build) {
  assert(brave_zero_ex_api_key != "")
}

buildflag_header("buildflags") {
  header = "buildflags.h"
  flags = [
    "BRAVE_INFURA_PROJECT_ID=\"$brave_infura_project_id\"",
    "BRAVE_ZERO_EX_API_KEY=\"$brave_zero_ex_api_key\"",
  ]
}

static_library("common") {
  include_dirs = [ "//brave/third_party/ethash/src/include" ]

  sources = [
    "bitcoin_utils.cc",
    "bitcoin_utils.h",
    "brave_wallet_response_helpers.cc",
    "brave_wallet_response_helpers.h",
    "brave_wallet_types.cc",
    "brave_wallet_types.h",
    "common_utils.cc",
    "common_utils.h",
    "encoding_utils.cc",
    "encoding_utils.h",
    "eth_abi_utils.cc",
    "eth_abi_utils.h",
    "eth_address.cc",
    "eth_address.h",
    "eth_request_helper.cc",
    "eth_request_helper.h",
    "eth_sign_typed_data_helper.cc",
    "eth_sign_typed_data_helper.h",
    "features.cc",
    "features.h",
    "fil_address.cc",
    "fil_address.h",
    "hash_utils.cc",
    "hash_utils.h",
    "hex_utils.cc",
    "hex_utils.h",
    "mem_utils.cc",
    "mem_utils.h",
    "solana_address.cc",
    "solana_address.h",
    "solana_utils.cc",
    "solana_utils.h",
    "string_utils.cc",
    "string_utils.h",
    "switches.cc",
    "switches.h",
    "value_conversion_utils.cc",
    "value_conversion_utils.h",
    "zcash_utils.cc",
    "zcash_utils.h",
  ]
  deps = [
    ":common_constants",
    ":generated_eth_requests",
    ":generated_json_rpc_requests",
    ":mojom",
    ":mojom__generator",
    ":pref_names",
    "//brave/third_party/argon2",
    "//brave/third_party/bitcoin-core",
    "//brave/third_party/ethash",
    "//components/base32",
    "//components/prefs",
    "//net",
    "//url",
  ]

  public_deps = [ "//base" ]
}

source_set("common_constants") {
  sources = [
    "brave_wallet_constants.h",
    "web3_provider_constants.cc",
    "web3_provider_constants.h",
  ]
  deps = [ ":mojom" ]
}

source_set("pref_names") {
  sources = [ "pref_names.h" ]
}

generated_types("generated_json_rpc_requests") {
  sources = [ "json_rpc_requests.idl" ]
  root_namespace = "brave_wallet::%(namespace)s"
  deps = [ "//base" ]
  visibility = [ ":common" ]
}

generated_types("generated_eth_requests") {
  sources = [ "eth_requests.idl" ]
  root_namespace = "brave_wallet::%(namespace)s"
  deps = [ "//base" ]
  visibility = [
    ":common",
    "test:brave_wallet_unit_tests",
  ]
}

preprocess_if_expr("preprocess_mojo") {
  deps = [ "//brave/components/brave_wallet/common:mojom_js" ]
  in_folder = "$target_gen_dir"
  out_folder = "$target_gen_dir/$preprocess_folder"
  out_manifest = "$target_gen_dir/$preprocess_mojo_manifest"
  in_files = [ "brave_wallet.mojom-lite.js" ]
}

mojom("mojom") {
  generate_java = true
  sources = [ "brave_wallet.mojom" ]
  public_deps = [
    "//mojo/public/mojom/base",
    "//url/mojom:url_mojom_gurl",
    "//url/mojom:url_mojom_origin",
  ]
}

source_set("unit_tests") {
  testonly = true
  sources = [
    "bitcoin_utils_unittest.cc",
    "brave_wallet_types_unittest.cc",
    "common_utils_unittest.cc",
    "encoding_utils_unittest.cc",
    "eth_abi_utils_unittest.cc",
    "eth_request_helper_unittest.cc",
    "eth_sign_typed_data_helper_unittest.cc",
    "hash_utils_unittest.cc",
    "hex_utils_unittest.cc",
    "mem_utils_unittest.cc",
    "solana_address_unittest.cc",
    "solana_utils_unittest.cc",
    "string_utils_unittest.cc",
    "value_conversion_utils_unittest.cc",
    "zcash_utils_unittest.cc",
  ]

  deps = [
    ":common",
    ":common_constants",
    ":mojom",
    ":test_support",
    "//base/test:test_support",
    "//testing/gtest",
    "//url",
  ]
}  # source_set("unit_tests")

source_set("test_support") {
  testonly = true
  sources = [
    "test_utils.cc",
    "test_utils.h",
  ]

  deps = [
    ":common",
    "//testing/gmock",
  ]

  public_deps = [ ":mojom" ]
}  # source_set("test_support")
