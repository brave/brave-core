/* Copyright (c) 2024 The Brave Authors. All rights reserved.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at https://mozilla.org/MPL/2.0/. */

#include "brave/components/brave_wallet/common/f4_jumble.h"

#include <string>

#include "base/containers/span.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace brave_wallet {

// https://github.com/zcash/librustzcash/blob/f4jumble-0.1.0/components/f4jumble/src/test_vectors.rs
TEST(F4JumbleUnitTest, ApplyF4Jumble) {
  {
    std::vector<uint8_t> input = {};
    EXPECT_FALSE(ApplyF4Jumble(input).has_value());
  }

  {
    std::vector<uint8_t> input = {
        0x5d, 0x7a, 0x8f, 0x73, 0x9a, 0x2d, 0x9e, 0x94, 0x5b, 0x0c, 0xe1, 0x52,
        0xa8, 0x04, 0x9e, 0x29, 0x4c, 0x4d, 0x6e, 0x66, 0xb1, 0x64, 0x93, 0x9d,
        0xaf, 0xfa, 0x2e, 0xf6, 0xee, 0x69, 0x21, 0x48, 0x1c, 0xdd, 0x86, 0xb3,
        0xcc, 0x43, 0x18, 0xd9, 0x61, 0x4f, 0xc8, 0x20, 0x90, 0x5d, 0x04, 0x2b};

    std::vector<uint8_t> expected = {
        0x03, 0x04, 0xd0, 0x29, 0x14, 0x1b, 0x99, 0x5d, 0xa5, 0x38, 0x7c, 0x12,
        0x59, 0x70, 0x67, 0x35, 0x04, 0xd6, 0xc7, 0x64, 0xd9, 0x1e, 0xa6, 0xc0,
        0x82, 0x12, 0x37, 0x70, 0xc7, 0x13, 0x9c, 0xcd, 0x88, 0xee, 0x27, 0x36,
        0x8c, 0xd0, 0xc0, 0x92, 0x1a, 0x04, 0x44, 0xc8, 0xe5, 0x85, 0x8d, 0x22};

    EXPECT_EQ(expected, *ApplyF4Jumble(input));
  }

  {
    std::vector<uint8_t> input = {
        0x7e, 0x74, 0x59, 0x39, 0xff, 0xed, 0xbd, 0x12, 0x86, 0x3c, 0xe7, 0x1a,
        0x02, 0xaf, 0x11, 0x7d, 0x41, 0x7a, 0xdb, 0x3d, 0x15, 0xcc, 0x54, 0xdc,
        0xb1, 0xfc, 0xe4, 0x67, 0x50, 0x0c, 0x6b, 0x8f, 0xb8, 0x6b, 0x12, 0xb5,
        0x6d, 0xa9, 0xc3, 0x82, 0x85, 0x7d, 0xee, 0xcc, 0x40, 0xa9, 0x8d, 0x5f,
        0x29, 0x35, 0x39, 0x5e, 0xe4, 0x76, 0x2d, 0xd2, 0x1a, 0xfd, 0xbb, 0x5d,
        0x47, 0xfa, 0x9a, 0x6d, 0xd9, 0x84, 0xd5, 0x67, 0xdb, 0x28, 0x57, 0xb9,
        0x27, 0xb7, 0xfa, 0xe2, 0xdb, 0x58, 0x71, 0x05, 0x41, 0x5d, 0x46, 0x42,
        0x78, 0x9d, 0x38, 0xf5, 0x0b, 0x8d, 0xbc, 0xc1, 0x29, 0xca, 0xb3, 0xd1,
        0x7d, 0x19, 0xf3, 0x35, 0x5b, 0xcf, 0x73, 0xce, 0xcb, 0x8c, 0xb8, 0xa5,
        0xda, 0x01, 0x30, 0x71, 0x52, 0xf1, 0x39, 0x36, 0xa2, 0x70, 0x57, 0x26,
        0x70, 0xdc, 0x82, 0xd3, 0x90, 0x26, 0xc6, 0xcb, 0x4c, 0xd4, 0xb0, 0xf7,
        0xf5, 0xaa, 0x2a, 0x4f, 0x5a, 0x53, 0x41, 0xec, 0x5d, 0xd7, 0x15, 0x40,
        0x6f, 0x2f, 0xdd, 0x2a, 0xfa, 0x73, 0x3f, 0x5f, 0x64, 0x1c, 0x8c, 0x21,
        0x86, 0x2a, 0x1b, 0xaf, 0xce, 0x26, 0x09, 0xd9, 0xee, 0xcf, 0xa1, 0x58,
        0xcf, 0xb5, 0xcd, 0x79, 0xf8, 0x80, 0x08, 0xe3, 0x15, 0xdc, 0x7d, 0x83,
        0x88, 0xe7, 0x6c, 0x17, 0x82, 0xfd, 0x27, 0x95, 0xd1, 0x8a, 0x76, 0x36,
        0x24};

    std::vector<uint8_t> expected = {
        0x1a, 0x52, 0x58, 0x5e, 0x65, 0x2d, 0xa6, 0xea, 0x46, 0x99, 0x49, 0x54,
        0x90, 0x5c, 0xb7, 0x9f, 0x55, 0xfc, 0xa5, 0x81, 0x71, 0xa4, 0xd7, 0xf7,
        0x73, 0xa5, 0x7d, 0x23, 0xed, 0x9d, 0xde, 0xc0, 0xc7, 0x45, 0xef, 0x0f,
        0x45, 0x88, 0xfa, 0x7b, 0x2b, 0x68, 0xd6, 0x9c, 0xdd, 0x25, 0xe5, 0xeb,
        0x0e, 0x08, 0xc2, 0x05, 0x23, 0xa3, 0x95, 0x71, 0x71, 0xf1, 0x73, 0x0a,
        0xb0, 0x63, 0x6f, 0xae, 0xe7, 0x5d, 0xa2, 0xdc, 0x9e, 0x89, 0x56, 0x2f,
        0x06, 0x53, 0xd4, 0xe9, 0x42, 0x21, 0x79, 0x28, 0x6a, 0xe8, 0x30, 0x5f,
        0x01, 0x37, 0x1f, 0x47, 0xab, 0x16, 0xee, 0xd6, 0x92, 0xc3, 0x89, 0x5c,
        0xe2, 0xfd, 0x65, 0x5e, 0x4b, 0x19, 0x65, 0x1c, 0x35, 0xd8, 0x3c, 0x81,
        0x89, 0x4f, 0x68, 0x70, 0x55, 0xb5, 0x81, 0x11, 0x44, 0x40, 0x64, 0x65,
        0x08, 0xe3, 0x9a, 0x49, 0xb0, 0xd5, 0xa9, 0x90, 0x04, 0x56, 0x0a, 0xf7,
        0x36, 0x7c, 0xc2, 0x73, 0x83, 0x44, 0xd4, 0xe7, 0x97, 0xa9, 0x95, 0xed,
        0x66, 0xdf, 0x72, 0x22, 0x8e, 0x3d, 0x37, 0x46, 0x67, 0x43, 0x37, 0x10,
        0x47, 0x00, 0x14, 0x4c, 0x73, 0xb6, 0xdb, 0x27, 0xd2, 0x38, 0xc9, 0xe1,
        0x77, 0x06, 0x62, 0xfe, 0xb0, 0x95, 0x7d, 0x50, 0x28, 0xb5, 0x08, 0x6f,
        0x38, 0x39, 0xaa, 0xcf, 0x27, 0x50, 0x22, 0xdd, 0x7e, 0x7e, 0x98, 0x3b,
        0x6d};

    EXPECT_EQ(expected, *ApplyF4Jumble(input));
  }

  {
    std::vector<uint8_t> input = {
        0x25, 0xc9, 0xa1, 0x38, 0xf4, 0x9b, 0x1a, 0x53, 0x7e, 0xdc, 0xf0, 0x4b,
        0xe3, 0x4a, 0x98, 0x51, 0xa7, 0xaf, 0x9d, 0xb6, 0x99, 0x0e, 0xd8, 0x3d,
        0xd6, 0x4a, 0xf3, 0x59, 0x7c, 0x04, 0x32, 0x3e, 0xa5, 0x1b, 0x00, 0x52,
        0xad, 0x80, 0x84, 0xa8, 0xb9, 0xda, 0x94, 0x8d, 0x32, 0x0d, 0xad, 0xd6,
        0x4f, 0x54, 0x31, 0xe6, 0x1d, 0xdf, 0x65, 0x8d, 0x24, 0xae, 0x67, 0xc2,
        0x2c, 0x8d, 0x13, 0x09, 0x13, 0x1f, 0xc0, 0x0f, 0xe7, 0xf2, 0x35, 0x73,
        0x42, 0x76, 0xd3, 0x8d, 0x47, 0xf1, 0xe1, 0x91, 0xe0, 0x0c, 0x7a, 0x1d,
        0x48, 0xaf, 0x04, 0x68, 0x27, 0x59, 0x1e, 0x97, 0x33, 0xa9, 0x7f, 0xa6,
        0xb6, 0x79, 0xf3, 0xdc, 0x60, 0x1d, 0x00, 0x82, 0x85, 0xed, 0xcb, 0xda,
        0xe6, 0x9c, 0xe8, 0xfc, 0x1b, 0xe4, 0xaa, 0xc0, 0x0f, 0xf2, 0x71, 0x1e,
        0xbd, 0x93, 0x1d, 0xe5, 0x18, 0x85, 0x68, 0x78, 0xf7};

    std::vector<uint8_t> expected = {
        0x75, 0x08, 0xa3, 0xa1, 0x46, 0x71, 0x4f, 0x22, 0x9d, 0xb9, 0x1b, 0x54,
        0x3e, 0x24, 0x06, 0x33, 0xed, 0x57, 0x85, 0x3f, 0x64, 0x51, 0xc9, 0xdb,
        0x6d, 0x64, 0xc6, 0xe8, 0x6a, 0xf1, 0xb8, 0x8b, 0x28, 0x70, 0x4f, 0x60,
        0x85, 0x82, 0xc5, 0x3c, 0x51, 0xce, 0x7d, 0x5b, 0x85, 0x48, 0x82, 0x7a,
        0x97, 0x1d, 0x2b, 0x98, 0xd4, 0x1b, 0x7f, 0x62, 0x58, 0x65, 0x59, 0x02,
        0x44, 0x0c, 0xd6, 0x6e, 0xe1, 0x1e, 0x84, 0xdb, 0xfa, 0xc7, 0xd2, 0xa4,
        0x36, 0x96, 0xfd, 0x04, 0x68, 0x81, 0x0a, 0x3d, 0x96, 0x37, 0xc3, 0xfa,
        0x58, 0xe7, 0xd2, 0xd3, 0x41, 0xef, 0x25, 0x0f, 0xa0, 0x9b, 0x9f, 0xb7,
        0x1a, 0x78, 0xa4, 0x1d, 0x38, 0x93, 0x70, 0x13, 0x8a, 0x55, 0xea, 0x58,
        0xfc, 0xde, 0x77, 0x9d, 0x71, 0x4a, 0x04, 0xe0, 0xd3, 0x0e, 0x61, 0xdc,
        0x2d, 0x8b, 0xe0, 0xda, 0x61, 0xcd, 0x68, 0x45, 0x09};

    EXPECT_EQ(expected, *ApplyF4Jumble(input));
  }

  {
    std::vector<uint8_t> input = {
        0x7e, 0x74, 0x59, 0x39, 0xff, 0xed, 0xbd, 0x12, 0x86, 0x3c, 0xe7, 0x1a,
        0x02, 0xaf, 0x11, 0x7d, 0x41, 0x7a, 0xdb, 0x3d, 0x15, 0xcc, 0x54, 0xdc,
        0xb1, 0xfc, 0xe4, 0x67, 0x50, 0x0c, 0x6b, 0x8f, 0xb8, 0x6b, 0x12, 0xb5,
        0x6d, 0xa9, 0xc3, 0x82, 0x85, 0x7d, 0xee, 0xcc, 0x40, 0xa9, 0x8d, 0x5f,
        0x29, 0x35, 0x39, 0x5e, 0xe4, 0x76, 0x2d, 0xd2, 0x1a, 0xfd, 0xbb, 0x5d,
        0x47, 0xfa, 0x9a, 0x6d, 0xd9, 0x84, 0xd5, 0x67, 0xdb, 0x28, 0x57, 0xb9,
        0x27, 0xb7, 0xfa, 0xe2, 0xdb, 0x58, 0x71, 0x05, 0x41, 0x5d, 0x46, 0x42,
        0x78, 0x9d, 0x38, 0xf5, 0x0b, 0x8d, 0xbc, 0xc1, 0x29, 0xca, 0xb3, 0xd1,
        0x7d, 0x19, 0xf3, 0x35, 0x5b, 0xcf, 0x73, 0xce, 0xcb, 0x8c, 0xb8, 0xa5,
        0xda, 0x01, 0x30, 0x71, 0x52, 0xf1, 0x39, 0x36, 0xa2, 0x70, 0x57, 0x26,
        0x70, 0xdc, 0x82, 0xd3, 0x90, 0x26, 0xc6, 0xcb, 0x4c, 0xd4, 0xb0, 0xf7,
        0xf5, 0xaa, 0x2a, 0x4f, 0x5a, 0x53, 0x41, 0xec, 0x5d, 0xd7, 0x15, 0x40,
        0x6f, 0x2f, 0xdd, 0x2a, 0xfa, 0x73, 0x3f, 0x5f, 0x64, 0x1c, 0x8c, 0x21,
        0x86, 0x2a, 0x1b, 0xaf, 0xce, 0x26, 0x09, 0xd9, 0xee, 0xcf, 0xa1, 0x58,
        0xcf, 0xb5, 0xcd, 0x79, 0xf8, 0x80, 0x08, 0xe3, 0x15, 0xdc, 0x7d, 0x83,
        0x88, 0xe7, 0x6c, 0x17, 0x82, 0xfd, 0x27, 0x95, 0xd1, 0x8a, 0x76, 0x36,
        0x24};
    std::vector<uint8_t> expected = {
        0x1a, 0x52, 0x58, 0x5e, 0x65, 0x2d, 0xa6, 0xea, 0x46, 0x99, 0x49, 0x54,
        0x90, 0x5c, 0xb7, 0x9f, 0x55, 0xfc, 0xa5, 0x81, 0x71, 0xa4, 0xd7, 0xf7,
        0x73, 0xa5, 0x7d, 0x23, 0xed, 0x9d, 0xde, 0xc0, 0xc7, 0x45, 0xef, 0x0f,
        0x45, 0x88, 0xfa, 0x7b, 0x2b, 0x68, 0xd6, 0x9c, 0xdd, 0x25, 0xe5, 0xeb,
        0x0e, 0x08, 0xc2, 0x05, 0x23, 0xa3, 0x95, 0x71, 0x71, 0xf1, 0x73, 0x0a,
        0xb0, 0x63, 0x6f, 0xae, 0xe7, 0x5d, 0xa2, 0xdc, 0x9e, 0x89, 0x56, 0x2f,
        0x06, 0x53, 0xd4, 0xe9, 0x42, 0x21, 0x79, 0x28, 0x6a, 0xe8, 0x30, 0x5f,
        0x01, 0x37, 0x1f, 0x47, 0xab, 0x16, 0xee, 0xd6, 0x92, 0xc3, 0x89, 0x5c,
        0xe2, 0xfd, 0x65, 0x5e, 0x4b, 0x19, 0x65, 0x1c, 0x35, 0xd8, 0x3c, 0x81,
        0x89, 0x4f, 0x68, 0x70, 0x55, 0xb5, 0x81, 0x11, 0x44, 0x40, 0x64, 0x65,
        0x08, 0xe3, 0x9a, 0x49, 0xb0, 0xd5, 0xa9, 0x90, 0x04, 0x56, 0x0a, 0xf7,
        0x36, 0x7c, 0xc2, 0x73, 0x83, 0x44, 0xd4, 0xe7, 0x97, 0xa9, 0x95, 0xed,
        0x66, 0xdf, 0x72, 0x22, 0x8e, 0x3d, 0x37, 0x46, 0x67, 0x43, 0x37, 0x10,
        0x47, 0x00, 0x14, 0x4c, 0x73, 0xb6, 0xdb, 0x27, 0xd2, 0x38, 0xc9, 0xe1,
        0x77, 0x06, 0x62, 0xfe, 0xb0, 0x95, 0x7d, 0x50, 0x28, 0xb5, 0x08, 0x6f,
        0x38, 0x39, 0xaa, 0xcf, 0x27, 0x50, 0x22, 0xdd, 0x7e, 0x7e, 0x98, 0x3b,
        0x6d};

    EXPECT_EQ(expected, *ApplyF4Jumble(input));
  }
}

// https://github.com/zcash/librustzcash/blob/f4jumble-0.1.0/components/f4jumble/src/test_vectors.rs
TEST(F4JumbleUnitTest, RevertF4Jumble) {
  {
    std::vector<uint8_t> input = {};
    EXPECT_FALSE(RevertF4Jumble(input).has_value());
  }

  {
    std::vector<uint8_t> input = {
        0x51, 0x39, 0x91, 0x2f, 0xe8, 0xb9, 0x54, 0x92, 0xc1, 0x27, 0x31, 0x99,
        0x5a, 0x0f, 0x44, 0x78, 0xdb, 0xeb, 0x81, 0xec, 0x36, 0x65, 0x3a, 0x21,
        0xbc, 0x80, 0xd6, 0x73, 0xf3, 0xc6, 0xa0, 0xfe, 0xef, 0x70, 0xb6, 0xc5,
        0x66, 0xf9, 0xd3, 0x4b, 0xb7, 0x26, 0xc0, 0x98, 0x64, 0x83, 0x82, 0xd1,
        0x05, 0xaf, 0xb1, 0x9b, 0x2b, 0x84, 0x86, 0xb7, 0x3c, 0xbd, 0x47, 0xa1,
        0x7a, 0x0d, 0x2d, 0x1f, 0xd5, 0x93, 0xb1, 0x4b, 0xb9, 0x82, 0x6c, 0x5d,
        0x11, 0x4b, 0x85, 0x0c, 0x6f, 0x0c, 0xf3, 0x08, 0x3a, 0x6f, 0x61, 0xe3,
        0x8e, 0x42, 0x71, 0x3a, 0x37, 0xef, 0x79, 0x97, 0xeb, 0xd2, 0xb3, 0x76,
        0xc8, 0xa4, 0x10, 0xd7, 0x97, 0xb3, 0x93, 0x2e, 0x5a, 0x6e, 0x39, 0xe7,
        0x26, 0xb2, 0x89, 0x4c, 0xe7, 0x96, 0x04, 0xb4, 0xae, 0x3c, 0x00, 0xac,
        0xae, 0xa3, 0xbe, 0x2c, 0x1d, 0xfe, 0x69, 0x7f, 0xa6, 0x44, 0x75, 0x51,
        0x02, 0xcf, 0x9a, 0xd7, 0x87, 0x94, 0xd0, 0x59, 0x45, 0x85, 0x49, 0x4f,
        0xe3, 0x8a, 0xb5, 0x6f, 0xa6, 0xef, 0x32, 0x71, 0xa6, 0x8a, 0x33, 0x48,
        0x10, 0x15, 0xad, 0xf3, 0x94, 0x4c, 0x11, 0x53, 0x11, 0x42, 0x1a, 0x7d,
        0xc3, 0xce, 0x73, 0xef, 0x2a, 0xbf, 0x47, 0xe1, 0x8a, 0x6a, 0xca, 0x7f,
        0x9d, 0xd2, 0x5a, 0x85, 0xce, 0x8d, 0xbd, 0x6f, 0x1a, 0xd8, 0x9c, 0x8d};

    std::vector<uint8_t> expected = {
        0x34, 0x76, 0xf2, 0x1a, 0x48, 0x2e, 0xc9, 0x37, 0x83, 0x65, 0xc8, 0xf7,
        0x39, 0x3c, 0x94, 0xe2, 0x88, 0x53, 0x15, 0xeb, 0x46, 0x71, 0x09, 0x8b,
        0x79, 0x53, 0x5e, 0x79, 0x0f, 0xe5, 0x3e, 0x29, 0xfe, 0xf2, 0xb3, 0x76,
        0x66, 0x97, 0xac, 0x32, 0xb4, 0xf4, 0x73, 0xf4, 0x68, 0xa0, 0x08, 0xe7,
        0x23, 0x89, 0xfc, 0x03, 0x88, 0x0d, 0x78, 0x0c, 0xb0, 0x7f, 0xcf, 0xaa,
        0xbe, 0x3f, 0x1a, 0x84, 0xb2, 0x7d, 0xb5, 0x9a, 0x4a, 0x15, 0x3d, 0x88,
        0x2d, 0x2b, 0x21, 0x03, 0x59, 0x65, 0x55, 0xed, 0x94, 0x94, 0xc6, 0xac,
        0x89, 0x3c, 0x49, 0x72, 0x38, 0x33, 0xec, 0x89, 0x26, 0xc1, 0x03, 0x95,
        0x86, 0xa7, 0xaf, 0xcf, 0x4a, 0x0d, 0x9c, 0x73, 0x1e, 0x98, 0x5d, 0x99,
        0x58, 0x9c, 0x8b, 0xb8, 0x38, 0xe8, 0xaa, 0xf7, 0x45, 0x53, 0x3e, 0xd9,
        0xe8, 0xae, 0x3a, 0x1c, 0xd0, 0x74, 0xa5, 0x1a, 0x20, 0xda, 0x8a, 0xba,
        0x18, 0xd1, 0xdb, 0xeb, 0xbc, 0x86, 0x2d, 0xed, 0x42, 0x43, 0x5e, 0x92,
        0x47, 0x69, 0x30, 0xd0, 0x69, 0x89, 0x6c, 0xff, 0x30, 0xeb, 0x41, 0x4f,
        0x72, 0x7b, 0x89, 0xe0, 0x01, 0xaf, 0xa2, 0xfb, 0x8d, 0xc3, 0x43, 0x6d,
        0x75, 0xa4, 0xa6, 0xf2, 0x65, 0x72, 0x50, 0x4b, 0x19, 0x22, 0x32, 0xec,
        0xb9, 0xf0, 0xc0, 0x24, 0x11, 0xe5, 0x25, 0x96, 0xbc, 0x5e, 0x90, 0x45};

    EXPECT_EQ(expected, *RevertF4Jumble(input));
  }

  {
    std::vector<uint8_t> input = {
        0x75, 0x08, 0xa3, 0xa1, 0x46, 0x71, 0x4f, 0x22, 0x9d, 0xb9, 0x1b, 0x54,
        0x3e, 0x24, 0x06, 0x33, 0xed, 0x57, 0x85, 0x3f, 0x64, 0x51, 0xc9, 0xdb,
        0x6d, 0x64, 0xc6, 0xe8, 0x6a, 0xf1, 0xb8, 0x8b, 0x28, 0x70, 0x4f, 0x60,
        0x85, 0x82, 0xc5, 0x3c, 0x51, 0xce, 0x7d, 0x5b, 0x85, 0x48, 0x82, 0x7a,
        0x97, 0x1d, 0x2b, 0x98, 0xd4, 0x1b, 0x7f, 0x62, 0x58, 0x65, 0x59, 0x02,
        0x44, 0x0c, 0xd6, 0x6e, 0xe1, 0x1e, 0x84, 0xdb, 0xfa, 0xc7, 0xd2, 0xa4,
        0x36, 0x96, 0xfd, 0x04, 0x68, 0x81, 0x0a, 0x3d, 0x96, 0x37, 0xc3, 0xfa,
        0x58, 0xe7, 0xd2, 0xd3, 0x41, 0xef, 0x25, 0x0f, 0xa0, 0x9b, 0x9f, 0xb7,
        0x1a, 0x78, 0xa4, 0x1d, 0x38, 0x93, 0x70, 0x13, 0x8a, 0x55, 0xea, 0x58,
        0xfc, 0xde, 0x77, 0x9d, 0x71, 0x4a, 0x04, 0xe0, 0xd3, 0x0e, 0x61, 0xdc,
        0x2d, 0x8b, 0xe0, 0xda, 0x61, 0xcd, 0x68, 0x45, 0x09};

    std::vector<uint8_t> expected = {
        0x25, 0xc9, 0xa1, 0x38, 0xf4, 0x9b, 0x1a, 0x53, 0x7e, 0xdc, 0xf0, 0x4b,
        0xe3, 0x4a, 0x98, 0x51, 0xa7, 0xaf, 0x9d, 0xb6, 0x99, 0x0e, 0xd8, 0x3d,
        0xd6, 0x4a, 0xf3, 0x59, 0x7c, 0x04, 0x32, 0x3e, 0xa5, 0x1b, 0x00, 0x52,
        0xad, 0x80, 0x84, 0xa8, 0xb9, 0xda, 0x94, 0x8d, 0x32, 0x0d, 0xad, 0xd6,
        0x4f, 0x54, 0x31, 0xe6, 0x1d, 0xdf, 0x65, 0x8d, 0x24, 0xae, 0x67, 0xc2,
        0x2c, 0x8d, 0x13, 0x09, 0x13, 0x1f, 0xc0, 0x0f, 0xe7, 0xf2, 0x35, 0x73,
        0x42, 0x76, 0xd3, 0x8d, 0x47, 0xf1, 0xe1, 0x91, 0xe0, 0x0c, 0x7a, 0x1d,
        0x48, 0xaf, 0x04, 0x68, 0x27, 0x59, 0x1e, 0x97, 0x33, 0xa9, 0x7f, 0xa6,
        0xb6, 0x79, 0xf3, 0xdc, 0x60, 0x1d, 0x00, 0x82, 0x85, 0xed, 0xcb, 0xda,
        0xe6, 0x9c, 0xe8, 0xfc, 0x1b, 0xe4, 0xaa, 0xc0, 0x0f, 0xf2, 0x71, 0x1e,
        0xbd, 0x93, 0x1d, 0xe5, 0x18, 0x85, 0x68, 0x78, 0xf7};

    EXPECT_EQ(expected, *RevertF4Jumble(input));
  }
}

TEST(F4JumbleUnitTest, RoundTrip) {
  {
    std::vector<uint8_t> input = {
        0x5d, 0x7a, 0x8f, 0x73, 0x9a, 0x2d, 0x9e, 0x94, 0x5b, 0x0c, 0xe1, 0x52,
        0xa8, 0x04, 0x9e, 0x29, 0x4c, 0x4d, 0x6e, 0x66, 0xb1, 0x64, 0x93, 0x9d,
        0xaf, 0xfa, 0x2e, 0xf6, 0xee, 0x69, 0x21, 0x48, 0x1c, 0xdd, 0x86, 0xb3,
        0xcc, 0x43, 0x18, 0xd9, 0x61, 0x4f, 0xc8, 0x20, 0x90, 0x5d, 0x04, 0x2b};
    EXPECT_EQ(input, *RevertF4Jumble(*ApplyF4Jumble(input)));
  }

  {
    std::vector<uint8_t> input = {
        0x75, 0x08, 0xa3, 0xa1, 0x46, 0x71, 0x4f, 0x22, 0x9d, 0xb9, 0x1b, 0x54,
        0x3e, 0x24, 0x06, 0x33, 0xed, 0x57, 0x85, 0x3f, 0x64, 0x51, 0xc9, 0xdb,
        0x6d, 0x64, 0xc6, 0xe8, 0x6a, 0xf1, 0xb8, 0x8b, 0x28, 0x70, 0x4f, 0x60,
        0x85, 0x82, 0xc5, 0x3c, 0x51, 0xce, 0x7d, 0x5b, 0x85, 0x48, 0x82, 0x7a,
        0x97, 0x1d, 0x2b, 0x98, 0xd4, 0x1b, 0x7f, 0x62, 0x58, 0x65, 0x59, 0x02,
        0x44, 0x0c, 0xd6, 0x6e, 0xe1, 0x1e, 0x84, 0xdb, 0xfa, 0xc7, 0xd2, 0xa4,
        0x36, 0x96, 0xfd, 0x04, 0x68, 0x81, 0x0a, 0x3d, 0x96, 0x37, 0xc3, 0xfa,
        0x58, 0xe7, 0xd2, 0xd3, 0x41, 0xef, 0x25, 0x0f, 0xa0, 0x9b, 0x9f, 0xb7,
        0x1a, 0x78, 0xa4, 0x1d, 0x38, 0x93, 0x70, 0x13, 0x8a, 0x55, 0xea, 0x58,
        0xfc, 0xde, 0x77, 0x9d, 0x71, 0x4a, 0x04, 0xe0, 0xd3, 0x0e, 0x61, 0xdc,
        0x2d, 0x8b, 0xe0, 0xda, 0x61, 0xcd, 0x68, 0x45, 0x09};
    EXPECT_EQ(input, *RevertF4Jumble(*ApplyF4Jumble(input)));
  }

  {
    std::vector<uint8_t> input(48, 'a');
    input.reserve(1000);
    for (int i = 0; i < 1000 - 48; ++i) {
      input.push_back('a');
      EXPECT_EQ(input, *RevertF4Jumble(*ApplyF4Jumble(input)));
    }
  }
}

}  // namespace brave_wallet
