import("//tools/grit/grit_rule.gni")

# JS / TS imports via `require` or `import` will be added to a list and
# provided to GN so it knows which projects to re-build when you modify a file
# that is used by your build.
# This variable contains additional files that will cause a re-build of all
# WebUI projects if they are modified:
brave_common_web_compile_inputs = [
  # Global Definitions
  # Only add actual globally-available type definitions to this directory,
  # see ../definitions/README.md.
  rebase_path("../definitions/adBlock.d.ts"),
  rebase_path("../definitions/ipfs.d.ts"),
  rebase_path("../definitions/webcompatReporter.d.ts"),
  rebase_path("../definitions/chromel.d.ts"),
  rebase_path("../definitions/global.d.ts"),
  rebase_path("../definitions/newTab.d.ts"),
  rebase_path("../definitions/non-js-loaders.d.ts"),
  rebase_path("../definitions/prettier-bytes.d.ts"),
  rebase_path("../definitions/rewards.d.ts"),
  rebase_path("../definitions/rewardsTip.d.ts"),
  rebase_path("../definitions/rewardsExtensions.d.ts"),
  rebase_path("../definitions/rewardsInternals.d.ts"),
  rebase_path("../definitions/throttleit.d.ts"),
  rebase_path("../definitions/torInternals.d.ts"),
  rebase_path("../definitions/webtorrent.d.ts"),
  rebase_path("../definitions/welcome.d.ts"),

  # webpack config changes warrant a re-build of all webpack builds
  rebase_path("../webpack/webpack.config.js"),
  rebase_path("../webpack/webpack-plugin-depfile.js"),

  # typescript config changes warrant a re-build of all typescript builds
  "//brave/tsconfig.json",

  # modifying npm dependencies warrants a re-build of all webpack
  # and typescript builds
  "//brave/package.json",

  # brave-ui changes (perhaps a manual local link which wouldn't affect
  # //brave/package.json)
  "//brave/node_modules/brave-ui/package.json",
]

# Runs a frontend compiler for the specified entry point(s) and outputs a GRD file
# which includes all the generated files.
#
# Argument:
#   entry_points
#     The root of the dependency tree to start the webpack compilation.
#     Format is an array of 2-member string arrays containing the bundle's
#     output name and the input file, e.g.
#     entry_points = [
#       ["build_output": "pages/myWebPage.js"]
#     ]
#   resource_name
#     Unique name for output which is used for:
#       - output directory part
#       - grd name, e.g. resourcename.grd
#       - intended pak name, e.g. resourcename_generated.pak
#       - generated resource map, e.g. resourcename_generated_map.h
#       - resource ID (e.g. `IDR_RESOURCENAME_MYFILE_JS`)
#   output_dir
#     Optional custom path for compiled output
#   extra_relative_path
#     Extension resource files need to have the same relative path prefix
#     in their GRD as the manifest.json in its (separate) GRD file
#     So we offer an option to put a folder structure in between the GRD
#     and the output directories so that the resource is stored as, e.g.
#     extra/relative/path/myFile.js
#   public_asset_path
#     Support a different URL path to access generated resources at.
#     The default is '/' and we'll want to keep that most of the time,
#     but if we're specifying extra_relative_path then normally a portion of
#     that will need to be involved in the public_asset_path.
#     For extensions, this is the relative path from where the manifest is to
#     where the extra_relative_path ends.
#
template("transpile_web_ui") {
  action(target_name) {
    script = "//brave/script/transpile-web-ui.py"

    # make sure rebuilds when common files change
    inputs = brave_common_web_compile_inputs
    if (defined(invoker.inputs)) {
      inputs += invoker.inputs
    }

    # This depfile will be generated by the build script.
    # We keep it outside the output_dir since we don't want
    # it to be included in the packaged output.
    # The file format is described at:
    # https://ninja-build.org/manual.html#_depfile
    # https://gn.googlesource.com/gn/+/master/docs/reference.md#var_depfile
    # https://chromium.googlesource.com/chromium/src/build/+/HEAD/docs/writing_gn_templates.md#inputs-and-depfiles
    depfile = "${target_gen_dir}/${target_name}.d"

    resource_name = invoker.resource_name

    # Allow target to define custom path
    # (may not be root_gen_dir relative)
    if (defined(invoker.output_dir)) {
      gen_output_dir = invoker.output_dir
    } else {
      gen_output_dir = "$root_gen_dir/brave/web-ui-$resource_name"
    }

    # sole output is a GRD that includes all the resources
    grd_name = "$resource_name.grd"
    outputs = [ "$gen_output_dir/$grd_name" ]

    # Base script arguments:
    #  - resource (compiled) output destination
    #  - GRD summary of output files destination
    #  - unique name to stamp in GRD file
    #  - depfile summary of input files destination
    args = [
      # output_path arg must be relative to root_build_dir so that
      # depfile header format is correct (see docs above).
      "--output_path=" + rebase_path(gen_output_dir, root_build_dir),
      "--root_gen_dir=" + rebase_path(root_gen_dir),
      "--grd_name=$grd_name",
      "--resource_name=$resource_name",
      "--depfile_path=" + rebase_path(depfile),
    ]

    # support multiple entry points and named bundle JS filename
    foreach(entry_point, invoker.entry_points) {
      args += [ "--entry=" + entry_point[0] + "=" + entry_point[1] ]
      inputs += [ entry_point[1] ]
    }

    if (defined(invoker.extra_relative_path)) {
      args += [ "--extra_relative_path=" + invoker.extra_relative_path ]
    }

    if (defined(invoker.public_asset_path)) {
      args += [ "--public_asset_path=" + invoker.public_asset_path ]
    }

    if (is_official_build) {
      args += [ "--production" ]
    }

    forward_variables_from(invoker,
                           [
                             "deps",
                             "public_deps",
                             "testonly",
                             "visibility",
                           ])
  }
}

# Runs grit for a specified GRD file generated from
# a `:transpile_web_ui` target
#
# Argument
#   resource_name
#     Unique name for output which is used for:
#       - grd name, e.g. resourcename.grd
#       - intended pak name, e.g. resourcename_generated.pak
#       - generated resource map, e.g. resourcename_generated_map.h
#       - resource ID (e.g. `IDR_RESOURCENAME_MYFILE_JS`)
#   output_dir
#     Directory in which to place the output .pak file
#   generated_dir
#     Optional custom path for compiled output
#
template("pack_web_resources") {
  grit(target_name) {
    resource_name = invoker.resource_name

    if (defined(invoker.generated_dir)) {
      generated_dir = invoker.generated_dir
    } else {
      generated_dir = "$root_gen_dir/brave/web-ui-$resource_name"
    }
    source = "$generated_dir/$resource_name.grd"
    enable_input_discovery_for_gn_analyze = true

    outputs = [
      "grit/$resource_name" + "_generated.h",
      "grit/$resource_name" + "_generated_map.cc",
      "grit/$resource_name" + "_generated_map.h",
      resource_name + "_generated.pak",
    ]

    grit_flags = [
      "-E",
      "root_gen_dir=" + rebase_path(root_gen_dir, root_build_dir),
    ]

    defines = [ "ROOT_GEN_DIR=" + rebase_path(root_gen_dir, root_build_dir) ]

    output_dir = invoker.output_dir

    resource_ids = "//brave/browser/resources/resource_ids"

    forward_variables_from(invoker,
                           [
                             "deps",
                             "public_deps",
                             "testonly",
                             "visibility",
                           ])
  }
}
