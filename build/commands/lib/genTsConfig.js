// Copyright (c) 2023 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// You can obtain one at https://mozilla.org/MPL/2.0/.

const fs = require('fs-extra')
const path = require('path')
const Config = require('./config')

/**
 * Generates a tsconfig.json file in the gen/ directory
 * so that typescript can import files from cthe current build's
 * gen/ directory (e.g. mojom-generated JS).
 *
 * @param {*} genPath precompiled brave-core gen dir full path
 * @param {*} name name of tsconfig file, e.g. tsconfig-webpack.json
 * @param {*} atPath where to generate the file
 * @param {*} extendsFrom full path of tsconfig to extend
 * @returns full path to created tsconfig file
 */
module.exports = async function createGenTsConfig(genPath = process.env.ROOT_GEN_DIR, name = 'tsconfig-webpack.json', atPath = genPath, extendsFrom = path.join(Config.braveCoreDir, 'tsconfig-webpack.json')) {
  const pathMap = require('../../../components/webpack/path-map')(genPath)
  const configExtendsFrom = path.relative(
    atPath,
    extendsFrom
  )
  const tsConfigPath = path.join(atPath, name)
  // Even though ts-loader will get the paths from webpack for module resolution
  // that does not help some issues where chromium both generates ts definitions
  // and has JSDoc comments for the .m.js file. Sometimes the JSDoc is incorrect
  // whilst the associated .d.ts file has the correct definition. Without specifying
  // the path mapping in the tsconfig.json, Typescript (via ts-loader) will use
  // the JSDoc, and fail with an error. The example that prompted this is cr.sendWithPromise
  // where Typescript will not see that the second parameter is an optional spread param
  // and will fail with an error. Whilst this should be fixed in the chromium source,
  // it's better to be explicit here so that developers get the same experience at
  // both compile and design time.
  const paths = {}
  for (const path in pathMap) {
    paths[path] = [ pathMap[path] ]
    paths[`${path}/*`] = [`${pathMap[path]}/*`]
  }
  const config = {
    extends: configExtendsFrom,
    compilerOptions: {
      paths
    },
    references: [
      {
        // This ts project is generated by //ui/webui/resources:library
        path: path.join(genPath, 'ui/webui/resources/tsconfig.json')
      }
    ]
  }
  await fs.writeFile(tsConfigPath, JSON.stringify(config))
  return tsConfigPath
}
