// Copyright (c) 2025 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// You can obtain one at https://mozilla.org/MPL/2.0/.

const path = require('path')
const config = require('./config')
const fs = require('fs-extra')
const l10nUtil = require('./l10nUtil')
const util = require('./util')
const Log = require('./logging')

exports.update = () => {
  Log.progressStart('update branding')
  const chromeComponentsDir = path.join(config.srcDir, 'components')
  const braveComponentsDir = path.join(config.braveCoreDir, 'components')
  const chromeAppDir = path.join(config.srcDir, 'chrome', 'app')
  const braveAppDir = path.join(config.braveCoreDir, 'app')
  const chromeBrowserResourcesDir = path.join(
    config.srcDir,
    'chrome',
    'browser',
    'resources',
  )
  const braveBrowserResourcesDir = path.join(
    config.braveCoreDir,
    'browser',
    'resources',
  )
  const braveAppVectorIconsDir = path.join(config.braveCoreDir, 'components')
  const chromeAndroidJavaStringsTranslationsDir = path.join(
    config.srcDir,
    'chrome',
    'browser',
    'ui',
    'android',
    'strings',
    'translations',
  )
  const braveAndroidJavaStringsTranslationsDir = path.join(
    config.braveCoreDir,
    'browser',
    'ui',
    'android',
    'strings',
    'translations',
  )
  const chromeAndroidTabUiJavaStringsTranslationsDir = path.join(
    config.srcDir,
    'chrome',
    'android',
    'features',
    'tab_ui',
    'java',
    'strings',
    'translations',
  )
  const braveAndroidTabUiJavaStringsTranslationsDir = path.join(
    config.braveCoreDir,
    'android',
    'features',
    'tab_ui',
    'java',
    'strings',
    'translations',
  )

  let fileMap = new Set()
  const autoGeneratedBraveToChromiumMapping = Object.assign(
    {},
    l10nUtil.getAutoGeneratedBraveToChromiumMapping(),
  )
  // The following 3 entries we map to the same name, not the chromium equivalent name for copying back
  autoGeneratedBraveToChromiumMapping[
    path.join(braveAppDir, 'brave_strings.grd')
  ] = path.join(chromeAppDir, 'brave_strings.grd')
  autoGeneratedBraveToChromiumMapping[
    path.join(braveAppDir, 'settings_brave_strings.grdp')
  ] = path.join(chromeAppDir, 'settings_brave_strings.grdp')
  autoGeneratedBraveToChromiumMapping[
    path.join(braveComponentsDir, 'components_brave_strings.grd')
  ] = path.join(chromeComponentsDir, 'components_brave_strings.grd')

  Object.entries(autoGeneratedBraveToChromiumMapping).forEach((mapping) =>
    fileMap.add(mapping),
  )

  // Copy xtb files for:
  // brave/app/resources/chromium_strings*.xtb
  // brave/app/resources/generated_resoruces*.xtb
  // brave/components/strings/components_chromium_strings*.xtb
  // brave/browser/ui/android/strings/translations/android_chrome_strings*.xtb
  // brave/android/features/tab_ui/java/strings/translations/android_chrome_tab_ui_strings*.xtb
  fileMap.add([
    path.join(braveAppDir, 'resources'),
    path.join(chromeAppDir, 'resources'),
  ])
  fileMap.add([
    path.join(braveComponentsDir, 'strings'),
    path.join(chromeComponentsDir, 'strings'),
  ])
  fileMap.add([
    braveAndroidJavaStringsTranslationsDir,
    chromeAndroidJavaStringsTranslationsDir,
  ])
  fileMap.add([
    braveAndroidTabUiJavaStringsTranslationsDir,
    chromeAndroidTabUiJavaStringsTranslationsDir,
  ])
  // By overwriting, we don't need to modify some grd files.
  fileMap.add([
    path.join(braveAppDir, 'theme', 'brave'),
    path.join(chromeAppDir, 'theme', 'brave'),
  ])
  fileMap.add([
    path.join(braveAppDir, 'theme', 'default_100_percent', 'brave'),
    path.join(chromeAppDir, 'theme', 'default_100_percent', 'brave'),
  ])
  fileMap.add([
    path.join(braveAppDir, 'theme', 'default_200_percent', 'brave'),
    path.join(chromeAppDir, 'theme', 'default_200_percent', 'brave'),
  ])
  fileMap.add([
    path.join(braveAppDir, 'theme', 'default_100_percent', 'common'),
    path.join(chromeAppDir, 'theme', 'default_100_percent', 'common'),
  ])
  fileMap.add([
    path.join(braveAppDir, 'theme', 'default_200_percent', 'common'),
    path.join(chromeAppDir, 'theme', 'default_200_percent', 'common'),
  ])
  fileMap.add([
    path.join(braveComponentsDir, 'resources', 'default_100_percent'),
    path.join(chromeComponentsDir, 'resources', 'default_100_percent'),
  ])
  fileMap.add([
    path.join(braveComponentsDir, 'resources', 'default_100_percent', 'brave'),
    path.join(
      chromeComponentsDir,
      'resources',
      'default_100_percent',
      'chromium',
    ),
  ])
  fileMap.add([
    path.join(braveComponentsDir, 'resources', 'default_200_percent'),
    path.join(chromeComponentsDir, 'resources', 'default_200_percent'),
  ])
  fileMap.add([
    path.join(braveComponentsDir, 'resources', 'default_200_percent', 'brave'),
    path.join(
      chromeComponentsDir,
      'resources',
      'default_200_percent',
      'chromium',
    ),
  ])
  fileMap.add([
    path.join(braveAppVectorIconsDir, 'vector_icons', 'brave'),
    path.join(chromeComponentsDir, 'vector_icons', 'brave'),
  ])
  // Copy chrome-logo-faded.png for replacing chrome logo of welcome page with brave's on Win8.
  fileMap.add([
    path.join(braveBrowserResourcesDir, 'chrome-logo-faded.png'),
    path.join(chromeBrowserResourcesDir, 'chrome-logo-faded.png'),
  ])
  fileMap.add([
    path.join(
      braveBrowserResourcesDir,
      'downloads',
      'images',
      'incognito_marker.svg',
    ),
    path.join(
      chromeBrowserResourcesDir,
      'downloads',
      'images',
      'incognito_marker.svg',
    ),
  ])
  fileMap.add([
    path.join(braveBrowserResourcesDir, 'settings', 'images'),
    path.join(chromeBrowserResourcesDir, 'settings', 'images'),
  ])
  fileMap.add([
    path.join(braveBrowserResourcesDir, 'signin', 'images'),
    path.join(chromeBrowserResourcesDir, 'signin', 'images'),
  ])
  fileMap.add([
    path.join(
      braveBrowserResourcesDir,
      'signin',
      'profile_customization',
      'images',
    ),
    path.join(
      chromeBrowserResourcesDir,
      'signin',
      'profile_customization',
      'images',
    ),
  ])
  fileMap.add([
    path.join(braveBrowserResourcesDir, 'signin', 'profile_picker', 'images'),
    path.join(chromeBrowserResourcesDir, 'signin', 'profile_picker', 'images'),
  ])
  fileMap.add([
    path.join(braveBrowserResourcesDir, 'side_panel', 'reading_list', 'images'),
    path.join(
      chromeBrowserResourcesDir,
      'side_panel',
      'reading_list',
      'images',
    ),
  ])

  // Copy to make our ${branding_path_product}_behaviors.cc
  fileMap.add([
    path.join(
      config.braveCoreDir,
      'chromium_src',
      'chrome',
      'installer',
      'setup',
      'brave_behaviors.cc',
    ),
    path.join(
      config.srcDir,
      'chrome',
      'installer',
      'setup',
      'brave_behaviors.cc',
    ),
  ])
  // Replace webui CSS to use our fonts.
  fileMap.add([
    path.join(
      config.braveCoreDir,
      'ui',
      'webui',
      'resources',
      'css',
      'text_defaults_md.css',
    ),
    path.join(
      config.srcDir,
      'ui',
      'webui',
      'resources',
      'css',
      'text_defaults_md.css',
    ),
  ])
  // Replace chrome dark logo with channel specific brave logo.
  fileMap.add([
    path.join(
      config.braveCoreDir,
      'node_modules',
      '@brave',
      'leo',
      'icons',
      config.getBraveLogoIconName(),
    ),
    path.join(
      config.srcDir,
      'ui',
      'webui',
      'resources',
      'images',
      'chrome_logo_dark.svg',
    ),
  ])
  // Replace webui bookmark svg icon.
  fileMap.add([
    path.join(
      config.braveCoreDir,
      'node_modules',
      '@brave',
      'leo',
      'icons',
      'browser-bookmark-normal.svg',
    ),
    path.join(
      config.srcDir,
      'ui',
      'webui',
      'resources',
      'images',
      'icon_bookmark.svg',
    ),
  ])

  let explicitSourceFiles = new Set()
  if (config.getTargetOS() === 'mac') {
    // Set proper mac app icon for channel to chrome/app/theme/mac/app.icns.
    // Each channel's app icons are stored in brave/app/theme/$channel/app.icns.
    // With this copying, we don't need to modify chrome/BUILD.gn for this.
    const iconSource = path.join(
      braveAppDir,
      'theme',
      'brave',
      'mac',
      config.channel,
      'app.icns',
    )
    const iconDest = path.join(
      chromeAppDir,
      'theme',
      'brave',
      'mac',
      'app.icns',
    )
    explicitSourceFiles[iconDest] = iconSource

    // Set proper branding file.
    let brandingFileName = 'BRANDING'
    if (config.channel)
      brandingFileName = brandingFileName + '.' + config.channel
    const brandingSource = path.join(
      braveAppDir,
      'theme',
      'brave',
      brandingFileName,
    )
    const brandingDest = path.join(chromeAppDir, 'theme', 'brave', 'BRANDING')
    explicitSourceFiles[brandingDest] = brandingSource
  }

  for (const [source, output] of fileMap) {
    if (!fs.existsSync(source)) {
      console.warn(
        `Warning: The following file-system entry was not found for copying contents to a chromium destination: ${source}. Consider removing the entry from the file-map, or investigating whether the correct source code reference is checked out.`,
      )
      continue
    }

    let sourceFiles = []

    // get all the files if source if a directory
    if (fs.statSync(source).isDirectory()) {
      sourceFiles = util.walkSync(source)
    } else {
      sourceFiles = [source]
    }

    for (let sourceFile of sourceFiles) {
      const destinationFile = path.join(
        output,
        path.relative(source, sourceFile),
      )
      sourceFile = explicitSourceFiles[destinationFile] || sourceFile
      if (
        !fs.existsSync(destinationFile)
        || util.calculateFileChecksum(sourceFile)
          !== util.calculateFileChecksum(destinationFile)
      ) {
        fs.copySync(sourceFile, destinationFile)
        console.log(sourceFile + ' copied to ' + destinationFile)
      }
    }
  }

  if (config.targetOS === 'android') {
    let braveOverwrittenFiles = new Set()
    const removeUnlistedAndroidResources = (braveOverwrittenFiles) => {
      const suspectedDir = path.join(
        config.srcDir,
        'chrome',
        'android',
        'java',
        'res',
      )

      let untrackedChromiumFiles = util
        .runGit(
          suspectedDir,
          ['ls-files', '--others', '--exclude-standard'],
          true,
        )
        .split('\n')
      let untrackedChromiumPaths = []
      for (const untrackedChromiumFile of untrackedChromiumFiles) {
        untrackedChromiumPath = path.join(suspectedDir, untrackedChromiumFile)

        if (!fs.statSync(untrackedChromiumPath).isDirectory()) {
          untrackedChromiumPaths.push(untrackedChromiumPath)
        }
      }

      const isChildOf = (child, parent) => {
        const relative = path.relative(parent, child)
        return (
          relative && !relative.startsWith('..') && !path.isAbsolute(relative)
        )
      }

      for (const untrackedChromiumPath of untrackedChromiumPaths) {
        if (
          isChildOf(untrackedChromiumPath, suspectedDir)
          && !braveOverwrittenFiles.has(untrackedChromiumPath)
        ) {
          fs.removeSync(untrackedChromiumPath)
          console.log(`Deleted not listed file: ${untrackedChromiumPath}`)
        }
      }
    }

    let androidIconSet = ''
    if (config.channel === 'development') {
      androidIconSet = 'res_brave_default'
    } else if (config.channel === '') {
      androidIconSet = 'res_brave'
    } else if (config.channel === 'beta') {
      androidIconSet = 'res_brave_beta'
    } else if (config.channel === 'dev') {
      androidIconSet = 'res_brave_dev'
    } else if (config.channel === 'nightly') {
      androidIconSet = 'res_brave_nightly'
    }

    const androidTranslateResSource = path.join(
      config.braveCoreDir,
      'components',
      'translate',
      'content',
      'android',
      'java',
      'res',
    )
    const androidTranslateResDest = path.join(
      config.srcDir,
      'components',
      'translate',
      'content',
      'android',
      'java',
      'res',
    )
    const androidIconSource = path.join(
      braveAppDir,
      'theme',
      'brave',
      'android',
      androidIconSet,
    )
    const androidIconDest = path.join(
      config.srcDir,
      'chrome',
      'android',
      'java',
      'res_chromium',
    )
    const androidIconBaseSource = path.join(
      braveAppDir,
      'theme',
      'brave',
      'android',
      androidIconSet + '_base',
    )
    const androidIconBaseDest = path.join(
      config.srcDir,
      'chrome',
      'android',
      'java',
      'res_chromium_base',
    )
    const androidResSource = path.join(
      config.braveCoreDir,
      'android',
      'java',
      'res',
    )
    const androidResDest = path.join(
      config.srcDir,
      'chrome',
      'android',
      'java',
      'res',
    )
    const androidResTemplateSource = path.join(
      config.braveCoreDir,
      'android',
      'java',
      'res_template',
    )
    const androidResTemplateDest = path.join(
      config.srcDir,
      'chrome',
      'android',
      'java',
      'res_template',
    )
    const androidContentPublicResSource = path.join(
      config.braveCoreDir,
      'content',
      'public',
      'android',
      'java',
      'res',
    )
    const androidContentPublicResDest = path.join(
      config.srcDir,
      'content',
      'public',
      'android',
      'java',
      'res',
    )
    const androidTouchtoFillResSource = path.join(
      config.braveCoreDir,
      'browser',
      'touch_to_fill',
      'password_manager',
      'android',
      'internal',
      'java',
      'res',
    )
    const androidTouchtoFillResDest = path.join(
      config.srcDir,
      'chrome',
      'browser',
      'touch_to_fill',
      'password_manager',
      'android',
      'internal',
      'java',
      'res',
    )
    const androidToolbarResSource = path.join(
      config.braveCoreDir,
      'browser',
      'ui',
      'android',
      'toolbar',
      'java',
      'res',
    )
    const androidToolbarResDest = path.join(
      config.srcDir,
      'chrome',
      'browser',
      'ui',
      'android',
      'toolbar',
      'java',
      'res',
    )
    const androidComponentsWidgetResSource = path.join(
      config.braveCoreDir,
      'components',
      'browser_ui',
      'widget',
      'android',
      'java',
      'res',
    )
    const androidComponentsWidgetResDest = path.join(
      config.srcDir,
      'components',
      'browser_ui',
      'widget',
      'android',
      'java',
      'res',
    )
    const androidComponentsStylesResSource = path.join(
      config.braveCoreDir,
      'components',
      'browser_ui',
      'styles',
      'android',
      'java',
      'res',
    )
    const androidComponentsStylesResDest = path.join(
      config.srcDir,
      'components',
      'browser_ui',
      'styles',
      'android',
      'java',
      'res',
    )
    const androidSafeBrowsingResSource = path.join(
      config.braveCoreDir,
      'browser',
      'safe_browsing',
      'android',
      'java',
      'res',
    )
    const androidSafeBrowsingResDest = path.join(
      config.srcDir,
      'chrome',
      'browser',
      'safe_browsing',
      'android',
      'java',
      'res',
    )
    const androidDownloadInternalResSource = path.join(
      config.braveCoreDir,
      'browser',
      'download',
      'internal',
      'android',
      'java',
      'res',
    )
    const androidDownloadInternalResDest = path.join(
      config.srcDir,
      'chrome',
      'browser',
      'download',
      'internal',
      'android',
      'java',
      'res',
    )
    const androidFeaturesTabUiResSource = path.join(
      config.braveCoreDir,
      'android',
      'features',
      'tab_ui',
      'java',
      'res',
    )
    const androidFeaturesTabUiDest = path.join(
      config.srcDir,
      'chrome',
      'android',
      'features',
      'tab_ui',
      'java',
      'res',
    )
    const androidComponentsOmniboxResSource = path.join(
      config.braveCoreDir,
      'components',
      'omnibox',
      'browser',
      'android',
      'java',
      'res',
    )
    const androidComponentsOmniboxResDest = path.join(
      config.srcDir,
      'components',
      'omnibox',
      'browser',
      'android',
      'java',
      'res',
    )
    const androidBrowserUiOmniboxResSource = path.join(
      config.braveCoreDir,
      'browser',
      'ui',
      'android',
      'omnibox',
      'java',
      'brave_res',
    )
    const androidBrowserUiOmniboxResDest = path.join(
      config.srcDir,
      'chrome',
      'browser',
      'ui',
      'android',
      'omnibox',
      'java',
      'res',
    )
    const androidBrowserPrivateResSource = path.join(
      config.braveCoreDir,
      'browser',
      'incognito',
      'android',
      'java',
      'res',
    )
    const androidBrowserPrivateResDest = path.join(
      config.srcDir,
      'chrome',
      'browser',
      'incognito',
      'android',
      'java',
      'res',
    )
    const androidBrowserHubInternalResSource = path.join(
      config.braveCoreDir,
      'browser',
      'hub',
      'internal',
      'android',
      'res',
    )
    const androidBrowserHubInternalResDest = path.join(
      config.srcDir,
      'chrome',
      'browser',
      'hub',
      'internal',
      'android',
      'res',
    )

    const uiAndroidResSource = path.join(
      config.braveCoreDir,
      'ui',
      'android',
      'java',
      'res',
    )
    const uiAndroidResDest = path.join(
      config.srcDir,
      'ui',
      'android',
      'java',
      'res',
    )

    // Mapping for copying Brave's Android resource into chromium folder.
    const copyAndroidResourceMapping = {
      [androidTranslateResSource]: [androidTranslateResDest],
      [androidIconSource]: [androidIconDest],
      [androidIconBaseSource]: [androidIconBaseDest],
      [androidResSource]: [androidResDest],
      [androidResTemplateSource]: [androidResTemplateDest],
      [androidContentPublicResSource]: [androidContentPublicResDest],
      [androidTouchtoFillResSource]: [androidTouchtoFillResDest],
      [androidToolbarResSource]: [androidToolbarResDest],
      [androidComponentsWidgetResSource]: [androidComponentsWidgetResDest],
      [androidComponentsStylesResSource]: [androidComponentsStylesResDest],
      [androidSafeBrowsingResSource]: [androidSafeBrowsingResDest],
      [androidDownloadInternalResSource]: [androidDownloadInternalResDest],
      [androidFeaturesTabUiResSource]: [androidFeaturesTabUiDest],
      [androidComponentsOmniboxResSource]: [androidComponentsOmniboxResDest],
      [androidBrowserUiOmniboxResSource]: [androidBrowserUiOmniboxResDest],
      [androidBrowserPrivateResSource]: [androidBrowserPrivateResDest],
      [androidBrowserHubInternalResSource]: [androidBrowserHubInternalResDest],
      [uiAndroidResSource]: [uiAndroidResDest],
    }

    console.log('copy Android app icons and app resources')
    Object.entries(copyAndroidResourceMapping).map(
      ([sourcePath, destPaths]) => {
        let androidSourceFiles = []
        if (fs.statSync(sourcePath).isDirectory()) {
          androidSourceFiles = util.walkSync(sourcePath)
        } else {
          androidSourceFiles = [sourcePath]
        }

        for (const destPath of destPaths) {
          for (const androidSourceFile of androidSourceFiles) {
            let destinationFile = path.join(
              destPath,
              path.relative(sourcePath, androidSourceFile),
            )
            if (
              !fs.existsSync(destinationFile)
              || util.calculateFileChecksum(androidSourceFile)
                !== util.calculateFileChecksum(destinationFile)
            ) {
              fs.copySync(androidSourceFile, destinationFile)
            }
            braveOverwrittenFiles.add(destinationFile)
          }
        }
      },
    )
    removeUnlistedAndroidResources(braveOverwrittenFiles)
  }
  Log.progressFinish('update branding')
}
