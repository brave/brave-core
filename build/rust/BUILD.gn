# Copyright (c) 2022 The Brave Authors. All rights reserved.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at https://mozilla.org/MPL/2.0/.

import("//brave/build/cargo.gni")

if (is_mac) {
  import("//build/config/mac/mac_sdk.gni")
}

if (is_apple) {
  unexport_list_path = "$root_build_dir/brave_rust/rust_lib.unexports"
}

config("strip_rust_symbols") {
  # should match verify_chrome_framework_order
  if (is_apple && !is_component_build && chrome_pgo_phase != 1 &&
      !using_sanitizer) {
    ldflags = [
      # prevent export of all rust symbols
      "-Wl,-unexported_symbols_list," +
          rebase_path(unexport_list_path, root_build_dir),
    ]
  }
}

cargo_build("rust_lib") {
  visibility = [ ":*" ]
  inputs = [
    "Cargo.lock",
    "Cargo.toml",
    "lib.rs",
  ]

  manifest_path = "Cargo.toml"

  # ensure that we rebuild when the dependent crates change
  # TODO(bridiver) - selectively include these libraries based on buildflags,
  # but in order to do that we have to dynamically create the brave rust lib
  deps = [
    "//brave/components/adblock_rust_ffi:rust_lib",
    "//brave/components/brave_today/rust:rust_lib",
    "//brave/components/brave_wallet/rust:rust_lib",
    "//brave/components/challenge_bypass_ristretto:rust_lib",
    "//brave/components/filecoin:rust_lib",
    "//brave/components/json:rust_lib",
    "//brave/components/skus/browser/rs:rust_lib",
    "//brave/components/speedreader/rust/lib",
  ]
}

if (is_apple) {
  action("generate_unexport_list") {
    script = "//brave/build/rust/generate_unexport_list.py"

    inputs = [
      "//brave/build/rust/generate_unexport_list.py",
      rust_lib_output_path,
    ]

    outputs = [ unexport_list_path ]

    args = [
      "--bin_path=" + rebase_path(clang_base_path) + "/bin",
      "--input=" + rebase_path(rust_lib_output_path, root_build_dir),
      "--output=" + rebase_path(unexport_list_path, root_build_dir),
    ]

    deps = [ ":rust_lib" ]
  }
}

# The required config for cxx-generated bindings because Chromium C++ is built
# with -fno-exceptions.
config("cxx_cppconfig") {
  defines = [ "RUST_CXX_NO_EXCEPTIONS" ]
}

# The required dependencies for cxx-generated bindings, that must be included
# on the C++ side.
static_library("cxx_cppdeps") {
  sources = [
    "//build/rust/std/immediate_crash.h",
    "//build/rust/std/remap_alloc.cc",
    "//third_party/rust/cxx/v1/crate/include/cxx.h",
    "//third_party/rust/cxx/v1/crate/src/cxx.cc",
  ]
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
  public_configs = [ ":cxx_cppconfig" ]
}
