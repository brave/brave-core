import("//brave/build/cargo.gni")

lib_build_path = "$root_build_dir/brave_rust/out/$current_cpu"
lib_output_path =
    "$lib_build_path/${cargo_lib_prefix}brave_rust${cargo_lib_suffix}"

# TODO(bridiver) - selectively include these libraries based on buildflags, but
# in order to do that we have to dynamically create the brave rust lib
cargo_build("rust_lib") {
  visibility = [ ":*" ]
  inputs = [
    "Cargo.toml",
    "lib.rs",
  ]

  build_path = lib_build_path
  output = lib_output_path
  manifest_path = "Cargo.toml"

  deps = [
    "//brave/components/adblock_rust_ffi:rust_lib",
    "//brave/components/challenge_bypass_ristretto:rust_lib",
    "//brave/components/speedreader/rust/lib",
  ]
}

brave_ffi_deps = [
  "//brave/components/adblock_rust_ffi:rust_ffi",
  "//brave/components/challenge_bypass_ristretto:rust_ffi",
  "//brave/components/speedreader/rust/ffi:rust_ffi",
]

brave_rust_deps = brave_ffi_deps + [ ":rust_lib" ]

# The required config for cxx-generated bindings because Chromium C++ is built
# with -fno-exceptions.
config("cxx_cppconfig") {
  defines = [ "RUST_CXX_NO_EXCEPTIONS" ]
}

# The required dependencies for cxx-generated bindings, that must be included
# on the C++ side.
source_set("cxx_cppdeps") {
  sources = [
    "//brave/third_party/rust/cxx/include/cxx.h",
    "//brave/third_party/rust/cxx/src/cxx.cc",
  ]
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
  public_configs = [ ":cxx_cppconfig" ]
}

config("external_config") {
  libs = [ lib_output_path ]
}

group("rust") {
  public_configs = [ ":external_config" ]
  deps = brave_rust_deps
  public_deps = brave_ffi_deps
}
