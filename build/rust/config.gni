# Copyright 2020 The Brave Authors. All rights reserved.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/. */

import("//build/config/compiler/compiler.gni")
import("//build/config/ios/config.gni")
import("//build/config/rust.gni")
import("//build/config/sysroot.gni")

unexport_list_path = "$root_build_dir/brave_rust/rust_lib.unexports"

rustc_target = ""
rustc_toolchain = ""
cargo_lib_prefix = ""
cargo_lib_suffix = ""

# Rust compiler flags setup.
# ---------------------------
rustflags = [
  # Overflow checks are optional in Rust, but even if switched
  # off they do not cause undefined behavior (the overflowing
  # behavior is defined). Because containers are bounds-checked
  # in safe Rust, they also can't provoke buffer overflows.
  # As such these checks may be less important in Rust than C++.
  # But in (simplistic) testing they have negligible performance
  # overhead, and this helps to provide consistent behavior
  # between different configurations, so we'll keep them on until
  # we discover a reason to turn them off.
  "-Coverflow-checks=on",
]
if (use_lto_in_rustc_linking) {
  rustflags += [ "-Clinker-plugin-lto" ]
}
if (!use_thin_lto) {
  # Optimization - don't include bitcode if it won't be used.
  rustflags += [ "-Cembed-bitcode=no" ]
}

if (optimize_for_size) {
  rustflags += [ "-Copt-level=s" ]
} else {
  rustflags += [ "-Copt-level=3" ]
}

if (symbol_level == 1) {
  rustflags += [ "-Cdebuginfo=1" ]
}

if (symbol_level == 2) {
  rustflags += [ "-g" ]
}

# See https://forge.rust-lang.org/release/platform-support.html for possible targets
if (is_win) {
  if (current_cpu == "x86") {
    rustflags += [ "--codegen target-feature=+crt-static" ]
    rustc_target = "i686-pc-windows-msvc"
  } else if (current_cpu == "x64") {
    rustc_target = "x86_64-pc-windows-msvc"
  }
} else if (is_mac) {
  if (current_cpu == "x64") {
    rustc_target = "x86_64-apple-darwin"
  } else if (current_cpu == "arm64") {
    rustc_target = "aarch64-apple-darwin"
  }
} else if (is_linux) {
  if (current_cpu == "x64") {
    rustc_target = "x86_64-unknown-linux-gnu"
    if (use_sysroot) {
      rustflags += [ "-C link-arg=--sysroot=$target_sysroot" ]
      rustflags += [ "-C link-arg=-Wl,-rpath=\$ORIGIN" ]
    }
  }
} else if (is_android) {
  if (current_cpu == "arm") {
    rustc_target = "arm-linux-androideabi"
    rustc_toolchain = "arm"
  } else if (current_cpu == "arm64") {
    rustc_target = "aarch64-linux-android"
    rustc_toolchain = "arm64"
  } else if (current_cpu == "x86") {
    rustc_target = "i686-linux-android"
    rustc_toolchain = "x86"
  } else if (current_cpu == "x64") {
    rustc_target = "x86_64-linux-android"
    rustc_toolchain = "x86_64"
  }
} else if (is_ios) {
  if (current_cpu == "arm64") {
    if (target_environment == "simulator") {
      rustc_target = "aarch64-apple-ios-sim"
    } else {
      rustc_target = "aarch64-apple-ios"
    }
  } else if (current_cpu == "x64") {
    rustc_target = "x86_64-apple-ios"
  }
}

cargo_lib_prefix = ""

if (rustc_target != "") {
  cargo_lib_prefix += rustc_target
}

if (is_debug) {
  cargo_lib_prefix += "/debug"
} else {
  cargo_lib_prefix += "/release"
}

cargo_lib_suffix = ""
if (is_win) {
  cargo_lib_prefix += "/"
  cargo_lib_suffix = ".lib"
} else {
  cargo_lib_prefix += "/lib"
  cargo_lib_suffix = ".a"
}
