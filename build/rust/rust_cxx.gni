# Copyright 2021 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//brave/build/cargo.gni")

set_defaults("rust_cxx") {
  native_header_deps = []
}

# Template to build Rust/C++ bindings using the tooling
# described at https://cxx.rs.
#
# (Specifically, this builds the C++ side of the bindings.
# The Rust side of the bindings are not 'built' as such, but
# automatically expanded by the Rust compiler by virtue of a
# proc macro which is a simple dependency relationship on the
# Rust target).
#
# This template expands to a source_set containing the
# C++ side of the bindings. Simply treat it as a dependency.
#
# If you're using this, consider whether you should be using
# rust_source_set.gni or mixed_source_set.gni which have
# facilities to do the same code generation in an easier
# way.
#
# Parameters:
#
# inputs:
#   The .rs files containing a #[cxx::bridge] section.
#
# native_header_deps (optional)
#   C++ targets on which the headers depend in order to build
#   successfully.
#
# Consumers of this template may alternatively depend upon
# the :${target_name}_gen target if you wish to include
# the generated source code in an *existing* source set.
# To do this:
# * depend on the target name with a _gen suffix;
# * for each of the inputs, include in your sources:
#     file_name.rs.h
#     file_name.rs.cc
# * ensure you also depend upon //build/rust:cxx_cppdeps
#
# A good way to get the file names is:
#   process_file_template(list-of-bindings-rs-files,
#       [ "{{source_gen_dir}}/{{source_file_part}}.h",
#         "{{source_gen_dir}}/{{source_file_part}}.cc" ]
#
# You might want to depend on this template in this mode if
# you have an existing source_set which is referred to
# using 'visibility' rules throughout the codebase.
#
template("rust_cxx") {
  assert(defined(invoker.input), "Must specify the Rust file to use as input.")
  action_foreach("${target_name}_gen") {
    sources = invoker.input

    output_h = "{{source_gen_dir}}/{{source_file_part}}.h"
    output_cc = "{{source_gen_dir}}/{{source_file_part}}.cc"

    script = "//brave/build/rust/run_cxxbridge.py"
    inputs = [ script ]
    outputs = [
      output_h,
      output_cc,
    ]

    args = [
      "--cargo_path=" + rustup_path,
      "--header",
      output_h,
      "--cc",
      output_cc,
      "{{source}}",
    ]

    # Anyone building the header files we generate needs to have
    # RUST_CXX_NO_EXCEPTIONS defined so that they build without
    # exception support.
    public_configs = [ "//brave/build/rust:cxx_cppconfig" ]
  }

  rust_ffi(target_name) {
    sources = get_target_outputs(":${target_name}_gen")
    deps = [ "//brave/build/rust:cxx_cppdeps" ]
    deps += invoker.native_header_deps
    public_deps = [ ":${target_name}_gen" ]
  }
}
