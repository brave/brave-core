import("//brave/build/config.gni")
import("//build/config/mac/base_rules.gni")

declare_args() {
  # find with `security find-identity -v -p codesigning`
  mac_signing_identifier = ""
  mac_installer_signing_identifier = ""
  mac_signing_keychain = "login"
  mac_signing_output_prefix = "signing"
}

_packaging_dir = "$root_out_dir/$chrome_product_full_name Packaging"
keychain_db = getenv("HOME") + "/Library/Keychains/${mac_signing_keychain}.keychain-db"

_target_app_path = "$root_out_dir/$mac_signing_output_prefix/$brave_exe"

group("brave") {}

action("sign_app") {
  brave_app = "$root_build_dir/$brave_exe"

  script = "//build/gn_run_binary.py"
  shell_script = "//brave/build/mac/sign_app.sh"

  deps = [
    "//brave:chrome_app",
    "//chrome/installer/mac"
  ]

  if (is_official_build) {
    if (brave_channel == "") {
      provisioning_profile = "//brave/build/mac/release.provisionprofile"
    } else {
      provisioning_profile = "//brave/build/mac/${brave_channel}.provisionprofile"
    }
  } else {
    # an empty dummy file just to simplify things
    provisioning_profile = "//brave/build/mac/dummy.provisionprofile"
  }
  inputs = [
    shell_script,
    brave_app,
    provisioning_profile,
    "$_packaging_dir/sign_app.sh",
    "$_packaging_dir/sign_versioned_dir.sh",
    "$_packaging_dir/app-entitlements.plist",
  ]
  outputs = [ _target_app_path ]
  args = [
    rebase_path(shell_script, root_out_dir),

    # Use absolute paths needed by codesign
    rebase_path(brave_app),
    rebase_path(_target_app_path),
    rebase_path(_packaging_dir),
    keychain_db,
    mac_signing_identifier,
    rebase_path(provisioning_profile, root_out_dir),
    rebase_path("$_packaging_dir/app-entitlements.plist"),
  ]

  if (!is_official_build) {
    args += [ "--development" ]
  }
}

action("create_pkg") {
  output = "$root_out_dir/unsigned/$brave_pkg"
  script = "//build/gn_run_binary.py"
  shell_script = "//brave/build/mac/create_pkg.sh"
  inputs = [
    script,
    shell_script,
  ]
  outputs = [ output ]
  args = [
    rebase_path(shell_script, root_build_dir),
    rebase_path(_target_app_path, root_build_dir),
    rebase_path("//brave/build/mac/pkg-scripts"),
    rebase_path("$root_out_dir/Brave Browser Component.plist"),
    "unsigned/$brave_pkg",
  ]

  deps = [":sign_app"]
}

action("sign_pkg") {
  script = "//build/gn_run_binary.py"
  shell_script = "sign_pkg.sh"
  inputs = [
    script,
    shell_script,
    "$root_out_dir/unsigned/$brave_pkg",
  ]
  outputs = [ "${root_out_dir}/$mac_signing_output_prefix/$brave_pkg" ]
  args = [
    rebase_path(shell_script, root_build_dir),
    rebase_path("$root_out_dir/unsigned/$brave_pkg"),
    rebase_path("$root_out_dir/$brave_pkg"),
    keychain_db,
    mac_installer_signing_identifier,
  ]

  deps = [":create_pkg"]
}

action("create_dmg") {
  output = "$root_out_dir/unsigned/$brave_dmg"
  script = "//build/gn_run_binary.py"
  shell_script = "//chrome/installer/mac/pkg-dmg"
  inputs = [
    script,
    shell_script,
  ]
  outputs = [ output ]
  args = [
    rebase_path(shell_script, root_build_dir),
    "--source", "/var/empty",
    "--target", "unsigned/$brave_dmg",
    "--format", "UDBZ",
    "--verbosity", "0",
    "--volname", "$chrome_product_full_name",
    "--copy", rebase_path(_target_app_path, root_build_dir),
    "--tempdir", "/tmp",
    "--symlink", "/Applications",
  ]

  deps = [":sign_app"]
}

action("create_unsigned_dmg") {
  brave_app = "$root_build_dir/$brave_exe"
  output = "$root_out_dir/unsigned_dmg/$brave_dmg"
  script = "//build/gn_run_binary.py"
  shell_script = "//chrome/installer/mac/pkg-dmg"
  inputs = [
    script,
    shell_script,
  ]
  outputs = [ output ]
  args = [
    rebase_path(shell_script, root_build_dir),
    "--source", "/var/empty",
    "--target", "unsigned_dmg/$brave_dmg",
    "--format", "UDBZ",
    "--verbosity", "0",
    "--volname", "$chrome_product_full_name",
    "--copy", rebase_path(brave_app, root_build_dir),
    "--tempdir", "/tmp",
    "--symlink", "/Applications",
  ]

  deps = [
    "//brave:chrome_app",
    "//chrome/installer/mac"
  ]
}

action("sign_dmg") {
  script = "//build/gn_run_binary.py"
  shell_script = "sign_dmg.sh"
  inputs = [
    script,
    shell_script,
    "$root_out_dir/unsigned/$brave_dmg",
  ]
  outputs = [ "${root_out_dir}/$mac_signing_output_prefix/$brave_dmg" ]
  args = [
    rebase_path(shell_script, root_build_dir),
    rebase_path("$root_out_dir/unsigned/$brave_dmg"),
    rebase_path("$root_out_dir/$brave_dmg"),
    keychain_db,
    mac_signing_identifier,
    "-r=designated => identifier \"$chrome_product_full_name\" and certificate leaf = H\"$mac_signing_identifier\"",
  ]

  deps = [":create_dmg"]
}

group("create_dist_mac") {
  deps = [ ":create_dmg" ]

  deps += [
    ":sign_app",
    ":sign_dmg",
  ]
}
