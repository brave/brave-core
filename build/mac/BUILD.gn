# Copyright (c) 2024 The Brave Authors. All rights reserved.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at https://mozilla.org/MPL/2.0/.

import("//brave/build/config.gni")
import("//brave/build/mac/config.gni")
import("//brave/updater/config.gni")
import("//build/util/branding.gni")
import("//chrome/common/features.gni")
import("//chrome/updater/branding.gni")
import("//chrome/version.gni")
import("//components/crx_file/crx3.gni")
import("//third_party/widevine/cdm/widevine.gni")

packaging_dir = "$brave_packaging_base_dir/" +
                string_replace("$chrome_product_full_name Packaging", " ", "_")

unsigned_app_path = "$root_out_dir/$brave_exe"
if (is_universal_binary) {
  arm64_arch_app_path = unsigned_app_path
  x64_arch_app_path = "$root_out_dir/x64/$brave_exe"
  unsigned_app_path = "$brave_packaging_base_dir/$brave_exe"
}

if (skip_signing) {
unsigned_dmg_path = "$root_out_dir/$mac_unsigned_output_prefix/$brave_dmg"
unsigned_pkg_path = "$root_out_dir/$mac_unsigned_output_prefix/$brave_pkg"
}

signed_output_dir = "$root_out_dir/$mac_signed_output_prefix"

signed_app_path = "$signed_output_dir/$brave_channel/$brave_exe"
if (is_release_channel) {
  signed_app_path = "$signed_output_dir/stable/$brave_exe"
}


if (!skip_signing) {
signed_dmg_path = "$signed_output_dir/$brave_dmg"
signed_pkg_path = "$signed_output_dir/$brave_pkg"
}

app_path = signed_app_path
if (skip_signing) {
  app_path = unsigned_app_path
}


if (notarize) {
notarized_dmg_path = "$root_out_dir/$mac_notarized_output_prefix/$brave_dmg"
notarized_pkg_path = "$root_out_dir/$mac_notarized_output_prefix/$brave_pkg"
}

target_dmg_path = "$root_out_dir/$brave_dmg"

if (is_universal_binary) {
  action("universalize") {
    script = "//chrome/installer/mac/universalizer.py"

    args = [
      rebase_path(arm64_arch_app_path),
      rebase_path(x64_arch_app_path),
      rebase_path(unsigned_app_path),
    ]

    inputs = [
      script,
      arm64_arch_app_path,
      x64_arch_app_path,
    ]

    outputs = [ unsigned_app_path ]

    public_deps = [
      ":copy_x64",
      "//chrome:chrome_app",
    ]
  }

  # placeholder script to allow manual copying of binary into output dir
  action("copy_x64") {
    script = "//brave/installer/mac/copy_x64_binary.py"

    x64_root_out_dir = string_replace(root_out_dir, "_arm64", "")
    x64_arch_src_path = "$x64_root_out_dir/$brave_exe"

    args = [
      rebase_path(x64_arch_src_path),
      rebase_path(x64_arch_app_path),
    ]

    inputs = [
      script,
      x64_arch_src_path,
    ]

    outputs = [ x64_arch_app_path ]
  }
} else {
  group("universalize") {
    public_deps = [ "//chrome:chrome_app" ]
  }
}

group("brave") {
  exe_path = "$app_path/Contents/MacOS/$chrome_product_full_name"
  write_file("$root_out_dir/brave_helper",
             [ string_replace(rebase_path(exe_path), " ", "\\ ") ])
}

ds_store_file_name = "DS_Store"
dmg_icon_file_name = "dmg"

if (!is_release_channel) {
  ds_store_file_name = "DS_Store.$brave_channel"
  dmg_icon_file_name = "dmg-$brave_channel"
}

action("generate_dsa_sig_for_dmg") {
  script = "generate_sig.py"

  if (build_sparkle) {
    sign_update_path = "$root_out_dir/old_dsa_scripts/sign_update"
  } else {
    sign_update_path = "//build/mac_files/sparkle_binaries/sign_update_dsa"
  }
  output_dmg_dsa_path = "$root_out_dir/$brave_dmg.dsa"

  args = [
    "--sign-update",
    rebase_path("$sign_update_path"),
    "--sign-key-file",
    "$sparkle_dsa_private_key_file",
    "--target",
    rebase_path("$target_dmg_path"),
    "--output",
    rebase_path("$output_dmg_dsa_path"),
    "--dsa",
  ]

  inputs = [
    script,
    "$sign_update_path",
    "$target_dmg_path",
  ]

  outputs = [ "$output_dmg_dsa_path" ]

  deps = [ ":copy_dmg_pkg" ]

  if (build_sparkle) {
    deps += [ "//brave/vendor/sparkle:copy_old_sign_update" ]
  }
}

action("generate_eddsa_sig_for_dmg") {
  script = "generate_sig.py"

  if (build_sparkle) {
    sign_update_path = "$root_out_dir/sign_update"
  } else {
    sign_update_path = "//build/mac_files/sparkle_binaries/sign_update"
  }

  output_dmg_eddsa_path = "$root_out_dir/$brave_dmg.eddsa"

  args = [
    "--sign-update",
    rebase_path("$sign_update_path"),
    "--sign-key",
    "$sparkle_eddsa_private_key",
    "--target",
    rebase_path("$target_dmg_path"),
    "--output",
    rebase_path("$output_dmg_eddsa_path"),
    "--eddsa",
  ]

  inputs = [
    script,
    "$sign_update_path",
    "$target_dmg_path",
  ]

  outputs = [ "$output_dmg_eddsa_path" ]

  deps = [ ":copy_dmg_pkg" ]

  if (build_sparkle) {
    deps += [ "//brave/vendor/sparkle:build_sparkle_framework" ]
  }
}

action("build_delta_installer") {
  script = "build_delta_installer.py"

  if (build_sparkle) {
    binary_delta_path = "$root_out_dir/BinaryDelta"
  } else {
    binary_delta_path = "//build/mac_files/sparkle_binaries/BinaryDelta"
  }

  output_delta_path = "$root_out_dir/$brave_delta"

  args = [
    "--binary-delta",
    rebase_path("$binary_delta_path"),
    "--root-out-dir",
    rebase_path("$root_out_dir"),
    "--old-dmg",
    rebase_path("$root_out_dir/$last_chrome_installer"),
    "--new-dmg",
    rebase_path("$target_dmg_path"),
    "--delta-output",
    rebase_path("$output_delta_path"),
  ]

  inputs = [
    script,
    "$binary_delta_path",
    "$target_dmg_path",
  ]

  outputs = [ "$output_delta_path" ]

  deps = [ ":copy_dmg_pkg" ]

  if (build_sparkle) {
    deps += [ "//brave/vendor/sparkle:build_sparkle_framework" ]
  }
}

action("generate_eddsa_sig_for_delta") {
  script = "generate_sig.py"

  sign_update_path = "//build/mac_files/sparkle_binaries/sign_update"
  target_delta_path = "$root_out_dir/$brave_delta"
  output_delta_eddsa_path = "$root_out_dir/$brave_delta.eddsa"

  args = [
    "--sign-update",
    rebase_path("$sign_update_path"),
    "--sign-key",
    "$sparkle_eddsa_private_key",
    "--target",
    rebase_path("$target_delta_path"),
    "--output",
    rebase_path("$output_delta_eddsa_path"),
    "--eddsa",
  ]

  inputs = [
    script,
    "$sign_update_path",
    "$target_delta_path",
  ]

  outputs = [ "$output_delta_eddsa_path" ]

  deps = [ ":build_delta_installer" ]
}

group("finalize_app") {
  public_deps = [ "//chrome/installer/mac" ]

  if (skip_signing) {
    public_deps += [ ":universalize" ]
  } else {
    public_deps += [ ":sign_app" ]
  }
}

if (is_official_build) {
  if (is_release_channel) {
    _channel_nonempty = "release"
  } else {
    _channel_nonempty = brave_channel
  }
  provisioning_profile_name =
    "${_channel_nonempty}.9c57a508dc89402964eb013d30ef6df4da849aa9"
} else {
  # an empty dummy file just to simplify things
  provisioning_profile_name = "dummy"
}

provisioning_profile =
  "//brave/build/mac/signing/${provisioning_profile_name}.provisionprofile"

action("sign_app") {
  script = "//build/gn_run_binary.py"
  shell_script = "//brave/build/mac/sign_app.sh"

  if (is_official_build) {
    is_development = "False"
  } else {
    is_development = "True"
  }

  notarize_argument = "False"
  if (notarize) {
    notarize_argument = "True"
  }

  args = [
    rebase_path(shell_script, root_out_dir),

    # Use absolute paths needed by codesign
    rebase_path(get_path_info(unsigned_app_path, "dir")),
    rebase_path("$root_out_dir/$mac_signing_output_prefix"),
    rebase_path(packaging_dir),
    is_development,
    rebase_path(provisioning_profile, root_out_dir),
    mac_signing_identifier,
    notarize_argument,
    notary_user,
    notary_password,
    chrome_mac_team_id,
  ]

  inputs = [
    script,
    shell_script,
    unsigned_app_path,
    provisioning_profile,
    "$packaging_dir/app-entitlements.plist",
    "//brave/script/signing_helper.py",
  ]

  outputs = [ signed_app_path ]

  deps = [
    ":copies",
    ":universalize",
  ]
}

copy("copies") {
  visibility = [ ":sign_app", ":_create_dmg_pkg" ]

  sources = [
    provisioning_profile,
    "//brave/app/helper-entitlements.plist"
  ]

  public_deps = [ "//chrome/installer/mac" ]

  outputs = [ "$packaging_dir/{{source_file_part}}" ]
}

postinstall_script = "$packaging_dir/brave/pkg_postinstall.in"

if (install_omaha4_with_pkg) {
  action("postinstall") {
    script = "create_postinstall.py"

    output = postinstall_script

    args = [
      rebase_path("//chrome/installer/mac/pkg_postinstall.in"),
      brave_exe,
      "Contents/Frameworks/$chrome_product_full_name Framework.framework",
      rebase_path(output),
    ]

    inputs = [
      script,
      "//chrome/installer/mac/pkg_postinstall.in",
    ]

    outputs = [ output ]
  }
} else {
  copy("postinstall") {
    sources = [ "pkg-scripts/postinstall" ]
    outputs = [ postinstall_script ]
  }
}

_upstream_signed_basename = "$signed_output_dir/" + string_replace(chrome_product_full_name, " ", "") + "-$chrome_version_full"
_upstream_signed_dmg_path = "$_upstream_signed_basename.dmg"
_upstream_signed_pkg_path = "$_upstream_signed_basename.pkg"

action("_create_dmg_pkg") {
  deps = [
    ":browser_install_script",
    ":copies",
    ":dmg_background_image",
    ":dmg_icon",
    ":ds_store",
    ":postinstall",
    ":signing_config",
    "//chrome:chrome_app",
    "//chrome/installer/mac",
  ]
  outputs = [
    _upstream_signed_dmg_path,
    _upstream_signed_pkg_path,
  ]
  script = "$packaging_dir/sign_chrome.py"
  installer_identity = mac_installer_signing_identifier
  if (skip_signing && installer_identity == "") {
    # Prevent an AssertionError in upstream:
    installer_identity = "stub"
  }
  args = [
    "--input",
    rebase_path(root_build_dir, root_build_dir),
    "--output",
    rebase_path(signed_output_dir, root_build_dir),
    # sign_chrome.py requires --identity even when signing is skipped.
    "--identity=$mac_signing_identifier",
    "--installer-identity=$installer_identity",
    "--package-as-dmg",
    "--package-as-pkg",
  ]
  if (!is_official_build) {
    args += [ "--development" ]
  }
  if (skip_signing) {
    args += [ "--skip-signing" ]
  }
  if (notarize) {
    args += [ "--notarize" ]
    notary_args = [
      "--apple-id",
      notary_user,
      "--password",
      notary_password,
      "--team-id",
      chrome_mac_team_id,
    ]
    foreach (arg, notary_args) {
      args += [ "--notary-arg=$arg", ]
    }
  }
}

copy("signing_config") {
  visibility = [ ":_create_dmg_pkg" ]
  sources = [
    "signing/internal_config.py",
    "signing/internal_invoker.py",
  ]
  outputs = [ "$packaging_dir/signing/{{source_file_part}}" ]
}

copy("browser_install_script") {
  deps = [ "//chrome/updater/mac:browser_install_script" ]
  sources = [ "$root_out_dir/$browser_product_name Packaging/updater/.install" ]
  outputs = [ "$packaging_dir/keystone_install.sh" ]
}

copy("dmg_background_image") {
  sources = [ "dmg-background.png" ]
  outputs = [ "$packaging_dir/chrome_dmg_background.png" ]
}

copy("dmg_icon") {
  sources = [ "$dmg_icon_file_name.icns" ]
  outputs = [ "$packaging_dir/chrome_dmg_icon.icns" ]
}

copy("ds_store") {
  sources = [ "DS_Store-files/$ds_store_file_name" ]
  outputs = [ "$packaging_dir/chrome_dmg_dsstore" ]
}

copy("create_dmg") {
  deps = [ ":_create_dmg_pkg" ]
  sources = [ _upstream_signed_dmg_path ]
  if (skip_signing) {
    outputs = [ unsigned_dmg_path ]
  } else {
    outputs = [ signed_dmg_path ]
  }
}

copy("create_pkg") {
  deps = [ ":_create_dmg_pkg" ]
  sources = [ _upstream_signed_pkg_path ]
  if (skip_signing) {
    outputs = [ unsigned_pkg_path ]
  } else {
    outputs = [ signed_pkg_path ]
  }
}

group("finalize_dmg_pkg") {
  deps = []
  if (skip_signing) {
    deps += [ ":create_dmg" ]
  } else {
    if (mac_installer_signing_identifier == "") {
      deps += [ ":sign_app" ]
    } else {
      deps += [ ":copy_dmg_pkg" ]
      if (sparkle_dsa_private_key_file != "") {
        deps += [ ":generate_dsa_sig_for_dmg" ]
      }

      if (sparkle_eddsa_private_key != "") {
        deps += [ ":generate_eddsa_sig_for_dmg" ]
      }

      if (build_delta_installer && last_chrome_installer != "") {
        deps += [ ":build_delta_installer" ]
        if (sparkle_eddsa_private_key != "") {
          deps += [ ":generate_eddsa_sig_for_delta" ]
        }
      }
    }
  }
}

copy("copy_notarize_script") {
  sources = [ "notarize_dmg_pkg.py" ]

  outputs = [ "$packaging_dir/{{source_file_part}}" ]
}

if (!skip_signing && notarize) {

action("notarize_dmg_pkg") {
  script = "$packaging_dir/notarize_dmg_pkg.py"

  if (is_official_build) {
    development_arg = ""
  } else {
    development_arg = "--development"
  }

  args = [
    "--identity",
    mac_signing_identifier,
    string_join("=",
                [
                  "--notary-arg",
                  "--apple-id",
                  notary_user,
                ]),
    "--notary-arg=--password",
    "--notary-arg",
    notary_password,
    "--notary-arg=--team-id",
    "--notary-arg",
    chrome_mac_team_id,
    development_arg,
    "--dmg",
    rebase_path(signed_dmg_path),
    "--pkg",
    rebase_path(signed_pkg_path),
    "--signed",
    rebase_path(signed_output_dir),
    "--outdir",
    rebase_path("$root_out_dir/$mac_notarized_output_prefix"),
    "--pkgdir",
    rebase_path(packaging_dir),
    "--mac_provisioning_profile",
    rebase_path(provisioning_profile),
  ]

  inputs = [
    script,
    signed_dmg_path,
    signed_pkg_path,
  ]

  outputs = [
    notarized_dmg_path,
    notarized_pkg_path,
  ]

  deps = [
    ":copy_notarize_script",
    ":create_dmg",
    ":create_pkg",
  ]
}

}

copy("copy_dmg_pkg") {
  if (notarize) {
    sources = [
      notarized_dmg_path,
      notarized_pkg_path,
    ]
    deps = [
      ":copy_notarize_script",
      ":notarize_dmg_pkg",
    ]
  } else if (skip_signing) {
    sources = [
      unsigned_dmg_path,
      unsigned_pkg_path,
    ]
    deps = [
      ":create_dmg",
      ":create_pkg",
      ":finalize_dmg_pkg",
    ]
  } else {
    sources = [
      signed_dmg_path,
      signed_pkg_path,
    ]
    deps = [
      ":create_dmg",
      ":create_pkg",
    ]
  }

  outputs = [ "$root_out_dir/{{source_file_part}}" ]
}

crx3("crx") {
  inputs = [ target_dmg_path ]
  output = "$root_out_dir/$chrome_product_full_name.crx3"
  base_dir = get_path_info(target_dmg_path, "dir")

  # The private key file is not in Git for obvious reasons. It needs to be
  # copied into this directory manually. Changing the private key requires
  # also changing kBravePublisherKeyHash in crx_verifier.cc.
  key = "//brave/updater/crx-private-key.der"
  deps = [ ":copy_dmg_pkg" ]
}
