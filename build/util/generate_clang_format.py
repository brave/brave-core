#!/usr/bin/env vpython3
# Copyright (c) 2024 The Brave Authors. All rights reserved.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at https://mozilla.org/MPL/2.0/.

import argparse
import brave_chromium_utils
import os.path
import yaml


def main(input_clang_format_path, output_clang_format_path):
    data = load_clang_format(input_clang_format_path)

    add_chromium_src_include_categories_rule(data)

    save_clang_format(data, output_clang_format_path)


def add_chromium_src_include_categories_rule(data):
    # Find the IncludeCategories list.
    include_categories = data['IncludeCategories']

    # Find the '.*' rule (wildcard regex).
    for idx, rule in enumerate(include_categories):
        if rule['Regex'] == '.*':
            wildcard_rule_idx = idx
            wildcard_rule_priority = rule['Priority']
            break
    else:
        raise RuntimeError("Couldn't find the '.*' rule in IncludeCategories")

    # Create chromium_src rule with a lower priority than the wildcard rule.
    chromium_src_rule = {
        'Regex': '^"(src\/|..\/gen\/).*',
        'Priority': wildcard_rule_priority + 1,
    }

    # Insert the chromium_src rule before the wildcard rule. This is required
    # for regex to work correctly, otherwise everything will be matched by the
    # wildcard rule.
    include_categories.insert(wildcard_rule_idx, chromium_src_rule)


def load_clang_format(path):
    with open(path, 'r') as file:
        return yaml.safe_load(file)


def save_clang_format(data, path):
    # Prepare the new content.
    new_content = ('# This file was generated by '
                   f'{brave_chromium_utils.to_wspath(__file__)}\n\n')
    new_content += yaml.safe_dump(data)

    # Load the existing content.
    if os.path.exists(path):
        with open(path, 'r') as file:
            existing_content = file.read()
    else:
        existing_content = None

    # Write the changes to output .clang-format file if needed.
    if new_content != existing_content:
        with open(path, 'w', newline='\n') as file:
            file.write(new_content)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Generate .clang-format with Brave customization.')
    parser.add_argument('input_clang_format_path',
                        help='Path to the input .clang-format file')
    parser.add_argument('output_clang_format_path',
                        help='Path to the output .clang-format file')

    args = parser.parse_args()

    main(args.input_clang_format_path, args.output_clang_format_path)
