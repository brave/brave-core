# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.

import("//brave/build/rust/config.gni")
import("//build/config/clang/clang.gni")

if (is_mac) {
  import("//build/config/mac/mac_sdk.gni")
}

declare_args() {
  rustup_path = rebase_path("//brave/build/rustup")
}

template("rust_ffi") {
  config_target_name = target_name + "_external_config"
  cpp_target_name = "rust_ffi"

  config(config_target_name) {
    visibility = [ ":*" ]
    if (is_mac && defined(invoker.shared_library_define)) {
      defines = [ invoker.shared_library_define ]
    }
  }

  group(target_name) {
    public_configs = [ ":$config_target_name" ]
    public_deps = [
      "//brave/build/rust",
      "//brave/build/rust:cxx_cppdeps",
    ]
  }

  source_set(cpp_target_name) {
    visibility = [ "//brave/build/rust:*" ]

    public_configs = [ ":$config_target_name" ]

    if (defined(invoker.public_configs)) {
      public_configs += invoker.public_configs
    }

    defines = []
    if (is_mac && defined(invoker.implementation_define)) {
      defines = [ invoker.implementation_define ]
    }

    if (defined(invoker.defines)) {
      defines += invoker.defines
    }

    public_deps = [ "//brave/build/rust:cxx_cppdeps" ]
    if (defined(invoker.public_deps)) {
      public_deps += invoker.public_deps
    }

    if (is_clang) {
      configs -= [ "//build/config/clang:find_bad_constructs" ]
    }
    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]

    forward_variables_from(invoker,
                           [
                             "sources",
                             "deps",
                             "frameworks",
                           ])
  }
}

template("rust_crate") {
  action(target_name) {
    script = "//brave/script/stamp.py"
    visibility = [ "//brave/build/rust:*" ]

    forward_variables_from(invoker, [ "deps" ])

    inputs = [ script ]

    inputs += invoker.inputs

    _stamp = "${target_gen_dir}/${target_name}.stamp"

    args = [
      "--stamp",
      rebase_path(_stamp, root_build_dir),
    ]

    outputs = [ _stamp ]
  }
}

# Runs a script to compile a local Cargo package and all of its dependencies
template("cargo_build") {
  group_target = target_name
  cargo_build_target = target_name + "_cargo_build"

  action(cargo_build_target) {
    script = "//brave/script/cargo.py"

    # make sure rebuilds when files change
    forward_variables_from(invoker, "*")

    outputs = [ output ]

    if (!defined(target)) {
      target = rustc_target  # defined by //brave/build/rust/config.gni,
    }

    args = [
      "--rustup_path=" + rustup_path,
      "--cargo_path=" + rustup_path,
      "--manifest_path=" + rebase_path(manifest_path, root_build_dir),
      "--build_path=" + rebase_path(build_path, root_build_dir),
      "--target=" + target,
      "--toolchain=" +
          rustc_toolchain,  # defined by //brave/build/rust/config.gni,
      "--is_debug=$is_debug",
    ]

    if (is_mac) {
      args += [ "--mac_deployment_target=" + mac_deployment_target ]
    }

    if (defined(rust_flags)) {
      foreach(flag, rust_flags) {
        args += [
          "--rust_flag",
          flag,
        ]
      }
    }
  }

  config_target = target_name + "_staticlib_config"

  config(config_target) {
    libs = [ invoker.output ]
    visibility = [ ":$group_target" ]
  }

  group(group_target) {
    public_configs = [ ":$config_target" ]
    public_deps = [ ":$cargo_build_target" ]
  }
}

# Runs a script to generate C bindings for rust library
template("cargo_cbindgen") {
  action(target_name) {
    script = "//brave/script/cargo_cbindgen.py"

    forward_variables_from(invoker,
                           [
                             "config",
                             "sources",
                             "output",
                             "visibility",
                           ])

    assert(defined(config), "Must specify cbindgen.toml config to use")
    assert(defined(sources), "Must specify sources to generate bindings for")
    assert(defined(output), "Must specify output header file")

    sources += [ config ]
    outputs = [ output ]

    args = [
      "--rustup_path=" + rustup_path,
      "--cargo_path=" + rustup_path,
      "--config=" + rebase_path(config, root_build_dir),
      "--path=" + rebase_path(get_path_info(config, "dir"), root_build_dir),
      "--output=" + rebase_path(output, root_build_dir),
    ]
  }
}
