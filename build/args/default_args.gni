# Copyright (c) 2025 The Brave Authors. All rights reserved.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at https://mozilla.org/MPL/2.0/.

# Generates a json file by merging with user-defined args. It's intended to be
# used in args.gn to handle user args and inject the final json into args.gn.
# Usage in args.gn:
#
#     import("//brave/build/args/default_args.gni")
#
#     default_args("args") {
#       is_component_build = true
#       is_debug = true
#     }
#
#     forward_variables_from(read_file("args.json", "json"), "*")

template("default_args_impl") {
  args = {
    # Please provide a reason if you are adding new overrides to this file.

    disable_fieldtrial_testing_config = true
    root_extra_deps = [ "//brave" ]
    generate_about_credits = true

    # Default value currently causes multiple errors of
    # Input to targets not generated by a dependency
    # Chromium change: 3c46aa800cbd4e21aeb08ac7c1222ce33d5c902e
    # This has been disabled after some discussion deciding it is not relevant for
    # our use case since it was introduced in M140.
    translate_genders = false

    # Chromium_src overrides do not work with precompiled headers well.
    # Before Siso they were always disabled as we always used redirect_cc as a
    # cc_wrapper, but with Siso we need to disable it explicitly.
    enable_precompiled_headers = false

    enable_pseudolocales = false

    # Our copy of signature_generator.py doesn't support --ignore_missing_cert:
    ignore_missing_widevine_signing_cert = false

    if (invoker.target_os != "ios") {
      proprietary_codecs = true
      ffmpeg_branding = "Chrome"
      branding_path_component = "brave"
      branding_path_product = "brave"
      enable_glic = false
      enable_widevine = true
    } else {
      ios_enable_code_signing = false
      ios_enable_share_extension = false
      ios_enable_credential_provider_extension = true
      ios_enable_widget_kit_extension = false

      # The app currently crashes on launch without disabling these 2 args:
      # https://github.com/brave/brave-browser/issues/49595
      # When this is fixed in Chromium we can remove these 2 arguments
      use_partition_alloc_as_malloc = false
      enable_backup_ref_ptr_support = false

      ios_provider_target = "//brave/ios/browser/providers:brave_providers"

      ios_locales_pack_extra_source_patterns =
          [ "%root_gen_dir%/components/brave_components_strings_" ]
      ios_locales_pack_extra_deps = [ "//brave/components/resources:strings" ]

      # Configure unit tests to run outside of chromium infra
      # https://source.chromium.org/chromium/chromium/src/+/main:ios/build/bots/scripts/README.md
      enable_run_ios_unittests_with_xctest = true
    }

    if (invoker.target_os == "android") {
      safe_browsing_mode = 2

      # Fixes WebRTC IP leak with default option
      enable_mdns = true

      # We want it to be enabled for all configurations
      disable_android_lint = false
    } else if (invoker.target_os != "ios" && invoker.target_os != "android") {
      safe_browsing_mode = 1
    }

    if (defined(invoker.is_asan) && invoker.is_asan) {
      enable_full_stack_frames_for_profiling = true
      v8_enable_verify_heap = true
    }

    if ((defined(invoker.is_asan) && invoker.is_asan) ||
        (defined(invoker.is_ubsan) && invoker.is_ubsan) ||
        (defined(invoker.is_msan) && invoker.is_msan)) {
      # Temporarily disabling dcheck_always_on for sanitiser builds, as there
      # are some serious reports coming back. It is necessary first to stabilise
      # these sanitisers with this flag first before using the default.
      dcheck_always_on = false
    }

    # !!IMPORTANT!! This should be the last line.
    forward_variables_from(invoker, "*", [ "target_name" ])
  }

  write_file("$root_build_dir/$target_name.json", args, "json")
}

template("default_args") {
  # The `current_host.gni` is required, because GN doesn't set these vars
  # during args.gn parsing. This may be fixed in the future.
  import("//out/current_host.gni")
  not_needed([
               "current_host_os",
               "current_host_cpu",
             ])

  default_args_impl(target_name) {
    # Implicitly set target_os and target_cpu to the current host if not set.
    if (!defined(invoker.target_os)) {
      target_os = current_host_os
    }
    if (!defined(invoker.target_cpu)) {
      target_cpu = current_host_cpu
    }
    forward_variables_from(invoker, "*", [ "target_name" ])
  }
}
