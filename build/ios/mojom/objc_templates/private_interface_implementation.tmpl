{%- macro objc_methods_impls(interface) -%}
{%  for method in interface.methods %}
{%-   set name = method|objc_method_name_formatter %}
- (void){{name}}
{%- if method.parameters or method.response_parameters %}:{%- endif -%}
{%- for param in method.parameters -%}
{%-   if not loop.first -%}{{param.name|under_to_lower_camel}}:{%- endif -%}
{%-   set nullable = param.kind|objc_argument_modifiers -%}
{%-   set type = "%s%s"|format(nullable + " " if nullable, param.kind|objc_wrapper_type) -%}
({{type}}){{param.name|under_to_lower_camel}}
{%- if not loop.last %} {% endif -%}
{%- endfor -%}
{%- if method.response_parameters -%}
{%- if method.parameters %} completion:{% endif -%}
(void (^)(
{%- for param in method.response_parameters -%}
{%-   set nullable = param.kind|objc_argument_modifiers(inside_callback=True) -%}
{%-   set type = "%s%s"|format(param.kind|objc_wrapper_type, " " + nullable if nullable) -%}
{{type}} {{param.name|under_to_lower_camel}}
{%- if not loop.last -%},{{" "}}{%- endif -%}
{%- endfor -%}
))completion
{%- endif %} {
{%- if method.response_parameters %}
  auto callback = ^(
{%- for param in method.response_parameters -%}
{{param.kind|expected_cpp_param_type}} {{param.name}}_arg
{%- if not loop.last %}, {% endif -%}
{%- endfor -%}
  ) {
    completion(
{%- for param in method.response_parameters -%}
{{param|cpp_to_objc_assign('','_arg')}}
{%- if not loop.last %}, {% endif -%}
{%- endfor -%}
    );
  };
{%- endif %}
  _wrappedValue->{{method.name}}(
{%- for param in method.parameters -%}
{{param|objc_to_cpp_assign}}
{%- if not loop.last -%},{{" "}}{%- endif -%}
{%- endfor -%}
{%- if method.response_parameters -%}
{%- if method.parameters %}, {% endif -%}
base::BindOnce(callback)
{%- endif -%}
  );
}
{% endfor %}
{%- endmacro %}

{%- set cpp_namespace = interface|cpp_namespace_from_kind %}
@implementation {{class_prefix}}{{interface.name}}MojoImpl {
  mojo::Remote<{{cpp_namespace}}::{{interface.name}}> _wrappedValue;
{%- for bridge in interface|interface_remote_sets %}
  std::vector<std::unique_ptr<{{bridge}}>> _{{bridge|under_to_lower_camel}}Receivers;
{%- endfor %}
}

- (instancetype)initWith{{interface.name}}:(mojo::PendingRemote<{{cpp_namespace}}::{{interface.name}}>)obj {
  if ((self = [super init])) {
    _wrappedValue.Bind(std::move(obj));
  }
  return self;
}

{{ objc_methods_impls(interface) }}

@end

@implementation {{class_prefix}}{{interface.name}}OwnedImpl {
  std::unique_ptr<{{cpp_namespace}}::{{interface.name}}> _wrappedValue;
{%- for bridge in interface|interface_remote_sets %}
  std::vector<std::unique_ptr<{{bridge}}>> _{{bridge|under_to_lower_camel}}Receivers;
{%- endfor %}
}

- (instancetype)initWith{{interface.name}}:(std::unique_ptr<{{cpp_namespace}}::{{interface.name}}>)obj {
  if ((self = [super init])) {
    _wrappedValue = std::move(obj);
  }
  return self;
}

{{ objc_methods_impls(interface) }}

@end
