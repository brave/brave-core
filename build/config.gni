import("//brave/build/features.gni")
import("//build/util/branding.gni")

declare_args() {
  # Release channel support.
  # "beta" for beta release.
  # "dev" for dev channel release.
  # "nightly" for nightly channel release.
  # "" for stable channel release.
  brave_channel = ""
  is_release_channel = true
  base_sparkle_update_url = ""
  enable_sparkle = is_official_build && is_mac

  sparkle_dsa_private_key_file = ""
  sparkle_eddsa_private_key = ""
  sparkle_eddsa_public_key = ""

  brave_product_name = ""
  brave_project_name = ""
  brave_exe = ""
  brave_version_major = ""
  brave_version_minor = ""
  brave_version_build = ""
  brave_version_patch = 0
  chrome_version_string = ""
  chrome_version_major = ""
  build_omaha = false
  tag_ap = ""
  target_android_base = ""
  target_android_output_format = ""
  brave_android_keystore_path = "."
  brave_android_keystore_name = ""
  brave_android_keystore_password = ""
  brave_android_key_password = ""

  skip_signing = false

  # Used for generating delta installer on macOS/Windows
  build_delta_installer = false
  last_chrome_installer = ""
}

brave_version = "$brave_version_major.$brave_version_minor.$brave_version_build"

if (brave_exe == "") {
  brave_exe = brave_project_name
}

brave_dist_dir = "$root_out_dir/dist"
if (is_win) {
  brave_exe = "$brave_exe.exe"
  brave_underline_full_version =
      "_$chrome_version_major" + "_$brave_version_major" +
      "_$brave_version_minor" + "_$brave_version_build"
  _channel = ""
  brave_app_guid = "{AFE6A462-C574-4B8A-AF43-4CC60DF4563B}"
  if (is_official_build) {
    if (brave_channel == "beta") {
      _channel = "Beta"
      brave_app_guid = "{103BD053-949B-43A8-9120-2E424887DE11}"
    } else if (brave_channel == "dev") {
      _channel = "Dev"
      brave_app_guid = "{CB2150F2-595F-4633-891A-E39720CE0531}"
    } else if (brave_channel == "nightly") {
      _channel = "Nightly"
      brave_app_guid = "{C6CB981E-DB30-4876-8639-109F8933582C}"
    } else {
      assert(brave_channel == "", "Unknown channel name")
    }
  } else {
    _channel = "Development"
  }
  _arch = ""
  if (target_cpu == "x86") {
    _arch = "32"
  }
  brave_installer_exe = "brave_installer$brave_underline_full_version.exe"
  brave_stub_installer_exe =
      "BraveBrowser$_channel" + "Setup$_arch$brave_underline_full_version.exe"
  brave_untagged_stub_installer_exe =
      "BraveBrowserUntagged$_channel" +
      "Setup$_arch$brave_underline_full_version.exe"
  brave_standalone_installer_exe =
      "BraveBrowserStandalone$_channel" +
      "Setup$_arch$brave_underline_full_version.exe"
  brave_silent_installer_exe = "BraveBrowserStandaloneSilent$_channel" +
                               "Setup$_arch$brave_underline_full_version.exe"
  brave_untagged_installer_exe = "BraveBrowserStandaloneUntagged$_channel" +
                                 "Setup$_arch$brave_underline_full_version.exe"
} else if (is_mac) {
  brave_exe = "$chrome_product_full_name.app"
  brave_dmg = "$chrome_product_full_name.dmg"
  brave_pkg = "$chrome_product_full_name.pkg"
  brave_delta = "$chrome_product_full_name.delta"

  brave_product_dir_name_suffix = ""
  if (is_official_build) {
    if (brave_channel == "beta") {
      brave_product_dir_name_suffix = "-Beta"
    } else if (brave_channel == "dev") {
      brave_product_dir_name_suffix = "-Dev"
    } else if (brave_channel == "nightly") {
      brave_product_dir_name_suffix = "-Nightly"
    } else {
      assert(brave_channel == "", "Unknown channel name")
    }
  } else {
    brave_product_dir_name_suffix = "-Development"
  }
  brave_product_dir_name =
      "BraveSoftware/Brave-Browser$brave_product_dir_name_suffix"

  if (base_sparkle_update_url == "") {
    base_sparkle_update_url =
        "https://updates.bravesoftware.com/sparkle/Brave-Browser"
  }
}

brave_platform = "darwin"
if (is_win) {
  brave_platform = "win32"
} else if (is_linux) {
  brave_platform = "linux"
}

is_release_channel = brave_channel == ""

brave_android_output = ""
if (is_android) {
  brave_android_output += "$root_out_dir/apks/Brave"
  if (target_android_base == "modern") {
    assert(target_cpu != "arm64" && target_cpu != "x64")
    brave_android_output += "Modern"
  } else if (target_cpu == "arm64" || target_cpu == "x64" ||
             target_android_base == "mono") {
    brave_android_output += "Mono"
  }

  if (target_android_output_format == "aab") {
    brave_android_output += "$target_cpu.aab"
  } else {
    brave_android_output += "$target_cpu.apk"
  }
}
