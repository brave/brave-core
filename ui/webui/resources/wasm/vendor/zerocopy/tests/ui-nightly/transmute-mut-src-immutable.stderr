error[E0308]: mismatched types
  --> tests/ui-nightly/transmute-mut-src-immutable.rs:17:37
   |
17 |     let _: &mut u8 = transmute_mut!(&0u8);
   |                      ---------------^^^^-
   |                      |              |
   |                      |              types differ in mutability
   |                      expected due to this
   |
   = note: expected mutable reference `&mut _`
                      found reference `&u8`

warning: this function depends on never type fallback being `()`
  --> tests/ui-nightly/transmute-mut-src-immutable.rs:15:1
   |
15 | fn ref_src_immutable() {
   | ^^^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #123748 <https://github.com/rust-lang/rust/issues/123748>
   = help: specify the types explicitly
note: in edition 2024, the requirement `!: FromBytes` will fail
  --> tests/ui-nightly/transmute-mut-src-immutable.rs:17:22
   |
17 |     let _: &mut u8 = transmute_mut!(&0u8);
   |                      ^^^^^^^^^^^^^^^^^^^^
   = note: `#[warn(dependency_on_unit_never_type_fallback)]` on by default
   = note: this warning originates in the macro `transmute_mut` (in Nightly builds, run with -Z macro-backtrace for more info)
help: use `()` annotations to avoid fallback changes
  --> src/macros.rs
   |
   |         let e: &mut () = $e;
   |                     ~~

warning: never type fallback affects this call to an `unsafe` function
  --> tests/ui-nightly/transmute-mut-src-immutable.rs:17:22
   |
17 |     let _: &mut u8 = transmute_mut!(&0u8);
   |                      ^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this will change its meaning in a future release!
   = note: for more information, see issue #123748 <https://github.com/rust-lang/rust/issues/123748>
   = help: specify the type explicitly
   = note: `#[warn(never_type_fallback_flowing_into_unsafe)]` on by default
   = note: this warning originates in the macro `$crate::assert_size_eq` which comes from the expansion of the macro `transmute_mut` (in Nightly builds, run with -Z macro-backtrace for more info)
