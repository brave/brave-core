# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
#
# When uploading crates to the registry Cargo will automatically
# "normalize" Cargo.toml files for maximal compatibility
# with all versions of Cargo and also rewrite `path` dependencies
# to registry (e.g., crates.io) dependencies.
#
# If you are reading this file be aware that the original Cargo.toml
# will likely look very different (and much more reasonable).
# See Cargo.toml.orig for the original contents.

[package]
edition = "2021"
rust-version = "1.65"
name = "regex-automata"
version = "0.4.11"
authors = [
    "The Rust Project Developers",
    "Andrew Gallant <jamslam@gmail.com>",
]
build = false
autolib = false
autobins = false
autoexamples = false
autotests = false
autobenches = false
description = "Automata construction and matching using regular expressions."
homepage = "https://github.com/rust-lang/regex/tree/master/regex-automata"
documentation = "https://docs.rs/regex-automata"
readme = "README.md"
keywords = [
    "regex",
    "dfa",
    "automata",
    "automaton",
    "nfa",
]
categories = ["text-processing"]
license = "MIT OR Apache-2.0"
repository = "https://github.com/rust-lang/regex"

[features]
alloc = []
default = [
    "std",
    "syntax",
    "perf",
    "unicode",
    "meta",
    "nfa",
    "dfa",
    "hybrid",
]
dfa = [
    "dfa-build",
    "dfa-search",
    "dfa-onepass",
]
dfa-build = [
    "nfa-thompson",
    "dfa-search",
]
dfa-onepass = ["nfa-thompson"]
dfa-search = []
hybrid = [
    "alloc",
    "nfa-thompson",
]
internal-instrument = ["internal-instrument-pikevm"]
internal-instrument-pikevm = [
    "logging",
    "std",
]
logging = [
    "dep:log",
    "aho-corasick?/logging",
    "memchr?/logging",
]
meta = [
    "syntax",
    "nfa-pikevm",
]
nfa = [
    "nfa-thompson",
    "nfa-pikevm",
    "nfa-backtrack",
]
nfa-backtrack = ["nfa-thompson"]
nfa-pikevm = ["nfa-thompson"]
nfa-thompson = ["alloc"]
perf = [
    "perf-inline",
    "perf-literal",
]
perf-inline = []
perf-literal = [
    "perf-literal-substring",
    "perf-literal-multisubstring",
]
perf-literal-multisubstring = ["dep:aho-corasick"]
perf-literal-substring = [
    "aho-corasick?/perf-literal",
    "dep:memchr",
]
std = [
    "regex-syntax?/std",
    "memchr?/std",
    "aho-corasick?/std",
    "alloc",
]
syntax = [
    "dep:regex-syntax",
    "alloc",
]
unicode = [
    "unicode-age",
    "unicode-bool",
    "unicode-case",
    "unicode-gencat",
    "unicode-perl",
    "unicode-script",
    "unicode-segment",
    "unicode-word-boundary",
    "regex-syntax?/unicode",
]
unicode-age = ["regex-syntax?/unicode-age"]
unicode-bool = ["regex-syntax?/unicode-bool"]
unicode-case = ["regex-syntax?/unicode-case"]
unicode-gencat = ["regex-syntax?/unicode-gencat"]
unicode-perl = ["regex-syntax?/unicode-perl"]
unicode-script = ["regex-syntax?/unicode-script"]
unicode-segment = ["regex-syntax?/unicode-segment"]
unicode-word-boundary = []

[lib]
name = "regex_automata"
path = "src/lib.rs"
bench = false

[[test]]
name = "integration"
path = "tests/lib.rs"

[dependencies.aho-corasick]
version = "1.0.0"
optional = true
default-features = false

[dependencies.log]
version = "0.4.14"
optional = true

[dependencies.memchr]
version = "2.6.0"
optional = true
default-features = false

[dependencies.regex-syntax]
version = "0.8.5"
optional = true
default-features = false

[dev-dependencies.anyhow]
version = "1.0.69"

[dev-dependencies.bstr]
version = "1.3.0"
features = ["std"]
default-features = false

[dev-dependencies.doc-comment]
version = "0.3.3"

[dev-dependencies.env_logger]
version = "0.9.3"
features = [
    "atty",
    "humantime",
    "termcolor",
]
default-features = false

[dev-dependencies.quickcheck]
version = "1.0.3"
default-features = false

[dev-dependencies.regex-test]
version = "0.1.0"
