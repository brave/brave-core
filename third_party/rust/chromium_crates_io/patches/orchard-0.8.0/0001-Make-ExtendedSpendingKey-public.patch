From 33c2619d77c24b85bf931ce0d4ae7580132a48b2 Mon Sep 17 00:00:00 2001
From: oisupov <oisupov@brave.com>
Date: Wed, 5 Jun 2024 21:48:33 +0700
Subject: [PATCH] Make ExtendedSpendingKey public

---
 .../chromium_crates_io/vendor/orchard-0.8.0/src/zip32.rs    | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/third_party/rust/chromium_crates_io/vendor/orchard-0.8.0/src/zip32.rs b/third_party/rust/chromium_crates_io/vendor/orchard-0.8.0/src/zip32.rs
index 31f318b111d..c37aeebf6ba 100644
--- a/third_party/rust/chromium_crates_io/vendor/orchard-0.8.0/src/zip32.rs
+++ b/third_party/rust/chromium_crates_io/vendor/orchard-0.8.0/src/zip32.rs
@@ -122,7 +122,7 @@ impl KeyIndex {
 ///
 /// [orchardextendedkeys]: https://zips.z.cash/zip-0032#orchard-extended-keys
 #[derive(Debug, Clone)]
-pub(crate) struct ExtendedSpendingKey {
+pub struct ExtendedSpendingKey {
     depth: u8,
     parent_fvk_tag: FvkTag,
     child_index: KeyIndex,
@@ -165,7 +165,7 @@ impl ExtendedSpendingKey {
     /// # Panics
     ///
     /// Panics if the seed is shorter than 32 bytes or longer than 252 bytes.
-    fn master(seed: &[u8]) -> Result<Self, Error> {
+    pub fn master(seed: &[u8]) -> Result<Self, Error> {
         assert!(seed.len() >= 32 && seed.len() <= 252);
         // I := BLAKE2b-512("ZcashIP32Orchard", seed)
         let I: [u8; 64] = {
@@ -203,7 +203,7 @@ impl ExtendedSpendingKey {
     /// [orchardchildkey]: https://zips.z.cash/zip-0032#orchard-child-key-derivation
     ///
     /// Discards index if it results in an invalid sk
-    fn derive_child(&self, index: ChildIndex) -> Result<Self, Error> {
+    pub fn derive_child(&self, index: ChildIndex) -> Result<Self, Error> {
         // I := PRF^Expand(c_par, [0x81] || sk_par || I2LEOSP(i))
         let I: [u8; 64] = PrfExpand::ORCHARD_ZIP32_CHILD.with(
             self.chain_code.as_bytes(),
-- 
2.38.1

