# Copyright 2023 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This file configures how to generate GN rules for third-party Rust crates.
#
# `[crate.foo]` sections below can configure generation of `BUILD.gn` and/or
# `README.chromium` by specifying the following options:
#
# allow_first_party_usage: If false, the crate should not be visible to first
#   party code even though it is present in the Cargo.toml file. It defaults to
#   true. Use this if you need to control features for a crate that is only
#   meant for use as a transitive dependency of third-party crates.
#   e.g. allow_first_party_usage = false
#
# build_script_outputs: A list of file paths, rooted from where the BUILD.gn
#   file is located, of files generated by the crate's build script.
#   e.g. build_script_outputs = [ "crate/src/gen/gen_stuff.rs" ]
#
# extra_input_roots: A list of additional arbitrary files and/or directories
#   that are part of the crate (these need to be listed as `inputs` in the
#   generated `BUILD.gn`).  An example scenario that needs `extra_input_roots`
#   is when a crate uses `include_str!` to include `README.md` as a doc
#   comment.
#
# extra_src_roots: A list of additional Rust sources that come from outside of
#   the crate's `src` directory (these need to be added to `sources` in the
#   generated `BUILD.gn`).  An example scenario that needs `extra_src_roots` is
#   when a crate uses generated code via `include!("../generated/foo.rs")`.
#
# group: One of 'safe', 'sandbox', or 'test. This indicates where the library
#   is allowed to be used and where its GN rules will be written.
#
#   The group of least privilege is inherited by a crate C from all crates that
#   depend on C transitively. For crates listed in Cargo.toml, and not depended
#   on by other crates, the default is 'safe'.
#   TODO(danakj): The default should probably be 'sandbox'?
#
#   'safe': The library satisfies the rule-of-2 and can be used in any process.
#   'sandbox': The library does not satisfy the rule-of-2 and must be used in
#              a sandboxed process such as the renderer or a utility process.
#   'test': The library is only used in tests.
#
# license: The name of the license. This should normally be populated from the
#   crate's Cargo.toml, but it can be specified to override it.
#
# license_files: A list of license files, relative to the crate's root.
#   This is normally found automatically based on convention, but it can be
#   specified to override it. A license file is expected for all shipped
#   libraries.
#
# security_critical: A boolean that overrides if the crate is marked security-
#   critical in the README.chromium. It defaults to true if the crate is not in
#   the 'test' group/.
#
# shipped: A boolean that overrides if the crate is marked shipped in the
#   README.chromium. It defaults to true if the crate is not in the 'test'
#   group.
#
# bin_targets: A list of binary target names to cover.  This list is empty by
#   default, which means that the default generated `BUILD.gn` will only cover
#   the library target (if any) of the package.
#
# Additional, less commonly needed options can also be discovered by reading
# the doc comments in `//tools/crates/gnrt/lib/config.rs` (e.g. `CrateConfig`'s
# fields correspond to per-crate options like `extra_input_roots`).

[gn]
build_file_template = "BUILD.gn.hbs"
readme_file_template = "README.chromium.hbs"
removed_cargo_template = "removed_Cargo.toml.hbs"
removed_librs_template = "removed_lib.rs.hbs"

[vet]
config_template = "vet_config.toml.hbs"

[resolve]
root = "chromium"
# spin is added by pasta-curves lazy_static/spin_no_std, but we don't want to
# use it and lazy_static is an upstream crate with a patch.crates-io so the
# feature (and dependency) do not get added to the build anyway
remove_crates = ['cc', 'link-cplusplus', 'wasi', 'winapi-i686-pc-windows-gnu', 'winapi-x86_64-pc-windows-gnu', 'minimal-lexical', 'spin']

[crate.adblock]
extra_kv = { raw_gn = '''
if (is_ios) {
    features += [
      "content-blocking",
      "serde_json",
    ]
    deps += [ "//brave/third_party/rust/serde_json/v1:lib" ]
  } else {
    features += [
      "object-pooling",
      "lifeguard",
      "unsync-regex-caching",
    ]
    deps += [ "//brave/third_party/rust/lifeguard/v0_6:lib" ]
  }
'''}
license_files = ['LICENSE']

[crate.adss]
license_files = ['LICENSE']

[crate.aes]
extra_kv = { raw_gn = '''
if (target_os == "android" && target_cpu == "arm64") {
      deps -= [ "//brave/third_party/rust/cpufeatures/v0_2:lib" ]
}
''' }

[crate.ansi_term]
license_files = ['LICENCE']

[crate.arrayref]
license_files = ['LICENSE']

[crate.bitvec]
extra_input_roots = ['../doc', '../README.md' ]
license_files = ['LICENSE.txt']

[crate.cbor4ii]
extra_input_roots = [ "../README.md" ]

[crate.chacha20]
extra_kv = { raw_gn = '''
if (target_cpu == "x64" || target_cpu == "x86") {
      deps += [ "//brave/third_party/rust/cpufeatures/v0_2:lib" ]
}
''' }

[crate.chacha20poly1305]
extra_input_roots = [ "../README.md" ]

[crate.challenge-bypass-ristretto]
extra_input_roots = [ "../docs", "../README.md" ]
license_files = ['LICENSE']

[crate.chrono]
license_files = ['LICENSE.txt']

[crate.cpufeatures]
extra_kv = { raw_gn = '''
if (is_apple && target_cpu == "arm64") {
      deps += [ "//brave/third_party/rust/libc/v0_2:lib" ]
}
''' }

[crate.crunchy]
build_script_outputs = [ "lib.rs" ]

[crate.cssparser]
build_script_outputs = [ "tokenizer.rs" ]
extra_build_script_src_roots = [ "../build" ]
license_files = ['LICENSE']

[crate.cssparser-macros]
license_files = ['LICENSE']

[crate.curve25519-dalek]
extra_input_roots = [ "../docs", "../README.md" ]
extra_kv = { raw_gn = '''
if (target_cpu == "x64") {
    deps += [
      "//brave/third_party/rust/cpufeatures/v0_2:lib",
      "//brave/third_party/rust/curve25519_dalek_derive/v0_1:lib",
    ]
  }
''' }

[crate.curve25519-dalek-derive]
extra_input_roots = [ "../README.md" ]

[crate.derivation-path]
license_files = ['../../../../../common/licenses/Apache-2.0']

[crate.dtoa-short]
license_files = ['LICENSE']

[crate.ed25519]
extra_input_roots = [ "../README.md" ]

[crate.ed25519-dalek-bip32]
license_files = ['../../../../../common/licenses/Apache-2.0']

[crate.encoding_rs]
license_files = ['LICENSE-APACHE']

[crate.ff_derive]
license_files = ['../../../../../common/licenses/Apache-2.0']

[crate.forest_bigint]
license_files = ['../../../../../common/licenses/Apache-2.0']

[crate.funty]
license_files = ['LICENSE.txt']

[crate.futures-channel]
extra_src_roots = [ "../no_atomic_cas.rs" ]
extra_build_script_src_roots = [ "../no_atomic_cas.rs" ]

[crate.futures-core]
extra_src_roots = [ "../no_atomic_cas.rs" ]
extra_build_script_src_roots = [ "../no_atomic_cas.rs" ]

[crate.futures-task]
extra_src_roots = [ "../no_atomic_cas.rs" ]
extra_build_script_src_roots = [ "../no_atomic_cas.rs" ]

[crate.futures-util]
extra_src_roots = [ "../no_atomic_cas.rs" ]
extra_build_script_src_roots = [ "../no_atomic_cas.rs" ]

[crate.fvm_ipld_blockstore]
license_files = ['../../../../../common/licenses/Apache-2.0']

[crate.fvm_ipld_encoding]
license_files = ['../../../../../common/licenses/Apache-2.0']

[crate.fvm_shared]
license_files = ['../../../../../common/licenses/Apache-2.0']

[crate.fxhash]
license_files = ['../../../../../common/licenses/Apache-2.0']

[crate.getrandom]
license_files = ['LICENSE-APACHE']

[crate.halo2_gadgets]
license_files = ['../../../../../common/licenses/Apache-2.0']

[crate.halo2_proofs]
license_files = ['../../../../../common/licenses/Apache-2.0']

[crate.html5ever]
extra_build_script_src_roots = [ "../macros/match_token.rs" ]
build_script_outputs = [ "rules.rs" ]

[crate.itoa]
license_files = ['LICENSE-APACHE']

# gnrt conditional for this dep is merely if (target_cpu == "arm64")
[crate.keccak]
extra_kv = { raw_gn = '''
if (target_cpu == "x64" || target_cpu == "x86") {
      deps += [ "//brave/third_party/rust/cpufeatures/v0_2:lib" ]
}
if (target_os == "android" && target_cpu == "arm64") {
      deps -= [ "//brave/third_party/rust/cpufeatures/v0_2:lib" ]
}
''' }

[crate.libm]
extra_kv = { rustenv = [ "OPT_LEVEL=0" ]}

[crate.libsecp256k1]
build_script_outputs = [ "const.rs", "const_gen.rs" ]

[crate.libsecp256k1-core]
license_files = ['../../../../../common/licenses/Apache-2.0']

[crate.libsecp256k1-gen-ecmult]
license_files = ['../../../../../common/licenses/Apache-2.0']

[crate.libsecp256k1-gen-genmult]
license_files = ['../../../../../common/licenses/Apache-2.0']

[crate.lock_api]
extra_kv = { rustflags = [ "--cfg", "has_const_fn_trait_bound" ] }

[crate.mac]
license_files = ['../../../../../common/licenses/Apache-2.0']

[crate.markup5ever]
extra_build_script_src_roots = [ "entities.rs" ]
build_script_outputs = [ "generated.rs", "named_entities.rs", ]

[crate.multihash]
extra_kv = { rustenv = [ "CARGO_MANIFEST_DIR=\" + rebase_path(\"//brave/third_party/rust/chromium_crates_io/vendor/multihash-0.16.3\") + \"" ]}

[crate.num-bigint]
extra_input_roots = [ "../README.md" ]
extra_kv = { raw_gn = '''
if (target_cpu == "arm64" || target_cpu == "x64") {
  rustenv = [ "CARGO_CFG_TARGET_POINTER_WIDTH=64" ]
} else {
  rustenv = [ "CARGO_CFG_TARGET_POINTER_WIDTH=32" ]
}
if (epoch != "0.2") {
  build_script_outputs = [ "radix_bases.rs" ]
}
''' }

[crate.num-traits]
extra_kv = { rustflags = [ "--cfg", "has_i128", "--cfg", "has_to_int_unchecked", "--cfg", "has_reverse_bits", "--cfg", "has_leading_trailing_ones", "--cfg", "has_int_assignop_ref", "--cfg", "has_div_euclid", "--cfg", "has_copysign" ] }

[crate.platforms]
extra_src_roots = [ "target" ]

[crate.poly1305]
extra_kv = { raw_gn = '''
if (target_cpu == "x64" || target_cpu == "x86") {
      deps += [ "//brave/third_party/rust/cpufeatures/v0_2:lib" ]
}
''' }

[crate.ppoprf]
license_files = ['LICENSE']

[crate.radium]
license_files = ['LICENSE.txt']

[crate.rand]
license_files = ['LICENSE-APACHE']

[crate.rand_chacha]
license_files = ['../../../../../common/licenses/Apache-2.0']

[crate.rand_core]
license_files = ['LICENSE-APACHE']

[crate.reddsa]
extra_input_roots = [ "../README.md" ]
license_files = ['LICENSE.Apache-2.0']

[crate.selectors]
build_script_outputs = [ "ascii_case_insensitive_html_attributes.rs" ]
license_files = ['../../../../../common/licenses/MPL-2.0']

[crate.semver]
license_files = ['../../../../../common/licenses/Apache-2.0']

[crate.serde_derive]
license_files = ['../../../../../common/licenses/Apache-2.0']

[crate.servo_arc]
license_files = ['../../../../../common/licenses/Apache-2.0']

[crate.sha2]
extra_kv = { raw_gn = '''
if (target_os == "android" && target_cpu == "arm64") {
      deps -= [ "//brave/third_party/rust/cpufeatures/v0_2:lib" ]
}
''' }

[crate.signature]
extra_input_roots = [ "../README.md" ]

[crate.siphasher]
license_files = ['../../../../../common/licenses/Apache-2.0']

[crate.sta-rs]
license_files = ['LICENSE']

[crate.star-constellation]
license_files = ['LICENSE']

[crate.tap]
license_files = ['LICENSE.txt']

[crate.thin-slice]
license_files = ['../../../../../common/licenses/MPL-2.0']

[crate.time]
license_files = ['LICENSE-Apache']

[crate.time-core]
license_files = ['LICENSE-Apache']

[crate.time-macros]
license_files = ['LICENSE-Apache']

[crate.typenum]
extra_build_script_src_roots = [ "../build" ]
build_script_outputs = [ "consts.rs", "op.rs" ]
extra_kv = { rustenv = [ "TYPENUM_BUILD_CONSTS=\" + rebase_path(target_gen_dir) + \"/lib/consts.rs", "TYPENUM_BUILD_OP=\" + rebase_path(target_gen_dir) + \"/lib/op.rs" ] }

[crate.uint]
license_files = ['../../../../../common/licenses/Apache-2.0']

[crate.wasi]
license_files = ['../../../../../common/licenses/Apache-2.0']

[crate.windows]
license_files = ['license-apache-2.0']

[crate.windows_aarch64_msvc]
license_files = ['license-apache-2.0']

[crate.windows_i686_msvc]
license_files = ['license-apache-2.0']

[crate.windows_x86_64_msvc]
license_files = ['license-apache-2.0']

[crate.windows-sys]
license_files = ['license-apache-2.0']

[crate.windows-targets]
license_files = ['license-apache-2.0']

[crate.wyz]
license_files = ['LICENSE.txt']

[crate.zcash]
license_files = ['../../../../../common/licenses/MPL-2.0']

[crate.zcash_encoding]
license_files = ['../../../../../common/licenses/Apache-2.0']

[crate.zcash_primitives]
license_files = ['../../../../../common/licenses/Apache-2.0']

[crate.zcash_protocol]
license_files = ['../../../../../common/licenses/Apache-2.0']
