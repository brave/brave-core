<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
    <channel>
        <title><![CDATA[The Cloudflare Blog]]></title>
        <description>
            <![CDATA[Get the latest news on how products at Cloudflare are built, technologies used, and join the teams helping to build a better Internet.]]></description>
        <link>https://blog.cloudflare.com/</link>
        <image>
            <url>https://blog.cloudflare.com/favicon.png</url>
            <title>The Cloudflare Blog</title>
            <link>https://blog.cloudflare.com/</link>
        </image>
        <generator>Ghost 3.5</generator>
        <lastBuildDate>Fri, 15 Oct 2021 05:47:14 GMT</lastBuildDate>
        <atom:link href="https://blog.cloudflare.com/rss/" rel="self" type="application/rss+xml"/>
        <ttl>60</ttl>
        <item>
            <title><![CDATA[Privacy-Preserving Compromised Credential Checking]]></title>
            <description>
                <![CDATA[Announcing a public demo and open-sourced implementation of a privacy-preserving compromised credential checking service]]></description>
            <link>https://blog.cloudflare.com/privacy-preserving-compromised-credential-checking/</link>
            <guid isPermaLink="false">6166e7e065133e02a961145d</guid>
            <category><![CDATA[Research]]></category>
            <category><![CDATA[Security]]></category>
            <category><![CDATA[Product News]]></category>
            <dc:creator><![CDATA[Luke Valenta]]></dc:creator>
            <pubDate>Thu, 14 Oct 2021 12:59:53 GMT</pubDate>
            <media:content url="https://blog.cloudflare.com/content/images/2021/10/image6-15.png" medium="image"/>
            <content:encoded><![CDATA[<figure class="kg-card kg-image-card"><img src="https://blog.cloudflare.com/content/images/2021/10/image6-16.png" class="kg-image" alt="Privacy-Preserving Compromised Credential Checking"></figure><img src="https://blog.cloudflare.com/content/images/2021/10/image6-15.png" alt="Privacy-Preserving Compromised Credential Checking"><p>Today we’re announcing a <a href="https://migp.cloudflare.com">public demo</a> and an <a href="https://github.com/cloudflare/migp-go">open-sourced Go implementation</a> of a next-generation, privacy-preserving compromised credential checking protocol called MIGP (“Might I Get Pwned”, a nod to Troy Hunt’s “<a href="https://haveibeenpwned.com/About">Have I Been Pwned</a>”). Compromised credential checking services are used to alert users when their credentials might have been exposed in data breaches. Critically, the ‘privacy-preserving’ property of the MIGP protocol means that clients can check for leaked credentials without leaking <em>any</em> information to the service about the queried password, and only a small amount of information about the queried username. Thus, not only can the service inform you when one of your usernames and passwords may have become compromised, but it does so without exposing any unnecessary information, keeping credential checking from becoming a vulnerability itself. The ‘next-generation’ property comes from the fact that MIGP advances upon the current state of the art in credential checking services by allowing clients to not only check if their <em>exact</em> password is present in a data breach, but to check if <em>similar</em> passwords have been exposed as well. </p><!--kg-card-begin: markdown--><p>For example, suppose your password last year was amazon20\$, and you change your password each year (so your current password is amazon21\$). If last year’s password got leaked, MIGP could tell you that your current password is weak and guessable as it is a simple variant of the leaked password.</p>
<!--kg-card-end: markdown--><p>The MIGP protocol was designed by researchers at Cornell Tech and the University of Wisconsin-Madison, and we encourage you to <a href="https://arxiv.org/pdf/2109.14490.pdf">read the paper</a> for more details. In this blog post, we provide motivation for why compromised credential checking is important for security hygiene, and how the MIGP protocol improves upon the current generation of credential checking services. We then describe our implementation and the deployment of MIGP within Cloudflare’s infrastructure.</p><p>Our MIGP demo and public API are not meant to replace existing credential checking services today, but rather demonstrate what is possible in the space. We aim to push the envelope in terms of privacy and are excited to employ some cutting-edge cryptographic primitives along the way.</p><h2 id="the-threat-of-data-breaches">The threat of data breaches</h2><p>Data breaches are rampant. The <a href="https://lmddgtfy.net/?q=million%20customer%20records">regularity of news articles</a> detailing how tens or hundreds of millions of customer records have been compromised have made us almost numb to the details. Perhaps we all hope to stay safe just by being a small fish in the middle of a very large school of similar fish that is being predated upon. But we can do better than just hope that our particular authentication credentials are safe. We can actually check those credentials against known databases of the very same compromised user information we learn about from the news.</p><p>Many of the security breaches we read about involve leaked databases containing user details. In the worst cases, user data entered during account registration on a particular website is made available (often offered for sale) after a data breach. Think of the addresses, password hints, credit card numbers, and other private details you have submitted via an online form. We rely on the care taken by the online services in question to protect those details. On top of this, consider that the same (or quite similar) usernames and passwords are commonly used on more than one site. Our information across all of those sites may be as vulnerable as the site with the weakest security practices. Attackers take advantage of this fact to actively compromise accounts and exploit users every day.</p><p><a href="https://www.cloudflare.com/learning/bots/what-is-credential-stuffing/">Credential stuffing</a> is an attack in which malicious parties use leaked credentials from an account on one service to attempt to log in to a variety of <em>other</em> services. These attacks are effective because of the prevalence of reused credentials across services and domains. After all, who hasn’t at some point had a favorite password they used for everything? (Quick plug: please use a password manager like LastPass to generate unique and complex passwords for each service you use.)</p><p>Website operators have (or should have) a vested interest in making sure that users of their service are using secure and non-compromised credentials. Given the sophistication of techniques employed by malevolent actors, the standard requirement to “include uppercase, lowercase, digit, and special characters” really is not enough (and can be actively harmful according to <a href="https://pages.nist.gov/800-63-3/sp800-63b.html#appA">NIST’s latest guidance</a>). We need to offer better options to users that keep them safe and preserve the privacy of vulnerable information. Dealing with account compromise and recovery is an expensive process for all parties involved.</p><p>Users and organizations need a way to know if their credentials have been compromised, but how can they do it? One approach is to scour dark web forums for data breach torrent links, download and parse gigabytes or terabytes of archives to your laptop, and then search the dataset to see if their credentials have been exposed. This approach is not workable for the majority of Internet users and website operators, but fortunately there’s a better way — have someone with terabytes to spare do it for you!</p><h2 id="making-compromise-checking-fast-and-easy">Making compromise checking fast and easy</h2><p>This is exactly what compromised credential checking services do: they aggregate breach datasets and make it possible for a client to determine whether a username and password are present in the breached data. <a href="https://haveibeenpwned.com/">Have I Been Pwned</a> (HIBP), launched by Troy Hunt in 2013, was the first major public breach alerting site. It provides a service, Pwned Passwords, where users can <a href="https://www.troyhunt.com/i-wanna-go-fast-why-searching-through-500m-pwned-passwords-is-so-quick/">efficiently check</a> if their passwords have been compromised. The initial version of Pwned Passwords required users to send the full password hash to the service to check if it appears in a data breach. In a <a href="https://blog.cloudflare.com/validating-leaked-passwords-with-k-anonymity/">2018 collaboration</a> with Cloudflare, the service was upgraded to allow users to run range queries over the password dataset, leaking only the salted hash prefix rather than the entire hash. Cloudflare <a href="https://haveibeenpwned.com/Passwords">continues to support</a> the HIBP project by providing CDN and security support for organizations to download the raw Pwned Password datasets.</p><p>The HIBP approach was replicated by <a href="https://www.usenix.org/system/files/sec19-thomas.pdf">Google Password Checkup</a> (GPC) in 2019, with the primary difference that GPC alerts are based on username-password pairs instead of passwords alone, which limits the rate of false positives. <a href="https://www.enzoic.com/">Enzoic</a> and <a href="https://www.microsoft.com/en-us/research/blog/password-monitor-safeguarding-passwords-in-microsoft-edge/">Microsoft Password Monitor</a> are two other similar services. This year, Cloudflare also released <a href="https://developers.cloudflare.com/waf/exposed-credentials-check">Exposed Credential Checks</a> as part of our Web Application Firewall (WAF) to help inform opted-in website owners when login attempts to their sites use compromised credentials. In fact, we use MIGP on the backend for this service to ensure that plaintext credentials <a href="https://blog.cloudflare.com/account-takeover-protection/">never leave the edge server</a> on which they are being processed.</p><p>Most standalone credential checking services work by having a user submit a query containing their password's or username-password pair’s hash prefix. However, this leaks some information to the service, which could be problematic if the service turns out to be malicious or is compromised. In a collaboration with researchers at Cornell Tech published at <a href="https://dl.acm.org/doi/pdf/10.1145/3319535.3354229">CCS’19</a>, we showed just how damaging this leaked information can be. Malevolent actors with access to the data shared with most credential checking services can drastically improve the effectiveness of password-guessing attacks. This left open the question: how can you do compromised credential checking without sharing (leaking!) vulnerable credentials to the service provider itself?</p><h3 id="what-does-a-privacy-preserving-credential-checking-service-look-like">What does a privacy-preserving credential checking service look like?</h3><p>In the aforementioned <a href="https://dl.acm.org/doi/pdf/10.1145/3319535.3354229">CCS'19 paper</a>, we proposed an alternative system in which only the hash prefix of the <em>username</em> is exposed to the MIGP server (<a href="https://www.usenix.org/system/files/sec19-thomas.pdf">independent work out of Google and Stanford</a> proposed a similar system). No information about the password leaves the user device, alleviating the risk of password-guessing attacks. These credential checking services help to preserve password secrecy, but still have a limitation: they can only alert users if the <em>exact</em> queried password appears in the breach.</p><p>The present evolution of this work, <a href="https://arxiv.org/pdf/2109.14490.pdf">Might I Get Pwned (MIGP)</a>, proposes a next-generation <em>similarity-aware</em> compromised credential checking service that supports checking if a password <em>similar</em> to the one queried has been exposed in the data breach. This approach supports the detection of <em>credential tweaking</em> attacks, an advanced version of credential stuffing.</p><p>Credential tweaking takes advantage of the fact that many users, when forced to change their password, use simple variants of their original password. Rather than just attempting to log in using an exact leaked password, say ‘password123’, a credential tweaking attacker might also attempt to log in with easily-predictable variants of the password such as ‘password124’ and ‘password123!’.</p><p>There are two main mechanisms described in the MIGP paper to add password variant support: client-side generation and server-side precomputation. With client-side generation, the client simply applies a series of transform rules to the password to derive the set of variants (e.g., truncating the last letter or adding a ‘!’ at the end), and runs multiple queries to the MIGP service with each username and password variant pair. The second approach is server-side precomputation, where the server applies the transform rules to generate the password variants when encrypting the dataset, essentially treating the password variants as additional entries in the breach dataset. The MIGP paper describes tradeoffs between the two approaches and techniques for generating variants in more detail. Our demo service includes variant support via server-side precomputation.</p><h3 id="breach-extraction-attacks-and-countermeasures">Breach extraction attacks and countermeasures</h3><p>One challenge for credential checking services are <em>breach extraction</em> attacks, in which an adversary attempts to learn username-password pairs that are present in the breach dataset (which might not be publicly available) so that they can attempt to use them in future credential stuffing or tweaking attacks. Similarity-aware credential checking services like MIGP can make these attacks more effective, since adversaries can potentially check for more breached credentials per API query. Fortunately, additional measures can be incorporated into the protocol to help counteract these attacks. For example, if it is problematic to leak the number of ciphertexts in a given bucket, dummy entries and padding can be employed, or an alternative length-hiding bucket format can be used. <a href="https://arxiv.org/pdf/2109.14490.pdf">Slow hashing and API rate limiting</a> are other common countermeasures that credential checking services can deploy to slow down breach extraction attacks. For instance, our demo service applies the memory-hard slow hash algorithm scrypt to credentials as part of the key derivation function to slow down these attacks.</p><p>Let’s now get into the nitty-gritty of how the MIGP protocol works. For readers not interested in the cryptographic details, feel free to skip to the demo below!</p><h2 id="migp-protocol">MIGP protocol</h2><p>There are two parties involved in the MIGP protocol: the client and the server. The server has access to a dataset of plaintext breach entries (username-password pairs), and a secret key used for both the precomputation and the online portions of the protocol. In brief, the client performs some computation over the username and password and sends the result to the server; the server then returns a response that allows the client to determine if their password (or a similar password) is present in the breach dataset.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.cloudflare.com/content/images/2021/10/image8-11.png" class="kg-image" alt="Privacy-Preserving Compromised Credential Checking"><figcaption>Full protocol description from the <a href="https://arxiv.org/pdf/2109.14490.pdf">MIGP paper</a>: clients learn if their credentials are in the breach dataset, leaking only the hash prefix of the queried username to the server</figcaption></figure><h3 id="precomputation">Precomputation</h3><p>At a high level, the MIGP server partitions the breach dataset into <em>buckets</em> based on the hash prefix of the username (the <em>bucket identifier</em>), which is usually 16-20 bits in length.</p><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://blog.cloudflare.com/content/images/2021/10/unnamed--1--2.png" class="kg-image" alt="Privacy-Preserving Compromised Credential Checking"><figcaption>During the precomputation phase of the MIGP protocol, the server derives password variants, encrypts entries, and stores them in buckets based on the hash prefix of the username</figcaption></figure><p>We use server-side precomputation as the variant generation mechanism in our implementation. The server derives one ciphertext for each exact username-password pair in the dataset, and an additional ciphertext per password variant. A bucket consists of the set ciphertexts for all breach entries and variants with the same username hash prefix. For instance, suppose there are n breach entries assigned to a particular bucket. If we compute m variants per entry, counting the original entry as one of the variants, there will be n*m ciphertexts stored in the bucket. This introduces a large expansion in the size of the processed dataset, so in practice it is necessary to limit the number of variants computed per entry. Our demo server stores 10 ciphertexts per breach entry in the input: the exact entry, eight variants (see <a href="https://arxiv.org/pdf/2109.14490.pdf">Appendix A of the MIGP paper</a>), and a special variant for allowing username-only checks.</p><p>Each ciphertext is the encryption of a username-password (or password variant) pair along with some associated metadata. The metadata describes whether the entry corresponds to an exact password appearing in the breach, or a variant of a breached password. The server derives a per-entry secret key pad using a key derivation function (KDF) with the username-password pair and server secret as inputs, and uses XOR encryption to derive the entry ciphertext. The bucket format also supports storing optional encrypted metadata, such as the date the breach was discovered.</p><!--kg-card-begin: markdown--><pre><code>Input:
  Secret sk       // Server secret key
  String u        // Username
  String w        // Password (or password variant)
  Byte mdFlag     // Metadata flag
  String mdString // Optional metadata string

Output:
  String C        // Ciphertext

function Encrypt(sk, u, w, mdFlag, mdString):
  padHdr=KDF1(u, w, sk)
  padBody=KDF2(u, w, sk)
  zeros=[0] * KEY_CHECK_LEN
  C=XOR(padHdr, zeros || mdFlag) || mdString.length || XOR(padBody, mdString)
</code></pre>
<!--kg-card-end: markdown--><p>The precomputation phase only needs to be done rarely, such as when the MIGP parameters are changed (in which case the entire dataset must be re-processed), or when new breach datasets are added (in which case the new data can be appended to the existing buckets).</p><h3 id="online-phase">Online phase</h3><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://blog.cloudflare.com/content/images/2021/10/image1-39.png" class="kg-image" alt="Privacy-Preserving Compromised Credential Checking"><figcaption>During the online phase of the MIGP protocol, the client requests a bucket of encrypted breach entries corresponding to the queried username, and with the server’s help derives a key that allows it to decrypt an entry corresponding to the queried credentials</figcaption></figure><p>The online phase of the MIGP protocol allows a client to check if a username-password pair (or variant) appears in the server’s breach dataset, while only leaking the hash prefix of the username to the server. The client and server engage in an <a href="https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-voprf">OPRF</a> protocol message exchange to allow the client to derive the per-entry decryption key, without leaking the username and password to the server, or the server’s secret key to the client. The client then computes the bucket identifier from the queried username and downloads the corresponding bucket of entries from the server. Using the decryption key derived in the previous step, the client scans through the entries in the bucket attempting to decrypt each one. If the decryption succeeds, this signals to the client that their queried credentials (or a variant thereof) are in the server’s dataset. The decrypted metadata flag indicates whether the entry corresponds to the exact password or a password variant.</p><p>The MIGP protocol solves many of the shortcomings of existing credential checking services with its solution that avoids leaking <em>any</em> information about the client’s queried password to the server, while also providing a mechanism for checking for similar password compromise. Read on to see the protocol in action!</p><h2 id="migp-demo">MIGP demo</h2><p>As the state of the art in attack methodologies evolve with new techniques such as credential tweaking, so must the defenses. To that end, we’ve collaborated with the designers of the MIGP protocol to prototype and deploy the MIGP protocol within Cloudflare’s infrastructure.</p><p>Our MIGP demo server is deployed at <a href="https://migp.cloudflare.com">migp.cloudflare.com</a>, and runs entirely on top of <a href="https://workers.cloudflare.com/">Cloudflare Workers</a>. We use <a href="https://www.cloudflare.com/products/workers-kv/">Workers KV</a> for efficient storage and retrieval of buckets of encrypted breach entries, capping out each bucket size at the current <a href="https://developers.cloudflare.com/workers/platform/limits#kv">KV value limit</a> of 25MB. In our instantiation, we set the username hash prefix length to 20 bits, so that there are a total of 2^20 (or just over 1 million) buckets.</p><p>There are currently two ways to interact with the demo MIGP service: via the browser client at <a href="https://migp.cloudflare.com">migp.cloudflare.com</a>, or via the Go client included in our <a href="https://github.com/cloudflare/migp-go">open-sourced MIGP library</a>. As shown in the screenshots below, the browser client displays the request from your device and the response from the MIGP service. You should take caution to not input any sensitive credentials in a third-party service (feel free to use the test credentials <a href="mailto:username1@example.com">username1@example.com</a> and password1 for the demo).</p><p>Keep in mind that “absence of evidence is not evidence of absence”, especially in the context of data breaches. We intend to periodically update the breach datasets used by the service as new public breaches become available, but no breach alerting service will be able to provide 100% accuracy in assuring that your credentials are safe.</p><p>See the MIGP demo in action in the attached screenshots. Note that in all cases, the username (<a href="mailto:username1@example.com">username1@example.com</a>) and corresponding username prefix hash (000f90f4) remain the same, so the client retrieves the exact same bucket contents from the server each time. However, the blindElement parameter in the client request differs per request, allowing the client to decrypt different bucket elements depending on the queried credentials.</p><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://blog.cloudflare.com/content/images/2021/10/image7-10.png" class="kg-image" alt="Privacy-Preserving Compromised Credential Checking"><figcaption>Example query in which the credentials are exposed in the breach dataset</figcaption></figure><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://blog.cloudflare.com/content/images/2021/10/image4-23.png" class="kg-image" alt="Privacy-Preserving Compromised Credential Checking"><figcaption>Example query in which similar credentials were exposed in the breach dataset</figcaption></figure><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://blog.cloudflare.com/content/images/2021/10/image2-25.png" class="kg-image" alt="Privacy-Preserving Compromised Credential Checking"><figcaption>Example query in which the username is present in the breach dataset</figcaption></figure><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://blog.cloudflare.com/content/images/2021/10/image3-23.png" class="kg-image" alt="Privacy-Preserving Compromised Credential Checking"><figcaption>Example query in which the credentials are not found in the dataset</figcaption></figure><h2 id="open-sourced-migp-library">Open-sourced MIGP library</h2><p>We are open-sourcing our implementation of the MIGP library under the BSD-3 License. The code is written in Go and is available at <a href="https://github.com/cloudflare/migp-go">https://github.com/cloudflare/migp-go</a>. Under the hood, we use Cloudflare’s <a href="https://github.com/cloudflare/circl">CIRCL library </a>for OPRF support and Go’s supplementary cryptography library for <a href="https://pkg.go.dev/golang.org/x/crypto/scrypt">scrypt</a> support. Check out the repository for instructions on setting up the MIGP client to connect to Cloudflare’s demo MIGP service. Community contributions and feedback are welcome!</p><h2 id="future-directions">Future directions</h2><p>In this post, we announced our open-sourced implementation and demo deployment of MIGP, a next-generation breach alerting service. Our deployment is intended to lead the way for other credential compromise checking services to migrate to a more privacy-friendly model, but is not itself currently meant for production use. However, we identify several concrete steps that can be taken to improve our service in the future:</p><ul><li>Add more breach datasets to the database of precomputed entries</li><li>Increase the number of variants in server-side precomputation</li><li>Add library support in more programming languages to reach a broader developer base</li><li>Hide the number of ciphertexts per bucket by padding with dummy entries</li><li>Add support for efficient client-side variant checking by batching API calls to the server</li></ul><p>For exciting future research directions that we are investigating — including one proposal to remove the transmission of plaintext passwords from client to server entirely — take a look at <a href="https://blog.cloudflare.com/research-directions-in-password-security">https://blog.cloudflare.com/research-directions-in-password-security</a>.</p><p>We are excited to share and build upon these ideas with the wider Internet community, and hope that our efforts impact positive change in the password security ecosystem. We are particularly interested in collaborating with stakeholders in the space to develop, test, and deploy next-generation protocols to improve user security and privacy. You can reach us with questions, comments, and research ideas at <a href="mailto:ask-research@cloudflare.com">ask-research@cloudflare.com</a>. For those interested in joining our team, please visit our <a href="https://www.cloudflare.com/careers/jobs/?department=Technology%20Research&amp;location=default">Careers Page</a>.</p>]]></content:encoded>
        </item>
    </channel>
</rss>
