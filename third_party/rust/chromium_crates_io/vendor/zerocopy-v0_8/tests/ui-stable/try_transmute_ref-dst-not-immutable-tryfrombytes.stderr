error[E0277]: the trait bound `NotZerocopy: zerocopy::TryFromBytes` is not satisfied
  --> tests/ui-stable/try_transmute_ref-dst-not-immutable-tryfrombytes.rs:19:33
   |
19 |     let dst_not_try_from_bytes: Result<&NotZerocopy, _> = try_transmute_ref!(&AU16(0));
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^ the trait `zerocopy::TryFromBytes` is not implemented for `NotZerocopy`
   |
   = note: Consider adding `#[derive(TryFromBytes)]` to `NotZerocopy`
   = help: the following other types implement trait `zerocopy::TryFromBytes`:
             ()
             *const T
             *mut T
             AU16
             AtomicBool
             AtomicI16
             AtomicI32
             AtomicI64
           and $N others
note: required by a bound in `ValidityError`
  --> src/error.rs
   |
   | pub struct ValidityError<Src, Dst: ?Sized + TryFromBytes> {
   |                                             ^^^^^^^^^^^^ required by this bound in `ValidityError`

error[E0277]: the trait bound `NotZerocopy: zerocopy::TryFromBytes` is not satisfied
  --> tests/ui-stable/try_transmute_ref-dst-not-immutable-tryfrombytes.rs:19:59
   |
19 |     let dst_not_try_from_bytes: Result<&NotZerocopy, _> = try_transmute_ref!(&AU16(0));
   |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `zerocopy::TryFromBytes` is not implemented for `NotZerocopy`
   |
   = note: Consider adding `#[derive(TryFromBytes)]` to `NotZerocopy`
   = help: the following other types implement trait `zerocopy::TryFromBytes`:
             ()
             *const T
             *mut T
             AU16
             AtomicBool
             AtomicI16
             AtomicI32
             AtomicI64
           and $N others
note: required by a bound in `try_transmute_ref`
  --> src/util/macro_util.rs
   |
   | pub fn try_transmute_ref<Src, Dst>(src: &Src) -> Result<&Dst, ValidityError<&Src, Dst>>
   |        ----------------- required by a bound in this function
...
   |     Dst: TryFromBytes + Immutable,
   |          ^^^^^^^^^^^^ required by this bound in `try_transmute_ref`
   = note: this error originates in the macro `try_transmute_ref` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotZerocopy: zerocopy::Immutable` is not satisfied
  --> tests/ui-stable/try_transmute_ref-dst-not-immutable-tryfrombytes.rs:19:59
   |
19 |     let dst_not_try_from_bytes: Result<&NotZerocopy, _> = try_transmute_ref!(&AU16(0));
   |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `zerocopy::Immutable` is not implemented for `NotZerocopy`
   |
   = note: Consider adding `#[derive(Immutable)]` to `NotZerocopy`
   = help: the following other types implement trait `zerocopy::Immutable`:
             &T
             &mut T
             ()
             *const T
             *mut T
             AU16
             Box<T>
             F32<O>
           and $N others
note: required by a bound in `try_transmute_ref`
  --> src/util/macro_util.rs
   |
   | pub fn try_transmute_ref<Src, Dst>(src: &Src) -> Result<&Dst, ValidityError<&Src, Dst>>
   |        ----------------- required by a bound in this function
...
   |     Dst: TryFromBytes + Immutable,
   |                         ^^^^^^^^^ required by this bound in `try_transmute_ref`
   = note: this error originates in the macro `try_transmute_ref` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotZerocopy: zerocopy::TryFromBytes` is not satisfied
  --> tests/ui-stable/try_transmute_ref-dst-not-immutable-tryfrombytes.rs:19:59
   |
19 |     let dst_not_try_from_bytes: Result<&NotZerocopy, _> = try_transmute_ref!(&AU16(0));
   |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `zerocopy::TryFromBytes` is not implemented for `NotZerocopy`
   |
   = note: Consider adding `#[derive(TryFromBytes)]` to `NotZerocopy`
   = help: the following other types implement trait `zerocopy::TryFromBytes`:
             ()
             *const T
             *mut T
             AU16
             AtomicBool
             AtomicI16
             AtomicI32
             AtomicI64
           and $N others
note: required by a bound in `ValidityError`
  --> src/error.rs
   |
   | pub struct ValidityError<Src, Dst: ?Sized + TryFromBytes> {
   |                                             ^^^^^^^^^^^^ required by this bound in `ValidityError`
   = note: this error originates in the macro `try_transmute_ref` (in Nightly builds, run with -Z macro-backtrace for more info)
