error[E0277]: the trait bound `NotZerocopy: zerocopy::TryFromBytes` is not satisfied
  --> tests/ui-stable/try_transmute_mut-dst-not-tryfrombytes.rs:20:33
   |
20 |     let dst_not_try_from_bytes: Result<&mut NotZerocopy, _> = try_transmute_mut!(src);
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `zerocopy::TryFromBytes` is not implemented for `NotZerocopy`
   |
   = note: Consider adding `#[derive(TryFromBytes)]` to `NotZerocopy`
   = help: the following other types implement trait `zerocopy::TryFromBytes`:
             ()
             *const T
             *mut T
             AU16
             AtomicBool
             AtomicI16
             AtomicI32
             AtomicI64
           and $N others
note: required by a bound in `ValidityError`
  --> src/error.rs
   |
   | pub struct ValidityError<Src, Dst: ?Sized + TryFromBytes> {
   |                                             ^^^^^^^^^^^^ required by this bound in `ValidityError`

error[E0277]: the trait bound `NotZerocopy: zerocopy::TryFromBytes` is not satisfied
  --> tests/ui-stable/try_transmute_mut-dst-not-tryfrombytes.rs:20:63
   |
20 |     let dst_not_try_from_bytes: Result<&mut NotZerocopy, _> = try_transmute_mut!(src);
   |                                                               ^^^^^^^^^^^^^^^^^^^^^^^ the trait `zerocopy::TryFromBytes` is not implemented for `NotZerocopy`
   |
   = note: Consider adding `#[derive(TryFromBytes)]` to `NotZerocopy`
   = help: the following other types implement trait `zerocopy::TryFromBytes`:
             ()
             *const T
             *mut T
             AU16
             AtomicBool
             AtomicI16
             AtomicI32
             AtomicI64
           and $N others
note: required by a bound in `try_transmute_mut`
  --> src/util/macro_util.rs
   |
   | pub fn try_transmute_mut<Src, Dst>(src: &mut Src) -> Result<&mut Dst, ValidityError<&mut Src, Dst>>
   |        ----------------- required by a bound in this function
...
   |     Dst: TryFromBytes + IntoBytes,
   |          ^^^^^^^^^^^^ required by this bound in `try_transmute_mut`
   = note: this error originates in the macro `try_transmute_mut` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotZerocopy: zerocopy::IntoBytes` is not satisfied
  --> tests/ui-stable/try_transmute_mut-dst-not-tryfrombytes.rs:20:63
   |
20 |     let dst_not_try_from_bytes: Result<&mut NotZerocopy, _> = try_transmute_mut!(src);
   |                                                               ^^^^^^^^^^^^^^^^^^^^^^^ the trait `zerocopy::IntoBytes` is not implemented for `NotZerocopy`
   |
   = note: Consider adding `#[derive(IntoBytes)]` to `NotZerocopy`
   = help: the following other types implement trait `zerocopy::IntoBytes`:
             ()
             AU16
             AtomicBool
             AtomicI16
             AtomicI32
             AtomicI64
             AtomicI8
             AtomicIsize
           and $N others
note: required by a bound in `try_transmute_mut`
  --> src/util/macro_util.rs
   |
   | pub fn try_transmute_mut<Src, Dst>(src: &mut Src) -> Result<&mut Dst, ValidityError<&mut Src, Dst>>
   |        ----------------- required by a bound in this function
...
   |     Dst: TryFromBytes + IntoBytes,
   |                         ^^^^^^^^^ required by this bound in `try_transmute_mut`
   = note: this error originates in the macro `try_transmute_mut` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotZerocopy: zerocopy::TryFromBytes` is not satisfied
  --> tests/ui-stable/try_transmute_mut-dst-not-tryfrombytes.rs:20:63
   |
20 |     let dst_not_try_from_bytes: Result<&mut NotZerocopy, _> = try_transmute_mut!(src);
   |                                                               ^^^^^^^^^^^^^^^^^^^^^^^ the trait `zerocopy::TryFromBytes` is not implemented for `NotZerocopy`
   |
   = note: Consider adding `#[derive(TryFromBytes)]` to `NotZerocopy`
   = help: the following other types implement trait `zerocopy::TryFromBytes`:
             ()
             *const T
             *mut T
             AU16
             AtomicBool
             AtomicI16
             AtomicI32
             AtomicI64
           and $N others
note: required by a bound in `ValidityError`
  --> src/error.rs
   |
   | pub struct ValidityError<Src, Dst: ?Sized + TryFromBytes> {
   |                                             ^^^^^^^^^^^^ required by this bound in `ValidityError`
   = note: this error originates in the macro `try_transmute_mut` (in Nightly builds, run with -Z macro-backtrace for more info)
