# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
#
# When uploading crates to the registry Cargo will automatically
# "normalize" Cargo.toml files for maximal compatibility
# with all versions of Cargo and also rewrite `path` dependencies
# to registry (e.g., crates.io) dependencies.
#
# If you are reading this file be aware that the original Cargo.toml
# will likely look very different (and much more reasonable).
# See Cargo.toml.orig for the original contents.

[package]
edition = "2021"
rust-version = "1.65"
name = "regex"
version = "1.11.1"
authors = [
    "The Rust Project Developers",
    "Andrew Gallant <jamslam@gmail.com>",
]
build = false
exclude = [
    "/scripts/*",
    "/.github/*",
]
autolib = false
autobins = false
autoexamples = false
autotests = false
autobenches = false
description = """
An implementation of regular expressions for Rust. This implementation uses
finite automata and guarantees linear time matching on all inputs.
"""
homepage = "https://github.com/rust-lang/regex"
documentation = "https://docs.rs/regex"
readme = "README.md"
categories = ["text-processing"]
license = "MIT OR Apache-2.0"
repository = "https://github.com/rust-lang/regex"

[package.metadata.docs.rs]
all-features = true
rustdoc-args = [
    "--cfg",
    "docsrs",
]

[profile.bench]
debug = 2

[profile.dev]
opt-level = 3
debug = 2

[profile.release]
debug = 2

[profile.test]
opt-level = 3
debug = 2

[lib]
name = "regex"
path = "src/lib.rs"

[[test]]
name = "integration"
path = "tests/lib.rs"

[dependencies.aho-corasick]
version = "1.0.0"
optional = true
default-features = false

[dependencies.memchr]
version = "2.6.0"
optional = true
default-features = false

[dependencies.regex-automata]
version = "0.4.8"
features = [
    "alloc",
    "syntax",
    "meta",
    "nfa-pikevm",
]
default-features = false

[dependencies.regex-syntax]
version = "0.8.5"
default-features = false

[dev-dependencies.anyhow]
version = "1.0.69"

[dev-dependencies.doc-comment]
version = "0.3"

[dev-dependencies.env_logger]
version = "0.9.3"
features = [
    "atty",
    "humantime",
    "termcolor",
]
default-features = false

[dev-dependencies.once_cell]
version = "1.17.1"

[dev-dependencies.quickcheck]
version = "1.0.3"
default-features = false

[dev-dependencies.regex-test]
version = "0.1.0"

[features]
default = [
    "std",
    "perf",
    "unicode",
    "regex-syntax/default",
]
logging = [
    "aho-corasick?/logging",
    "memchr?/logging",
    "regex-automata/logging",
]
pattern = []
perf = [
    "perf-cache",
    "perf-dfa",
    "perf-onepass",
    "perf-backtrack",
    "perf-inline",
    "perf-literal",
]
perf-backtrack = ["regex-automata/nfa-backtrack"]
perf-cache = []
perf-dfa = ["regex-automata/hybrid"]
perf-dfa-full = [
    "regex-automata/dfa-build",
    "regex-automata/dfa-search",
]
perf-inline = ["regex-automata/perf-inline"]
perf-literal = [
    "dep:aho-corasick",
    "dep:memchr",
    "regex-automata/perf-literal",
]
perf-onepass = ["regex-automata/dfa-onepass"]
std = [
    "aho-corasick?/std",
    "memchr?/std",
    "regex-automata/std",
    "regex-syntax/std",
]
unicode = [
    "unicode-age",
    "unicode-bool",
    "unicode-case",
    "unicode-gencat",
    "unicode-perl",
    "unicode-script",
    "unicode-segment",
    "regex-automata/unicode",
    "regex-syntax/unicode",
]
unicode-age = [
    "regex-automata/unicode-age",
    "regex-syntax/unicode-age",
]
unicode-bool = [
    "regex-automata/unicode-bool",
    "regex-syntax/unicode-bool",
]
unicode-case = [
    "regex-automata/unicode-case",
    "regex-syntax/unicode-case",
]
unicode-gencat = [
    "regex-automata/unicode-gencat",
    "regex-syntax/unicode-gencat",
]
unicode-perl = [
    "regex-automata/unicode-perl",
    "regex-automata/unicode-word-boundary",
    "regex-syntax/unicode-perl",
]
unicode-script = [
    "regex-automata/unicode-script",
    "regex-syntax/unicode-script",
]
unicode-segment = [
    "regex-automata/unicode-segment",
    "regex-syntax/unicode-segment",
]
unstable = ["pattern"]
use_std = ["std"]
