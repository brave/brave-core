# Copyright 2023 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# @generated from third_party/rust/chromium_crates_io/BUILD.gn.hbs by
# tools/crates/gnrt.
# Do not edit!

import("//build/rust/cargo_crate.gni")

cargo_crate("lib") {
  crate_name = "challenge_bypass_ristretto"
  epoch = "2"
  crate_type = "rlib"
  crate_root = "//brave/third_party/rust/chromium_crates_io/vendor/challenge-bypass-ristretto-v2/src/lib.rs"
  sources = [
    "//brave/third_party/rust/chromium_crates_io/vendor/challenge-bypass-ristretto-v2/src/dleq.rs",
    "//brave/third_party/rust/chromium_crates_io/vendor/challenge-bypass-ristretto-v2/src/errors.rs",
    "//brave/third_party/rust/chromium_crates_io/vendor/challenge-bypass-ristretto-v2/src/lib.rs",
    "//brave/third_party/rust/chromium_crates_io/vendor/challenge-bypass-ristretto-v2/src/macros.rs",
    "//brave/third_party/rust/chromium_crates_io/vendor/challenge-bypass-ristretto-v2/src/oprf.rs",
    "//brave/third_party/rust/chromium_crates_io/vendor/challenge-bypass-ristretto-v2/src/voprf.rs",
  ]
  inputs = [
    "//brave/third_party/rust/chromium_crates_io/vendor/challenge-bypass-ristretto-v2/src/../README.md",
    "//brave/third_party/rust/chromium_crates_io/vendor/challenge-bypass-ristretto-v2/src/../docs/PROTOCOL.md",
  ]

  build_native_rust_unit_tests = false
  edition = "2018"
  cargo_pkg_authors = "eV <ev@7pr.xyz>"
  cargo_pkg_name = "challenge-bypass-ristretto"
  cargo_pkg_description = "A rust implemention of the privacy pass cryptographic protocol using the Ristretto group (WIP)"
  cargo_pkg_version = "2.0.2"

  deps = [
    "//brave/third_party/rust/base64/v0_22:lib",
    "//brave/third_party/rust/curve25519_dalek/v4:lib",
    "//brave/third_party/rust/digest/v0_10:lib",
    "//brave/third_party/rust/hmac/v0_12:lib",
    "//brave/third_party/rust/rand/v0_8:lib",
    "//brave/third_party/rust/rand_chacha/v0_3:lib",
    "//brave/third_party/rust/rand_core/v0_6:lib",
    "//brave/third_party/rust/serde/v1:lib",
    "//brave/third_party/rust/subtle/v2:lib",
    "//brave/third_party/rust/zeroize/v1:lib",
  ]
  features = [
    "alloc",
    "base64",
    "default",
    "serde",
    "serde_base64",
    "std",
  ]
  rustenv = []
  rustflags = []

  #####################################################################
  # Tweaking which GN `config`s apply to this target.

  # Config changes that apply to all `//third_party/rust` crates.
  _configs_to_remove = [
    # We don't need code coverage data for any `chromium_crates_io` crates.
    "//build/config/coverage:default_coverage",

    # This is third-party code, so remove `chromium_code` config.  We are not
    # at the same time adding `//build/config/compiler:no_chromium_code`,
    # because 1) we don't want to pull how warnings are handled by that config
    # and 2) that config doesn't have any non-warnings-related stuff.
    "//build/config/compiler:chromium_code",
  ]
  _configs_to_add = []

  # Changing (if needed) which configs apply to this specific crate (based on
  # `extra_kv.configs_to_remove` and `extra_kv.configs_to_add` from
  # `gnrt_config.toml`).
  _configs_to_remove += []
  _configs_to_add += []

  # Applying config changes.
  library_configs -= _configs_to_remove
  library_configs += _configs_to_add
  executable_configs -= _configs_to_remove
  executable_configs += _configs_to_add
  proc_macro_configs -= _configs_to_remove
  proc_macro_configs += _configs_to_add
}
